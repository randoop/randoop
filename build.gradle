/*
 * build.gradle for Randoop
 *
 * Quick instructions: in project directory run with command
 *   ./gradlew build
 */

plugins {
  /*
   * Setup gradle-git so can clone plume-lib
   * https://github.com/ajoberstar/gradle-git
   */
  id 'org.ajoberstar.grgit' version '1.4.2'

  /*
   * Plugin that applies Google-Java-format to the Java files in the project.
   * https://github.com/sherter/google-java-format-gradle-plugin
   */
  id 'com.github.sherter.google-java-format' version '0.2'
}

/* Common build configuration for Randoop and agents */
allprojects {

  /* This project and agent subprojects are Java projects */
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'jacoco'
  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  /* Use Maven Central when have external dependencies */
  repositories {
    mavenCentral()
    jcenter()
  }

  /* Randoop version number - added to generated jar files */
  version = '3.0.8'
}

/******
 * Configuration specific to Randoop and not agents
 * Configuration for agent FOO appears in agents/FOO/FOO.gradle .
 ******/

description = "Randoop automated test generation"

/* Root for working directories for system test generated files */
def workingDirectories = "$buildDir/working-directories"

sourceSets {
  /* JUnit tests that must be run with -javaagent */
  agentTest {
    java {
      srcDir 'src/agenttest/java'
    }
    resources {
      srcDir 'src/agenttest/resources'
    }
  }

  /* system tests */
  systemTest {
    java {
      srcDir 'src/systemtest/java'
    }
    resources {
      srcDir 'src/systemtest/resources'
      srcDir 'src/testinput/resources'
    }
    output.dir(workingDirectories, builtBy: 'generateWorkingDirs')
  }

  /* Code sets used by system tests. There are no actual tests here. */
  testInput {
    java {
      srcDir 'src/testinput/java'
    }
    resources {
      srcDir 'src/testinput/resources'
    }
  }

  test {
    resources {
      srcDir 'src/testinput/resources'
    }
  }
}

configurations {
  manual {
    description = "Generate user and developer documentation"
  }

  /*
   * Used to manage javaagent jar file
   */
  jacocoagent

  /*
   * The agent tests are JUnit tests run with the exercised-class-agent, so
   * borrow from unit test configurations.
   */
  agentTestCompile.extendsFrom testCompile
  agentTestRuntime.extendsFrom testRuntime

  systemTestCompile.extendsFrom testCompile
  systemTestRuntime.extendsFrom testRuntime
}

dependencies {
  /* Randoop uses local copy of Plume */
  compile files('lib/plume.jar')
  compile 'com.google.code.gson:gson:2.7'

  /* JavaParser used by Minimize */
  compile 'com.github.javaparser:javaparser-core:3.0.0-alpha.4'
  compile group: 'junit', name: 'junit', version: '4.+'

  /* sourceSet test uses JUnit and some use testInput source set */
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
  testCompile sourceSets.testInput.output

  /*
   * sourceSet agentTest uses output from main sourceSet, and agent projects.
   * (Also, see configuration block.)
   */
  agentTestCompile sourceSets.main.output
  agentTestRuntime project(':exercised-class')

  jacocoagent group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.7.7.201606060606'

  /*
   * source set systemTest
   */
   systemTestCompile sourceSets.main.output
   systemTestRuntime sourceSets.testInput.output
   systemTestCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
   systemTestCompile group: 'org.jacoco', name: 'org.jacoco.core', version: '0.7.7.201606060606'
   systemTestCompile group: 'org.jacoco', name: 'org.jacoco.report', version: '0.7.7.201606060606'

  /*
   * sourceSet testInput depends on output of main.
   * Also, src/testinput/java/ps1/RatPolyTest.java uses JUnit
   */
  testInputCompile sourceSets.main.output
  testInputCompile group: 'junit', name: 'junit', version: '4.+'

  /*
   * building documentation uses Options doclet that is part of plume, and
   * requires compiled source.
   */
  manual files('lib/plume.jar')
  manual sourceSets.main.output
}

/*
 * Configuration for formatting
 */
tasks.googleJavaFormat {
  description = "Reformat Java source code with Google-Java-format"
  exclude 'src/testinput'
}

tasks.verifyGoogleJavaFormat {
  description = "Check Java source code is in Google-Java-format"
  exclude 'src/testinput'
}

/*
 * Configuration for compilation.
 */
compileJava.options.compilerArgs = ['-Xlint','-g','-Xlint:-classfile']
compileTestJava.options.compilerArgs = ['-g','-Xlint:-classfile']
compileAgentTestJava.options.compilerArgs = ['-g','-Xlint:-classfile']
compileSystemTestJava.options.compilerArgs = ['-g','-Xlint:-classfile']
compileTestInputJava.options.compilerArgs = ['-nowarn','-g','-Xlint:-classfile']


/*
 * Configuration for testing.
 * In terms of build, we have two kinds of tests, both using JUnit.
 *   * Those in src/agenttest require the exercised-class Java agent.
 *   * Those in src/test are run without the agent.
 *     This second group includes tests that run the full Randoop over
 *     classes that (mostly) are located in src/testinput.
 */

/*
 * Configuration of test task from Java plugin.
 * Runs all tests in test sourceSet except those excluded below.
 */
test {

  /*
   * Set the working directory for JUnit tests to the resources directory
   * instead of the project directory.
   */
  workingDir = file("$buildDir/resources")

  /*
   * Show as much as possible to console.
   */
  testLogging {
    events 'started', 'passed'
    showStandardStreams = true
    exceptionFormat = 'full'
  }

  /* Turn off HTML reports -- handled by testReport task */
  reports.html.enabled = false

  /*
   * Temporary exclusion b/c script file uses generics as raw types and conflicts with
   * other uses of parsing.
   */
  exclude '**/randoop/test/SequenceTests.*'

  /*
   * Problematic tests excluded during Gradle setup that need to be evaluated.
   * Unless otherwise noted, these are tests that were not previously run by
   * Makefile. However, some included tests were also not run, but are not
   * failing.
   */
  exclude 'randoop/test/NonterminatingInputTest.*'
  exclude 'randoop/test/EmptyTest.*'
  exclude 'randoop/test/RandoopPerformanceTest.*' /* had target but not run */
  exclude 'randoop/test/ForwardExplorerPerformanceTest.*'
  exclude 'randoop/test/ForwardExplorerTests2.*' /* sporadic heap space issue */
  exclude 'randoop/test/Test_SomeDuplicates.*'
  exclude 'randoop/test/Test_SomePass.*'
  exclude 'randoop/operation/OperationParserTests.*'
  exclude 'randoop/main/TestInput1.*'
  exclude 'randoop/main/TestInput2.*'
  exclude 'randoop/main/TestInput3.*'
  exclude 'randoop/main/TestInput4.*'
  exclude 'randoop/main/TestInput5.*'
}

/*
 * Configuration of agentTest task.
 * Runs JUnit with exercised-class Java agent over all classes in agentTest
 * sourceSet.
 * Requires that exercised-class jar file copied into Randoop build/libs.
 */
task agentTest(type: Test, dependsOn: 'copyJars') {
  /*
   * Set the working directory for JUnit tests to the resources directory
   * instead of the project directory.
   */
  workingDir = sourceSets.agentTest.output.resourcesDir
  testClassesDir = sourceSets.agentTest.output.classesDir
  classpath = sourceSets.agentTest.runtimeClasspath
  jvmArgs "-javaagent:$buildDir/libs/exercised-class-$version"+".jar"

  /*
   * Show as much as possible to console.
   */
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }

  /* Turn off HTML reports -- handled by testReport task */
  reports.html.enabled = false
}

/*
 * Link the agentTest task into project check task. Includes agent tests into
 * the project build task.
 */
check.dependsOn agentTest

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

/*
 * Task to build the root directory of working directories used by the
 * JUnit tests in the systemTest task.
 */
task generateWorkingDirs {
  doLast {
    def generated = file(workingDirectories)
    if (! generated.exists()) {
      generated.mkdir()
    }
  }
}

/*
 * Extracts JaCoCo javaagent into build/jacocoagent
 */
task extractJacocoAgent(type: Copy) {
  from {
    configurations.jacocoagent.collect { zipTree(it) }
  }
  into "$buildDir/jacocoagent/"
}

/*
 * Configuration of the systemTest task.
 * Runs JUnit over all classes in systemTest sourceSet.
 * JUnit tests assume that working directories can be found in the build directory.
 */
task systemTest(type: Test, dependsOn: [ 'extractJacocoAgent', 'generateWorkingDirs' ]) {

  workingDir = file("$buildDir")
  testClassesDir = sourceSets.systemTest.output.classesDir
  classpath = sourceSets.systemTest.runtimeClasspath

  /*
   * Show as much as possible to console.
   */
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }

  /* Turn off HTML reports -- handled by testReport task */
  reports.html.enabled = false
}

/*
 * Link the systemTest task into the project check task.
 * Includes system tests into the project build task.
 */
check.dependsOn systemTest

tasks.withType(Test) {
 /*
  * Set the destination directory for JUnit XML output files
  */
  reports.junitXml.destination = file("$buildDir/test-results/${name}")
 /*
  * Set the heap size and GC for running tests.
  */
  jvmArgs '-Xmx384m', '-XX:+UseG1GC', '-XX:SoftRefLRUPolicyMSPerMB=250'
}

/*
 * Configuration of task to write HTML reports into build/reports/allTests for
 * all tests.
 * [
 *   Note that this may not work correctly if different Test tasks use the same
 *   test classes. Fine here because sourceSets use different packages for test
 *   classes.
 * ]
 */
task testReport(type: TestReport) {
  description "Creates HTML reports for tests results"
  destinationDir = file("$buildDir/reports/allTests")
  reportOn tasks.withType(Test)
}

//****************** Building distribution *****************

/*
 * Only want the jar file to include class files from main source set.
 * (Task part of build by default.)
 */
jar {
  from sourceSets.main.output
}

// want to archive locally
uploadArchives {
  repositories {
    flatDir {
      dirs 'dist'
    }
  }
}

task copyJars(type: Copy, dependsOn: [':exercised-class:jar', ':mapcall:jar']) {
  from subprojects.collect { it.tasks.withType(Jar) }
  into "$buildDir/libs"
}

task singleJar (type: Jar) {
  group "build"
  description "Assemble a fat jar archive of Randoop and runtime dependencies"
  baseName = project.name + '-all'
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
}

assemble.dependsOn singleJar

task distributionZip (type: Zip , dependsOn: ['singleJar', 'copyJars', 'manual']) {
  description "Assemble a zip file with jar files and user documentation"
  def dirName = "$baseName-$version"
  from 'build/libs/'
  from ('build/docs/manual/index.html') {
    into 'doc'
  }
  from ('build/docs/manual/stylesheets') {
    into 'doc/manual/stylesheets'
  }
  from 'doc/READMEDIST.txt'
  into (dirName)
  exclude { details -> details.file.name.contains('randoop') && ! details.file.name.contains('-all-') }
  rename ('READMEDIST.txt', 'README.txt')
}

/********************* Building manual *******************/
/*
 * Goal is to create the contents of the manual directory within buildDir to be
 * moved to project docs directory.
 *
 * Has structure:
 *   docs/
 *     api/ - contains javadoc for main source set
 *     manual/
 *       dev.html - developer documentation
 *       index.html - user documentation
 *       *example.txt - example configuration files for user manual
 *       stylesheets/ - contains css file for web pages
 */

 /*
  * Get the plume-lib repo using gradle-git, and save into utils/plume-lib
  */
task clone {
  doLast {
    def plumeFolder = file("$buildDir/utils/plume-lib")
    if ( ! plumeFolder.exists() ) {
      org.ajoberstar.grgit.Grgit.clone(dir: plumeFolder, uri: 'https://github.com/mernst/plume-lib.git')
    } else {
      println("WARNING: not cloning plume-lib because already exists.")
      println("         Force clone by running after clean")
    }
  }
}

/*
 * Set destination directory to build/docs/api, and restrict to classes in
 * main sourceSet.
 */
javadoc {
  destinationDir = file("${buildDir}/docs/api")
  source sourceSets.main.allJava
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.addStringOption("stylesheetfile", "src/docs/resources/stylesheets/javadocstyle.css")
}

// needed for javadoc.doLast
javadoc.dependsOn clone

javadoc.doLast {
  // Work around Javadoc bug
  exec {
    commandLine "$buildDir/utils/plume-lib/bin/preplace", "<dt><span class=\"memberNameLink\"><a href=\".*\\(\\)</a></span> - Constructor for enum [a-zA-Z0-9_.]*<a href=\".*</a></dt>", "", "build/docs/api/index-all.html"
  }
  // Reduce size of diffs
  exec {
    commandLine "$buildDir/utils/plume-lib/bin/preplace", "^<!-- Generated by javadoc \\(.* -->\$", ""
  }
  exec {
    commandLine "$buildDir/utils/plume-lib/bin/preplace", "^<meta name=\"date\" content=\"[-0-9]+\">\$", ""
  }
}

task copyManual(type: Copy) {
  from ("src/docs/manual")
  into "${buildDir}/docs/manual"
}

/*
 * Configuration of updateUserTOC task to update the table-of-contents for the
 * user documentation.
 */
task updateUserTOC( type:Exec, dependsOn: [ 'copyManual', 'clone' ]) {
  executable "$buildDir/utils/plume-lib/bin/html-update-toc"
  args  "${buildDir}/docs/manual/index.html"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
}

/* Configuration of task updateDevTOC to update table of contents in developer
 * documentation.
 */
task updateDevTOC( type:Exec, dependsOn: [ 'copyManual', 'clone' ]) {
  executable "$buildDir/utils/plume-lib/bin/html-update-toc"
  args "${buildDir}/docs/manual/dev.html"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
}

/*
 * Configuration of generateOptionsDoc task that applies plume.OptionsDoclet
 * to docs/manual/index.html to add command-line arguments extracted from the given
 * @Option annotated classes. Applied in-place.
 */
task generateOptionsDoc(type: Javadoc, dependsOn: ['assemble', 'javadoc', 'copyManual' ]) {
  source sourceSets.main.allJava
  classpath = sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
  title = "" // workaround to Javadoc task wanting to spit out title
  destinationDir = file("${buildDir}/docs/manual")
  options.docletpath = configurations.manual.files.asType(List)
  options.doclet = "plume.OptionsDoclet"
  options.addStringOption "docfile", "src/docs/manual/index.html"
  options.addStringOption "outfile", "index.html"
}

/*
 * Configuration of manual task to generate/update and move documentation into
 * build/docs directory.
 */
task manual(type: DefaultTask, dependsOn: ['copyManual', 'generateOptionsDoc', 'updateUserTOC', 'updateDevTOC']) {
  group 'Documentation'
  description "Adds options and TOC to documentation in build/docs"
}

/*
 * Applies HTML5 validator to API javadoc.
 * Note: prior to Java 9, javadoc does not comply with HTML5.
 */
task validateAPI(type: Exec, dependsOn: 'javadoc') {
  description "Run html5validator to find HTML errors in API documentation"
  if (JavaVersion.current().isJava9Compatible()) {
    environment PATH: "$System.env.PATH"
    commandLine "html5validator", "--root", "${buildDir}/docs/api"
  } else {
    commandLine "echo", "WARNING: HTML validation of API only run in Java 9+"
  }
}

/*
 * Applies HTML5 validator to find errors in the manual post options and TOC updates.
 */
task validateManual(type: Exec, dependsOn: 'manual') {
  description "Run html5validator to find HTML errors in manual documents"
  if (JavaVersion.current().isJava8Compatible()) {
    environment PATH: "$System.env.PATH"
    commandLine "html5validator", "--root", "${buildDir}/docs/manual"
  } else {
    commandLine "echo","WARNING: HTML validation of manuals only run in Java 8+"
  }
}

/*
 * Copies documentation to docs/ directory.
 * This should only be done as part of the release process.
 * When committed and pushed, these files will be visible as
 * https://randoop.github.io/randoop/ .
 */
task publishSite (type:Copy, dependsOn: ['javadoc', 'validateAPI', 'manual', 'validateManual' ]) {
  group 'Publishing'
  description "Copies files into docs directory from build/docs and src/docs/site"
  fileMode = Integer.parseInt("444", 8) //make site files read-only
  from ("${buildDir}/docs")
  from ("src/docs/site")
  into "${projectDir}/docs"
}

/*
 * Applies HTML5 validator to project site HTML
 */
task validateSite(type: Exec) {
  description "Run html5validator to find HTML errors in site files (excludes manual and api)"
  if (JavaVersion.current().isJava9Compatible()) {
    environment PATH: "$System.env.PATH"
    commandLine "html5validator", "--root", "docs/", "--ignore", "docs/api"
  } else {
    commandLine "echo", "WARNING: HTML validation of site only run in Java 8+"
  }
}

task buildRelease(type: DefaultTask, dependsOn: [ 'build', 'publishSite', 'validateSite' ]) {
  group 'Publishing'
  description "Builds system and documentation, validates HTML, and publishes site"
}

/*************** Gradle Wrapper ******************/
/* Declares the Gradle version to be used when the wrapper is built */
task wrapper(type: Wrapper) {
  description "Configure Gradle Wrapper for this project"
  gradleVersion = '3.2.1'
}

/*************** Other tool configs *************/
/* Make Emacs TAGS table */
task tags(type: Exec, dependsOn: 'clone') {
  description "Run etags to create an Emacs TAGS table"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
  commandLine "bash", "-c", "find src/ -name *.java | sort-directory-order | xargs etags"
}

/* Make Emacs TAGS table, with only Randoop code (not test code) */
task tagsNoTests(type: Exec, dependsOn: 'clone') {
  description "Run etags to create an Emacs TAGS table"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
  commandLine "bash", "-c", "find src/ -name *.java | sort-directory-order | grep -v /testinput/ | xargs etags"
}

/* Run checklink */
task checklink(type: Exec, dependsOn: 'clone') {
  description "Run checklink on randoop.github.io/randoop/ and write output to checklink-log.txt"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
  commandLine 'bash', '-c', """
     checklink -q -r `grep -v '^#' build/utils/plume-lib/bin/checklink-args.txt` https://randoop.github.io/randoop/ &> checklink-log.txt
  """
}


task installGitHooks(type: Copy) {
  from 'scripts/'
  into '.git/hooks'
}
/* Always run this task. */
tasks.installGitHooks.execute()
