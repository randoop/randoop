///////////////////////////////////////////////////////////////////////////
/// Checker Framework pluggable type-checking
///

repositories {
  mavenCentral()
}

configurations {
  checkerFrameworkCheckerJar {
    description = 'the Checker Framework, including the Type Annotations compiler'
  }

  checkerFrameworkAnnotatedJDK {
    description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
  }
  // Needed only if using annotations in comments
  checkerFrameworkJavac {
    description = 'a customization of the Open JDK javac compiler with additional support for type annotations'
  }
}

// By default, use Checker Framework from Maven Central.
// Pass -PcfLocal to use a locally-built version of the Checker Framework.
dependencies {
  if (!rootProject.hasProperty('cfLocal')) {
    ext.checkerFrameworkVersion = '2.5.2'
    checkerFrameworkAnnotatedJDK "org.checkerframework:jdk8:${checkerFrameworkVersion}"
    checkerFrameworkJavac "org.checkerframework:compiler:2.4.0"
    checkerFrameworkCheckerJar "org.checkerframework:checker:${checkerFrameworkVersion}"
    implementation "org.checkerframework:checker-qual7:2.4.0"
  } else {
    ext.checkerframeworkdist = "$System.env.CHECKERFRAMEWORK/checker/dist"
    checkerFrameworkAnnotatedJDK fileTree(dir: "${ext.checkerframeworkdist}", include: "jdk8.jar")
    checkerFrameworkJavac "org.checkerframework:compiler:2.4.0"
    checkerFrameworkCheckerJar fileTree(dir: "${ext.checkerframeworkdist}", include: 'checker.jar')
    compile fileTree(dir: "${ext.checkerframeworkdist}", include: 'checker-qual.jar')
  }
}

// // To type-check all projects.
// allprojects {
//   tasks.withType(JavaCompile).all { JavaCompile compile ->
//     compile.doFirst {
//       compile.options.compilerArgs = [
//         '-processor', 'org.checkerframework.checker.formatter.FormatterChecker,org.checkerframework.checker.index.IndexChecker,org.checkerframework.checker.lock.LockChecker,org.checkerframework.checker.nullness.NullnessChecker,org.checkerframework.checker.signature.SignatureChecker',
//         '-Xmaxerrs', '10000',
//         '-Awarns',    // turn Checker Framework errors into warnings
//         '-source', '7', '-target', '7', // include if Java 7 compatibility is needed
//         '-AcheckPurityAnnotations',
//         '-processorpath', "${configurations.checkerFrameworkCheckerJar.asPath}",
//         "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}",
//         "-Astubs=$System.env.CHECKERFRAMEWORK/checker/resources/javadoc.astub" // TODO: does not work when downloading from Maven Central
//       ]
//       compile.options.fork = true
//       compile.options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
//     }
//   }
// }
if (JavaVersion.current().isJava8Compatible()) {
    task checkTypes (type: JavaCompile, group: 'Verification') {
        description "Run the Checker Framework on the main sources."
        dependsOn 'generateWorkingDirs'
        source = sourceSets.main.java.asFileTree
        classpath = compileJava.classpath
        destinationDir = new File("${buildDir}", "checkerframework")

        options.compilerArgs = [
                '-processor', 'org.checkerframework.checker.index.IndexChecker',
                '-Xmaxerrs', '10000',
                '-Xmaxwarns', '10000',
                // '-Awarns',      // turn Checker Framework errors into warnings
                '-source', '7', '-target', '7', // include if Java 7 compatibility is needed
                // '-AcheckPurityAnnotations',
                '-AprintErrorStack',
                '-processorpath', "${configurations.checkerFrameworkCheckerJar.asPath}",
                "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}",
                '-g', '-Xlint:-classfile'
        ]
        options.fork = true
        options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
    }
    // Reinstate this line, to make Travis run pluggable type-cehcking
    // check.dependsOn "checkTypes"
}
