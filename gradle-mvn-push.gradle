apply plugin: 'maven-publish'
apply plugin: 'signing'

final isSnapshot = version.contains('SNAPSHOT')

final sharedPublicationConfiguration(publication) {
    publication.pom {
        url = 'https://randoop.github.io/randoop/'
        developers {
            // These are the lead developers, not all the contributors.
            developer {
                id = 'mernst'
                name = 'Michael Ernst'
                email = 'mernst@cs.washington.edu'
                url = 'https://homes.cs.washington.edu/~mernst/'
                organization = 'University of Washington'
                organizationUrl = 'https://www.cs.washington.edu/'
            }
        }

        scm {
            url = 'https://github.com/randoop/randoop'
            connection = 'scm:git:git://github.com/randoop/randoop.git'
            developerConnection = 'scm:git:ssh://git@github.com/randoop/randoop.git'
        }

        licenses {
            license {
                name = 'The MIT License'
                url = 'http://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }
    }
}

publishing {
    publications {

        remote(MavenPublication) {
            sharedPublicationConfiguration it
        }

        local(MavenPublication) {
            sharedPublicationConfiguration it
        }
    }

    repositories {
        maven {
            url = (isSnapshot
                    ? project.properties.getOrDefault('SNAPSHOT_REPOSITORY_URL', 'https://oss.sonatype.org/content/repositories/snapshots/')
                    : project.properties.getOrDefault('RELEASE_REPOSITORY_URL', 'https://oss.sonatype.org/service/local/staging/deploy/maven2/')
            )
            credentials {
                username = project.properties.get('SONATYPE_NEXUS_USERNAME')
                password = project.properties.get('SONATYPE_NEXUS_PASSWORD')
            }
        }

        maven {
            name = 'fakeRemote'
            url = "file://$rootProject.buildDir/maven-fake-remote-repository"
        }
    }
}

signing {
    // Use external gpg cmd.  This makes it easy to use gpg-agent,
    // to avoid being prompted for a password once per artifact.
    useGpgCmd()

    // If anything about signing is misconfigured, fail loudly rather than quietly continuing with
    // unsigned artifacts.
    required = true

    // Only sign publications sent to remote repositories; local install installations are unsigned.
    // The `sign` invocation below causes eager creation of three tasks per subproject:
    // `signRemotePublication` is created immediately and `generateMetadataFileForRemotePublication`
    // and `generatePomFileForRemotePublication` are created during configuration.  Creating these
    // lazily instead will require a fix to <https://github.com/gradle/gradle/issues/8796>.
    sign publishing.publications.remote
}

// Only sign releases; snapshots are unsigned.
tasks.withType(Sign).configureEach {
    onlyIf {
        !isSnapshot
    }
}

tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        publication == publishing.publications.remote
    }
}

tasks.withType(PublishToMavenLocal).configureEach {
    onlyIf {
        publication == publishing.publications.local
    }
}
