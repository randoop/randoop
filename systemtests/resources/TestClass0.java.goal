package foo.bar;

import junit.framework.*;

public class TestClass0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test1"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)"");
    java.lang.Object var2 = java2.util2.Collections.max((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test2"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var1, (java.lang.Object)(byte)(-1));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test3"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var4 = java2.util2.Collections.lastIndexOfSubList(var1, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test4"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)1.0d, var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test5"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var1);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test6"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.List var2 = java2.util2.Collections.unmodifiableList(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test7"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var3 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test8"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    int var4 = java2.util2.Collections.indexOfSubList(var1, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test9"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object var3 = var2.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test10"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)"");
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.max((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test11"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var3 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)0L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test12"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var1, (java.lang.Object)(-1));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test13"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var11 = var8.retainAll((java2.util2.Collection)var10);
    boolean var12 = var2.addAll((java2.util2.Collection)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test14"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collections.reverse(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test15"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)"");
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test16"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test17"); }


    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)10);
    java2.util2.Map var3 = java2.util2.Collections.synchronizedMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test18"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var8 = var2.add((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test19"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[hi!]"+ "'", var3.equals("[hi!]"));

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test20"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[10]"+ "'", var3.equals("[10]"));

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test21"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    boolean var5 = var2.equals((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test22"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.shuffle(var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test23"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object var3 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test24"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test25"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test26"); }


    java2.util2.Comparator var0 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test27"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.List var3 = java2.util2.Collections.unmodifiableList(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test28"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var5 = java2.util2.Collections.indexOfSubList(var2, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test29"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var1);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test30"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var6 = var2.subSet((java.lang.Object)"hi!", (java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test31"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var1);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test32"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var6 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)var4, var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test33"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.List var2 = java2.util2.Collections.unmodifiableList(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test34"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object var3 = var2.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test35"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.Set var4 = java2.util2.Collections.unmodifiableSet(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test36"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java.lang.String var6 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test37"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var2.last();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test38"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Comparator var6 = var2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test39"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var3 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test40"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var3, var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test41"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object var3 = var2.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (byte)10+ "'", var3.equals((byte)10));

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test42"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var4 = var2.tailSet((java.lang.Object)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test43"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.Set var4 = java2.util2.Collections.synchronizedSet(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test44"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var1, var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test45"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var6 = java2.util2.Collections.lastIndexOfSubList(var3, var5);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var3, (java.lang.Object)var11);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test46"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var6 = var2.headSet((java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test47"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = java2.util2.Collections.max((java2.util2.Collection)var2, var7);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test48"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.List var2 = java2.util2.Collections.unmodifiableList(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test49"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var5 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[hi!]");

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test50"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    var2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test51"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    int var3 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test52"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    var2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test53"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    java.lang.Object var11 = java2.util2.Collections.max(var10);
    boolean var12 = var2.retainAll(var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var13, var14);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test54"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var2.remove((java.lang.Object)'#');
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test55"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.rotate(var7, 1);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test56"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    boolean var6 = var2.retainAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test57"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var11 = var8.retainAll((java2.util2.Collection)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var12 = var2.subSet((java.lang.Object)var5, (java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test58"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    boolean var4 = var2.equals((java.lang.Object)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test59"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Set var6 = java2.util2.Collections.synchronizedSet(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test60"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var9 = var6.retainAll((java2.util2.Collection)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var12);
    java.lang.Object var15 = java2.util2.Collections.max(var14);
    boolean var16 = var6.retainAll(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var17 = var2.subSet((java.lang.Object)0, (java.lang.Object)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test61"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var1, 1, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test62"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var2.add((java.lang.Object)(short)1);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test63"); }


    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)10);
    java2.util2.Map var3 = java2.util2.Collections.unmodifiableMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test64"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var2.remove((java.lang.Object)(-1.0f));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test65"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var4 = var2.tailSet((java.lang.Object)"[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test66"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Iterator var6 = var5.iterator();
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var12 = var2.subSet((java.lang.Object)var5, (java.lang.Object)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test67"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var11 = var8.retainAll((java2.util2.Collection)var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var14);
    java.lang.Object var17 = java2.util2.Collections.max(var16);
    boolean var18 = var8.retainAll(var16);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    boolean var20 = var2.removeAll((java2.util2.Collection)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test68"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[]");

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test69"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var8 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)var8);
    boolean var10 = var2.containsAll((java2.util2.Collection)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test70"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List var4 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var6 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)var4, var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test71"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var8 = var5.retainAll((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.nCopies(10, (java.lang.Object)var8);
    int var10 = java2.util2.Collections.lastIndexOfSubList(var1, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test72"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    boolean var15 = var10.containsAll(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var16 = java2.util2.Collections.binarySearch(var7, (java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test73"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object var3 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test74"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var2.remove((java.lang.Object)'#');
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test75"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = java2.util2.Collections.binarySearch(var2, (java.lang.Object)1.0d);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test76"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[hi!]");

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test77"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java.lang.Object var6 = java2.util2.Collections.min(var5);
    boolean var7 = var2.retainAll(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test78"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    java.lang.Object var11 = java2.util2.Collections.max(var10);
    boolean var12 = var2.retainAll(var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var13, 10, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test79"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.SortedSet var7 = var2.headSet((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test80"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List var2 = java2.util2.Collections.synchronizedList(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test81"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    boolean var11 = var5.equals((java.lang.Object)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var2.contains((java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test82"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var8 = var5.retainAll((java2.util2.Collection)var7);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var11);
    java.lang.Object var14 = java2.util2.Collections.max(var13);
    boolean var15 = var5.retainAll(var13);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var17 = var2.addAll((java2.util2.Collection)var16);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test83"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var7, var8);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test84"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    boolean var8 = var2.containsAll((java2.util2.Collection)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test85"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)(byte)100);
    java.lang.Object var2 = java2.util2.Collections.max((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + (byte)100+ "'", var2.equals((byte)100));

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test86"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Iterator var6 = var5.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = var2.contains((java.lang.Object)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test87"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    int var5 = java2.util2.Collections.lastIndexOfSubList(var2, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test88"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test89"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.max((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[hi!]"+ "'", var3.equals("[hi!]"));

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test90"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var11 = var8.retainAll((java2.util2.Collection)var10);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    boolean var13 = var2.retainAll((java2.util2.Collection)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test91"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (byte)10+ "'", var3.equals((byte)10));

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test92"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    boolean var4 = var2.remove((java.lang.Object)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test93"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java.lang.Object var6 = java2.util2.Collections.max((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test94"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var7 = var4.retainAll((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var1, var9);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test95"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Collections.rotate(var2, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test96"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Collections.reverse(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test97"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Collections.rotate(var1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test98"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    java2.util2.List var3 = java2.util2.Collections.unmodifiableList(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test99"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var4 = var2.tailSet((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test100"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var11 = var8.retainAll((java2.util2.Collection)var10);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    boolean var13 = var5.addAll(var12);
    boolean var14 = var2.equals((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test101"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    java2.util2.List var10 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = java2.util2.Collections.binarySearch(var7, (java.lang.Object)"hi!");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test102"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var7 = var2.subSet((java.lang.Object)(short)10, (java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test103"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    boolean var11 = var5.addAll(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var2, (java.lang.Object)var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test104"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test105"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Iterator var6 = var2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test106"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)1.0d);
    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test107"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection(var2);
    java2.util2.Collection var5 = java2.util2.Collections.unmodifiableCollection(var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection(var4);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[hi!]");

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test108"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java.lang.Object var6 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test109"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var7 = var2.subSet((java.lang.Object)var5, (java.lang.Object)' ');
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test110"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.SortedSet var6 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test111"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var10 = var5.containsAll(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var2.remove((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test112"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.Collections.reverse(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test113"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java.lang.Object var6 = java2.util2.Collections.min(var5);
    java.lang.Object var7 = java2.util2.Collections.max(var5);
    boolean var8 = var2.equals(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test114"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Collections.shuffle(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test115"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Collections.rotate(var1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test116"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var3, 100, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test117"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    boolean var8 = var2.addAll(var7);
    java.lang.Object var9 = java2.util2.Collections.min((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test118"); }


    java2.util2.List var3 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Map var4 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test119"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var3 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test120"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)(byte)100);
    java.lang.Object var2 = java2.util2.Collections.min((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + (byte)100+ "'", var2.equals((byte)100));

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test121"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.reverse(var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test122"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    java.lang.Object var11 = java2.util2.Collections.max(var10);
    boolean var12 = var2.retainAll(var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.List var14 = java2.util2.Collections.synchronizedList(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test123"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    boolean var8 = var2.equals((java.lang.Object)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test124"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var2.contains((java.lang.Object)100L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test125"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)var4, var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test126"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = java2.util2.Collections.min(var6, var8);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test127"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Comparator var3 = var2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test128"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test129"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var10 = var7.retainAll((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.nCopies(10, (java.lang.Object)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var12 = var2.subSet((java.lang.Object)1.0d, (java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test130"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    boolean var8 = var2.equals((java.lang.Object)var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min((java2.util2.Collection)var2, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (byte)10+ "'", var10.equals((byte)10));

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test131"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min((java2.util2.Collection)var3, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test132"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collections.reverse(var7);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    java2.util2.Collection var18 = java2.util2.Collections.unmodifiableCollection(var16);
    boolean var19 = var13.equals((java.lang.Object)var18);
    java2.util2.Map var20 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var18);
    java2.util2.Map var21 = java2.util2.Collections.synchronizedMap(var20);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var25 = new java2.util2.TreeSet((java2.util2.Collection)var24);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var28);
    java2.util2.Collection var30 = java2.util2.Collections.unmodifiableCollection(var28);
    boolean var31 = var25.equals((java.lang.Object)var30);
    java2.util2.Map var32 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var30);
    java2.util2.Map var33 = java2.util2.Collections.synchronizedMap(var32);
    java2.util2.Map var34 = java2.util2.Collections.singletonMap((java.lang.Object)var20, (java.lang.Object)var32);
    java2.util2.Map var35 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var7, (java.lang.Object)var32);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var25.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test133"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var1, var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test134"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)1.0d);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var7 = var4.retainAll((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var1, var9);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test135"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var3 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test136"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Map var5 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var6 = var2.remove((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test137"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.Collections.reverse(var3);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3, var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test138"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test139"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Collections.shuffle(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test140"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var5 = java2.util2.Collections.binarySearch(var2, (java.lang.Object)10, var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test141"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var5 = var2.subSet((java.lang.Object)100, (java.lang.Object)(-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test142"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max((java2.util2.Collection)var2, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + (byte)10+ "'", var5.equals((byte)10));

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test143"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Collections.rotate(var5, 100);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var11 = java2.util2.Collections.replaceAll(var5, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var1, (java.lang.Object)"hi!");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test144"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    boolean var16 = var10.equals((java.lang.Object)var15);
    java2.util2.Map var17 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var15);
    java2.util2.Map var18 = java2.util2.Collections.synchronizedMap(var17);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var22 = new java2.util2.TreeSet((java2.util2.Collection)var21);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var25);
    boolean var28 = var22.equals((java.lang.Object)var27);
    java2.util2.Map var29 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var27);
    java2.util2.Map var30 = java2.util2.Collections.synchronizedMap(var29);
    java2.util2.Map var31 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var29);
    java2.util2.Map var32 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)var29);
    boolean var33 = var2.remove((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var22.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test145"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)100, var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test146"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collections.rotate(var6, 100);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var12 = java2.util2.Collections.replaceAll(var6, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var15 = new java2.util2.TreeSet((java2.util2.Collection)var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.List var35 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.Collection var36 = java2.util2.Collections.unmodifiableCollection(var34);
    boolean var37 = var31.equals((java.lang.Object)var36);
    java2.util2.Map var38 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var36);
    java2.util2.Map var39 = java2.util2.Collections.synchronizedMap(var38);
    java2.util2.Map var40 = java2.util2.Collections.singletonMap((java.lang.Object)var26, (java.lang.Object)var38);
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.lang.Object[] var42 = var15.toArray(var41);
    boolean var43 = java2.util2.Collections.replaceAll(var2, (java.lang.Object)var12, (java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test147"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var12 = java2.util2.Collections.lastIndexOfSubList(var9, var11);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var9);
    boolean var14 = var2.retainAll((java2.util2.Collection)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test148"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)0L);
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test149"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    java2.util2.List var5 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var2, var5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test150"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var11);
    boolean var14 = var8.equals((java.lang.Object)var13);
    boolean var15 = var5.containsAll(var13);
    boolean var16 = var2.retainAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test151"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java.lang.Object[] var5 = var4.toArray();
    java2.util2.Map var7 = java2.util2.Collections.singletonMap((java.lang.Object)var4, (java.lang.Object)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test152"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var3 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test153"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java2.util2.Collections.rotate((java2.util2.List)var4, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test154"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var8 = var2.contains((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test155"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)"");
    java2.util2.Set var2 = java2.util2.Collections.synchronizedSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test156"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.Collections.rotate(var3, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var3, 100, 10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test157"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.Map var11 = java2.util2.Collections.synchronizedMap(var10);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var15 = new java2.util2.TreeSet((java2.util2.Collection)var14);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    java2.util2.Collection var20 = java2.util2.Collections.unmodifiableCollection(var18);
    boolean var21 = var15.equals((java.lang.Object)var20);
    java2.util2.Map var22 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var20);
    java2.util2.Map var23 = java2.util2.Collections.synchronizedMap(var22);
    java2.util2.Map var24 = java2.util2.Collections.singletonMap((java.lang.Object)var10, (java.lang.Object)var22);
    java2.util2.Map var25 = java2.util2.Collections.synchronizedMap(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test158"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var2 = java2.util2.Collections.nCopies((-1), (java.lang.Object)10.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test159"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test160"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var12 = new java2.util2.TreeSet((java2.util2.Collection)var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var15 = var12.retainAll((java2.util2.Collection)var14);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    java2.util2.Collection var18 = java2.util2.Collections.unmodifiableCollection(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var3, (java.lang.Object)var18);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test161"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var5);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var9);
    boolean var12 = var6.equals((java.lang.Object)var11);
    java2.util2.Map var13 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var14 = var2.add((java.lang.Object)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test162"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object var3 = var2.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (byte)10+ "'", var3.equals((byte)10));

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test163"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var2.remove((java.lang.Object)(byte)0);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test164"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    java2.util2.Collections.rotate(var7, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test165"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    int var5 = java2.util2.Collections.lastIndexOfSubList(var2, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test166"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var9 = var6.retainAll((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.nCopies(10, (java.lang.Object)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var2.add((java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test167"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var6 = java2.util2.Collections.list(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test168"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var12);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var7, (java.lang.Object)var14);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test169"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var2, 10, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test170"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    boolean var16 = var10.equals((java.lang.Object)var15);
    java2.util2.Map var17 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var15);
    java2.util2.Map var18 = java2.util2.Collections.synchronizedMap(var17);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var22 = new java2.util2.TreeSet((java2.util2.Collection)var21);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var25);
    boolean var28 = var22.equals((java.lang.Object)var27);
    java2.util2.Map var29 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var27);
    java2.util2.Map var30 = java2.util2.Collections.synchronizedMap(var29);
    java2.util2.Map var31 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var29);
    java2.util2.Map var32 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var34 = var2.subSet((java.lang.Object)var29, (java.lang.Object)(-1L));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var22.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test171"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Set var6 = java2.util2.Collections.unmodifiableSet(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test172"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test173"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var2, 0, (-1));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test174"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var5 = var2.headSet((java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test175"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    var2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test176"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var8 = var5.retainAll((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    boolean var10 = var2.removeAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test177"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = java2.util2.Collections.max((java2.util2.Collection)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test178"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java.lang.Object[] var8 = var7.toArray();
    java.lang.Object[] var9 = var4.toArray(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test179"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var10);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection(var10);
    java2.util2.Comparator var13 = java2.util2.Collections.reverseOrder();
    java.lang.Object var14 = java2.util2.Collections.min(var10, var13);
    boolean var15 = var2.addAll(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test180"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var5 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var6 = java2.util2.Collections.list(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = var2.remove((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test181"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var7);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var2.add((java.lang.Object)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test182"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.Collections.rotate(var3, 0);
    java2.util2.Collections.rotate(var3, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test183"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var8 = var2.subSet((java.lang.Object)0L, (java.lang.Object)(short)10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test184"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection(var2);
    java2.util2.Collection var5 = java2.util2.Collections.unmodifiableCollection(var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection(var5);
    java.lang.Object var7 = java2.util2.Collections.min(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test185"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var2.remove((java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test186"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[hi!]");

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test187"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var2.add((java.lang.Object)10.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test188"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var16 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)var14, var15);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test189"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    java.lang.Object var8 = java2.util2.Collections.max((java2.util2.Collection)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + true+ "'", var8.equals(true));

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test190"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var11 = var2.subSet((java.lang.Object)(byte)100, (java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test191"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test192"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.Collections.reverse(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test193"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.Collections.reverse(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var12 = java2.util2.Collections.max((java2.util2.Collection)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test194"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var4 = var2.headSet((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test195"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.Collections.rotate(var1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test196"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test197"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)(byte)100);
    boolean var5 = java2.util2.Collections.replaceAll(var1, (java.lang.Object)var3, (java.lang.Object)"[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test198"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var6 = java2.util2.Collections.lastIndexOfSubList(var3, var5);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Collections.reverse(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var5, var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test199"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.reverse(var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test200"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    boolean var8 = var2.addAll(var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration(var7);
    java.lang.Object var10 = java2.util2.Collections.min(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test201"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test202"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var14);
    boolean var17 = var11.equals((java.lang.Object)var16);
    java2.util2.Map var18 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var16);
    java2.util2.Map var19 = java2.util2.Collections.synchronizedMap(var18);
    java2.util2.List var22 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var23 = new java2.util2.TreeSet((java2.util2.Collection)var22);
    java2.util2.List var25 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var26);
    java2.util2.Collection var28 = java2.util2.Collections.unmodifiableCollection(var26);
    boolean var29 = var23.equals((java.lang.Object)var28);
    java2.util2.Map var30 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var28);
    java2.util2.Map var31 = java2.util2.Collections.synchronizedMap(var30);
    java2.util2.Map var32 = java2.util2.Collections.singletonMap((java.lang.Object)var18, (java.lang.Object)var30);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var35 = new java2.util2.TreeSet((java2.util2.Collection)var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var38 = var35.retainAll((java2.util2.Collection)var37);
    java2.util2.Collection var39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.Collections.reverse(var40);
    java2.util2.Collections.shuffle(var40);
    boolean var43 = java2.util2.Collections.replaceAll(var7, (java.lang.Object)var30, (java.lang.Object)var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var3, var40);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var23.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var35.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test203"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var17);
    java2.util2.Collection var19 = java2.util2.Collections.unmodifiableCollection(var17);
    java2.util2.Collection var20 = java2.util2.Collections.unmodifiableCollection(var19);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection(var19);
    java2.util2.Map var22 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var19);
    java2.util2.Map var23 = java2.util2.Collections.synchronizedMap(var22);
    boolean var24 = java2.util2.Collections.replaceAll(var2, (java.lang.Object)10.0f, (java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test204"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var1, var2);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test205"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var5 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var6 = java2.util2.Collections.list(var5);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var5);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java.lang.Object[] var11 = var10.toArray();
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)var11);
    java.lang.Object[] var13 = var7.toArray(var11);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet((java2.util2.Collection)var16);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection(var20);
    boolean var23 = var17.equals((java.lang.Object)var22);
    java2.util2.Map var24 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var25 = var2.subSet((java.lang.Object)var11, (java.lang.Object)var22);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test206"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    boolean var6 = var2.equals((java.lang.Object)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test207"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var10 = java2.util2.Collections.nCopies((-1), (java.lang.Object)var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test208"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test209"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var4 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.List var5 = java2.util2.Collections.unmodifiableList(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test210"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var4 = var2.headSet((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test211"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var3, (java.lang.Object)0L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test212"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max((java2.util2.Collection)var3, var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var13 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)var10, var12);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test213"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection(var6);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = java2.util2.Collections.max(var6, var9);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test214"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.Map var11 = java2.util2.Collections.unmodifiableMap(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test215"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java.lang.Object var3 = java2.util2.Collections.min(var2);
    java.lang.Object var4 = java2.util2.Collections.max(var2);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.min(var2, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test216"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    java.lang.Object var11 = java2.util2.Collections.max(var10);
    boolean var12 = var2.retainAll(var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Collections.reverse(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test217"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collections.rotate(var6, 100);
    java2.util2.Collections.rotate(var6, 0);
    java2.util2.Collections.rotate(var6, 100);
    java2.util2.SortedSet var13 = var2.tailSet((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test218"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.max(var7, var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var16 = var13.retainAll((java2.util2.Collection)var15);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var20 = new java2.util2.TreeSet((java2.util2.Collection)var19);
    java2.util2.List var22 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collection var25 = java2.util2.Collections.unmodifiableCollection(var23);
    boolean var26 = var20.equals((java.lang.Object)var25);
    java2.util2.Map var27 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var25);
    boolean var28 = var13.removeAll(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var29 = var2.subSet((java.lang.Object)var7, (java.lang.Object)var25);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var20.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test219"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection(var2);
    java2.util2.Collection var5 = java2.util2.Collections.unmodifiableCollection(var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection(var4);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min(var4, var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min(var4, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test220"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.List var41 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var41);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.Collections.rotate(var43, 100);
    java2.util2.Collections.rotate(var43, 0);
    int var48 = java2.util2.Collections.lastIndexOfSubList(var3, var43);
    java2.util2.Comparator var49 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var43, (java.lang.Object)var49);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test221"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max((java2.util2.Collection)var6, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var9 = java2.util2.Collections.binarySearch(var2, (java.lang.Object)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test222"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3, var10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test223"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    boolean var16 = var10.equals((java.lang.Object)var15);
    java2.util2.Map var17 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var15);
    java2.util2.Map var18 = java2.util2.Collections.synchronizedMap(var17);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var22 = new java2.util2.TreeSet((java2.util2.Collection)var21);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var25);
    boolean var28 = var22.equals((java.lang.Object)var27);
    java2.util2.Map var29 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var27);
    java2.util2.Map var30 = java2.util2.Collections.synchronizedMap(var29);
    java2.util2.Map var31 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var29);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var34 = new java2.util2.TreeSet((java2.util2.Collection)var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var37 = var34.retainAll((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.Collections.reverse(var39);
    java2.util2.Collections.shuffle(var39);
    boolean var42 = java2.util2.Collections.replaceAll(var6, (java.lang.Object)var29, (java.lang.Object)var39);
    java2.util2.List var43 = java2.util2.Collections.synchronizedList(var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var2.addAll((java2.util2.Collection)var43);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var22.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var34.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test224"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var3 = java2.util2.Collections.nCopies((-1), (java.lang.Object)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test225"); }


    java.lang.Object var0 = new java.lang.Object();
    java2.util2.List var1 = java2.util2.Collections.singletonList(var0);
    java2.util2.List var2 = java2.util2.Collections.unmodifiableList(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var2, (java.lang.Object)(-1.0f));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test226"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.Map var11 = java2.util2.Collections.synchronizedMap(var10);
    java2.util2.Map var12 = java2.util2.Collections.synchronizedMap(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test227"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    java.lang.Object var3 = new java.lang.Object();
    java2.util2.List var4 = java2.util2.Collections.singletonList(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var5 = java2.util2.Collections.binarySearch(var2, (java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test228"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.Map var11 = java2.util2.Collections.synchronizedMap(var10);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var15 = new java2.util2.TreeSet((java2.util2.Collection)var14);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    java2.util2.Collection var20 = java2.util2.Collections.unmodifiableCollection(var18);
    boolean var21 = var15.equals((java.lang.Object)var20);
    java2.util2.Map var22 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var20);
    java2.util2.Map var23 = java2.util2.Collections.synchronizedMap(var22);
    java2.util2.Map var24 = java2.util2.Collections.singletonMap((java.lang.Object)var10, (java.lang.Object)var22);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)var10, (java.lang.Object)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test229"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test230"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    boolean var9 = var2.equals((java.lang.Object)100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test231"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var14);
    boolean var17 = var11.equals((java.lang.Object)var16);
    java2.util2.Map var18 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var16);
    java2.util2.Comparator var19 = java2.util2.Collections.reverseOrder();
    java.lang.Object var20 = java2.util2.Collections.min(var16, var19);
    java.lang.Object var21 = java2.util2.Collections.max(var16);
    boolean var22 = var2.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test232"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    var2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test233"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)(byte)100);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var8 = var2.subSet((java.lang.Object)var4, (java.lang.Object)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[hi!]");

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test234"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[0.0]");

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test235"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    java.lang.Object var8 = java2.util2.Collections.max(var7);
    java2.util2.Map var9 = java2.util2.Collections.singletonMap((java.lang.Object)var2, (java.lang.Object)var7);
    java2.util2.List var10 = java2.util2.Collections.nCopies(100, (java.lang.Object)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test236"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.Set var8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test237"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java.lang.Object var8 = new java.lang.Object();
    java2.util2.List var9 = java2.util2.Collections.singletonList(var8);
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var2.containsAll((java2.util2.Collection)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test238"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var14);
    boolean var17 = var11.equals((java.lang.Object)var16);
    java2.util2.Map var18 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var16);
    java2.util2.Comparator var19 = java2.util2.Collections.reverseOrder();
    java.lang.Object var20 = java2.util2.Collections.max(var16, var19);
    boolean var21 = var2.equals(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test239"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var15);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection(var15);
    java2.util2.Map var18 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var15);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration(var15);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test240"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.Comparator var8 = var2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test241"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java.lang.Object var8 = var2.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 0.0f+ "'", var8.equals(0.0f));

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test242"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.SortedSet var8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test243"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    boolean var16 = var10.addAll(var15);
    java2.util2.Enumeration var17 = java2.util2.Collections.enumeration(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var19 = var2.subSet((java.lang.Object)var17, (java.lang.Object)1.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test244"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var2, 1, 10);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test245"); }


    java.lang.Object var0 = new java.lang.Object();
    java2.util2.List var1 = java2.util2.Collections.singletonList(var0);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)(-1.0f), var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test246"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var12 = new java2.util2.TreeSet((java2.util2.Collection)var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var15 = var12.retainAll((java2.util2.Collection)var14);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var3, var17);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test247"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var7);
    boolean var9 = var2.addAll(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test248"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.max((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + (byte)100+ "'", var3.equals((byte)100));

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test249"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.List var40 = java2.util2.Collections.synchronizedList(var36);
    java2.util2.List var42 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var43 = new java2.util2.TreeSet((java2.util2.Collection)var42);
    java2.util2.Iterator var44 = var43.iterator();
    java2.util2.List var46 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var47 = new java2.util2.TreeSet((java2.util2.Collection)var46);
    java2.util2.Set var49 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var50 = var47.retainAll((java2.util2.Collection)var49);
    java2.util2.Collection var51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.List var52 = java2.util2.Collections.singletonList((java.lang.Object)var51);
    java2.util2.Collections.reverse(var52);
    java2.util2.Collections.shuffle(var52);
    java2.util2.Map var55 = java2.util2.Collections.singletonMap((java.lang.Object)var44, (java.lang.Object)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var36, var52);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var43.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var47.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test250"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.addAll(var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration(var8);
    java2.util2.List var11 = java2.util2.Collections.nCopies(10, (java.lang.Object)var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var15 = new java2.util2.TreeSet((java2.util2.Collection)var14);
    java2.util2.Iterator var16 = var15.iterator();
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var22 = var19.retainAll((java2.util2.Collection)var21);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.Collections.reverse(var24);
    java2.util2.Collections.shuffle(var24);
    java2.util2.Map var27 = java2.util2.Collections.singletonMap((java.lang.Object)var16, (java.lang.Object)var24);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.List var31 = java2.util2.Collections.singletonList((java.lang.Object)var30);
    java2.util2.Collection var32 = java2.util2.Collections.unmodifiableCollection(var30);
    java2.util2.Collection var33 = java2.util2.Collections.unmodifiableCollection(var32);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.max(var32, var34);
    boolean var36 = java2.util2.Collections.replaceAll(var12, (java.lang.Object)var24, (java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "hi!"+ "'", var35.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test251"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var8 = var5.retainAll((java2.util2.Collection)var7);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var11);
    java.lang.Object var14 = java2.util2.Collections.max(var13);
    boolean var15 = var5.retainAll(var13);
    java2.util2.Comparator var16 = java2.util2.Collections.reverseOrder();
    java.lang.Object var17 = java2.util2.Collections.min(var13, var16);
    boolean var18 = var2.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test252"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test253"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)(byte)100);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[100]");

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test254"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var15);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection(var15);
    boolean var18 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"[hi!]", (java.lang.Object)var15);
    java2.util2.List var20 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.List var22 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.Collections.rotate(var22, 100);
    int var25 = java2.util2.Collections.indexOfSubList(var3, var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var22, (java.lang.Object)0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test255"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var5);
    boolean var8 = var2.addAll(var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration(var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)var9);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test256"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)1.0d);
    java2.util2.Collections.reverse(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test257"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java.lang.Object[] var9 = var8.toArray();
    java.lang.Object[] var10 = var5.toArray(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var2.remove((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test258"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test259"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.SortedSet var7 = var2.tailSet((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test260"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    java2.util2.Collections.shuffle(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test261"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test262"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    boolean var16 = var10.equals((java.lang.Object)var15);
    java2.util2.Map var17 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var15);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection(var20);
    java2.util2.Collection var23 = java2.util2.Collections.unmodifiableCollection(var22);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection(var22);
    boolean var25 = java2.util2.Collections.replaceAll(var6, (java.lang.Object)var15, (java.lang.Object)var22);
    boolean var26 = var4.containsAll(var22);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test263"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Collections.rotate(var2, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test264"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var4 = var2.headSet((java.lang.Object)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test265"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.SortedSet var3 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test266"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collections.reverse(var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min((java2.util2.Collection)var7, var9);
    java2.util2.Enumeration var11 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test267"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    boolean var6 = var2.addAll((java2.util2.Collection)var4);
    java.lang.Object[] var7 = var2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[[hi!], hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test268"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection(var2);
    java2.util2.Collection var5 = java2.util2.Collections.unmodifiableCollection(var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection(var4);
    java2.util2.Collection var7 = java2.util2.Collections.unmodifiableCollection(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test269"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.last();
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var9 = var4.headSet((java.lang.Object)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[hi!]");

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test270"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var8 = var5.retainAll((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var2, (java.lang.Object)var9);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test271"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var10 = var5.containsAll(var8);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var2.remove((java.lang.Object)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test272"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    boolean var11 = var5.equals((java.lang.Object)var10);
    java2.util2.Map var12 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var10);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var15);
    java2.util2.Collection var17 = java2.util2.Collections.unmodifiableCollection(var15);
    java2.util2.Collection var18 = java2.util2.Collections.unmodifiableCollection(var17);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection(var17);
    boolean var20 = java2.util2.Collections.replaceAll(var1, (java.lang.Object)var10, (java.lang.Object)var17);
    java2.util2.TreeSet var21 = new java2.util2.TreeSet(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var21.toString(), "[hi!]");

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test273"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var13 = var10.retainAll((java2.util2.Collection)var12);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    boolean var16 = var2.containsAll(var14);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection(var14);
    java2.util2.Collection var18 = java2.util2.Collections.unmodifiableCollection(var17);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test274"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var5);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var9);
    boolean var12 = var6.equals((java.lang.Object)var11);
    java2.util2.Map var13 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var11);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.min(var11, var14);
    java2.util2.TreeSet var16 = new java2.util2.TreeSet(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var17 = var2.remove((java.lang.Object)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var16.toString(), "[hi!]");

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test275"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var12);
    boolean var15 = var9.addAll(var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration(var14);
    java2.util2.List var17 = java2.util2.Collections.nCopies(10, (java.lang.Object)var16);
    boolean var18 = var2.removeAll((java2.util2.Collection)var17);
    java2.util2.List var20 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var21 = new java2.util2.TreeSet((java2.util2.Collection)var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var24 = var21.retainAll((java2.util2.Collection)var23);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.Collections.reverse(var26);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.min((java2.util2.Collection)var26, var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var17, var26);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test276"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java.lang.Object var10 = var9.first();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var4.addAll((java2.util2.Collection)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test277"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)var3);
    java2.util2.Enumeration var5 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test278"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var6 = var3.retainAll((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(10, (java.lang.Object)var6);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var14 = var11.retainAll((java2.util2.Collection)var13);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var15);
    java2.util2.Collection var17 = java2.util2.Collections.unmodifiableCollection(var15);
    boolean var18 = java2.util2.Collections.replaceAll(var7, (java.lang.Object)1, (java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test279"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    boolean var6 = var2.addAll((java2.util2.Collection)var4);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var12 = var9.retainAll((java2.util2.Collection)var11);
    boolean var14 = var9.add((java.lang.Object)0.0f);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var17 = new java2.util2.TreeSet((java2.util2.Collection)var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var20 = var17.retainAll((java2.util2.Collection)var19);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.List var22 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    boolean var23 = var9.containsAll(var21);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection(var21);
    java2.util2.List var27 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.List var31 = java2.util2.Collections.singletonList((java.lang.Object)var30);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var35 = new java2.util2.TreeSet((java2.util2.Collection)var34);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.Collection var40 = java2.util2.Collections.unmodifiableCollection(var38);
    boolean var41 = var35.equals((java.lang.Object)var40);
    java2.util2.Map var42 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var40);
    java2.util2.Map var43 = java2.util2.Collections.synchronizedMap(var42);
    java2.util2.List var46 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var47 = new java2.util2.TreeSet((java2.util2.Collection)var46);
    java2.util2.List var49 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var49);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var50);
    java2.util2.Collection var52 = java2.util2.Collections.unmodifiableCollection(var50);
    boolean var53 = var47.equals((java.lang.Object)var52);
    java2.util2.Map var54 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var52);
    java2.util2.Map var55 = java2.util2.Collections.synchronizedMap(var54);
    java2.util2.Map var56 = java2.util2.Collections.singletonMap((java.lang.Object)var42, (java.lang.Object)var54);
    java2.util2.List var58 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var59 = new java2.util2.TreeSet((java2.util2.Collection)var58);
    java2.util2.Set var61 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var62 = var59.retainAll((java2.util2.Collection)var61);
    java2.util2.Collection var63 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var59);
    java2.util2.List var64 = java2.util2.Collections.singletonList((java.lang.Object)var63);
    java2.util2.Collections.reverse(var64);
    java2.util2.Collections.shuffle(var64);
    boolean var67 = java2.util2.Collections.replaceAll(var31, (java.lang.Object)var54, (java.lang.Object)var64);
    int var68 = java2.util2.Collections.lastIndexOfSubList(var27, var64);
    java2.util2.Collection var69 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var70 = var2.subSet((java.lang.Object)var21, (java.lang.Object)var64);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[[hi!], hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var35.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var47.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var47.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var59.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test280"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    boolean var13 = var8.containsAll(var11);
    boolean var14 = var2.retainAll((java2.util2.Collection)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test281"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var15);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection(var15);
    boolean var18 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"[hi!]", (java.lang.Object)var15);
    java2.util2.Comparator var19 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3, var19);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test282"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = var4.comparator();
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test283"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max((java2.util2.Collection)var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var3, var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var3);
    java2.util2.Collections.shuffle(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var3, 0, 0);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test284"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var12);
    boolean var15 = var9.equals((java.lang.Object)var14);
    java2.util2.Map var16 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var14);
    java2.util2.Map var17 = java2.util2.Collections.synchronizedMap(var16);
    java2.util2.List var20 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var21 = new java2.util2.TreeSet((java2.util2.Collection)var20);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.List var25 = java2.util2.Collections.singletonList((java.lang.Object)var24);
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection(var24);
    boolean var27 = var21.equals((java.lang.Object)var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var26);
    java2.util2.Map var29 = java2.util2.Collections.synchronizedMap(var28);
    java2.util2.Map var30 = java2.util2.Collections.singletonMap((java.lang.Object)var16, (java.lang.Object)var28);
    java2.util2.List var32 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var33 = new java2.util2.TreeSet((java2.util2.Collection)var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var36 = var33.retainAll((java2.util2.Collection)var35);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.List var38 = java2.util2.Collections.singletonList((java.lang.Object)var37);
    java2.util2.Collections.reverse(var38);
    java2.util2.Collections.shuffle(var38);
    boolean var41 = java2.util2.Collections.replaceAll(var5, (java.lang.Object)var28, (java.lang.Object)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var42 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)var41);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var21.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var33.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test285"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var6 = java2.util2.Collections.lastIndexOfSubList(var3, var5);
    java2.util2.List var7 = java2.util2.Collections.unmodifiableList(var3);
    java2.util2.List var8 = java2.util2.Collections.synchronizedList(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test286"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var4 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)var7);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    int var11 = java2.util2.Collections.lastIndexOfSubList(var8, var10);
    java2.util2.List var12 = java2.util2.Collections.unmodifiableList(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var3, var12);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test287"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max((java2.util2.Collection)var3, var4);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var12);
    boolean var15 = var9.addAll(var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration(var14);
    java2.util2.List var17 = java2.util2.Collections.nCopies(10, (java.lang.Object)var16);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var3, var18);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test288"); }


    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)var7);
    java2.util2.Collection var9 = java2.util2.Collections.unmodifiableCollection(var7);
    boolean var10 = var4.equals((java.lang.Object)var9);
    java2.util2.Map var11 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var9);
    java2.util2.Map var12 = java2.util2.Collections.synchronizedMap(var11);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var16 = new java2.util2.TreeSet((java2.util2.Collection)var15);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.List var20 = java2.util2.Collections.singletonList((java.lang.Object)var19);
    java2.util2.Collection var21 = java2.util2.Collections.unmodifiableCollection(var19);
    boolean var22 = var16.equals((java.lang.Object)var21);
    java2.util2.Map var23 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var21);
    java2.util2.Map var24 = java2.util2.Collections.synchronizedMap(var23);
    java2.util2.Map var25 = java2.util2.Collections.singletonMap((java.lang.Object)var11, (java.lang.Object)var23);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)var23);
    java2.util2.Map var27 = java2.util2.Collections.unmodifiableMap(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var16.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test289"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.List var41 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var41);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.Collections.rotate(var43, 100);
    java2.util2.Collections.rotate(var43, 0);
    int var48 = java2.util2.Collections.lastIndexOfSubList(var3, var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var50 = java2.util2.Collections.binarySearch(var43, (java.lang.Object)"");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test290"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collections.rotate(var9, 100);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var15 = java2.util2.Collections.replaceAll(var9, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.List var20 = java2.util2.Collections.singletonList((java.lang.Object)var19);
    java2.util2.Collection var21 = java2.util2.Collections.unmodifiableCollection(var19);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection(var21);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection(var21);
    boolean var24 = java2.util2.Collections.replaceAll(var9, (java.lang.Object)"[hi!]", (java.lang.Object)var21);
    java2.util2.TreeSet var25 = new java2.util2.TreeSet(var21);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var30 = new java2.util2.TreeSet((java2.util2.Collection)var29);
    java2.util2.List var32 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.Collection var35 = java2.util2.Collections.unmodifiableCollection(var33);
    boolean var36 = var30.equals((java.lang.Object)var35);
    java2.util2.Map var37 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var35);
    java2.util2.Map var38 = java2.util2.Collections.synchronizedMap(var37);
    java2.util2.List var41 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var42 = new java2.util2.TreeSet((java2.util2.Collection)var41);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.List var46 = java2.util2.Collections.singletonList((java.lang.Object)var45);
    java2.util2.Collection var47 = java2.util2.Collections.unmodifiableCollection(var45);
    boolean var48 = var42.equals((java.lang.Object)var47);
    java2.util2.Map var49 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var47);
    java2.util2.Map var50 = java2.util2.Collections.synchronizedMap(var49);
    java2.util2.Map var51 = java2.util2.Collections.singletonMap((java.lang.Object)var37, (java.lang.Object)var49);
    java2.util2.Map var52 = java2.util2.Collections.synchronizedMap(var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var53 = var2.subSet((java.lang.Object)var25, (java.lang.Object)var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var25.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var30.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var42.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test291"); }


    java.lang.Object var0 = new java.lang.Object();
    java2.util2.List var1 = java2.util2.Collections.singletonList(var0);
    java2.util2.List var2 = java2.util2.Collections.synchronizedList(var1);
    java2.util2.List var5 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    int var6 = java2.util2.Collections.indexOfSubList(var2, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test292"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.last();
    java.lang.Object[] var6 = var4.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var8 = var4.add((java.lang.Object)(byte)0);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test293"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)"");
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test294"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var15);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection(var15);
    java2.util2.Map var18 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var15);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration(var15);
    java2.util2.Comparator var20 = java2.util2.Collections.reverseOrder();
    java.lang.Object var21 = java2.util2.Collections.min(var15, var20);
    java2.util2.Comparator var22 = java2.util2.Collections.reverseOrder();
    java.lang.Object var23 = java2.util2.Collections.max(var15, var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test295"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Collection var6 = java2.util2.Collections.unmodifiableCollection(var4);
    java.lang.Object var7 = java2.util2.Collections.max(var6);
    java2.util2.Map var8 = java2.util2.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var6);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test296"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var12);
    boolean var15 = var9.addAll(var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration(var14);
    java2.util2.List var17 = java2.util2.Collections.nCopies(10, (java.lang.Object)var16);
    boolean var18 = var2.removeAll((java2.util2.Collection)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var17, 10, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test297"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.List var41 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var42 = new java2.util2.TreeSet((java2.util2.Collection)var41);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var45 = new java2.util2.TreeSet((java2.util2.Collection)var44);
    java2.util2.List var47 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.List var49 = java2.util2.Collections.singletonList((java.lang.Object)var48);
    java2.util2.Collection var50 = java2.util2.Collections.unmodifiableCollection(var48);
    boolean var51 = var45.equals((java.lang.Object)var50);
    boolean var52 = var42.containsAll(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var53 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)var50);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var42.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var45.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test298"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = var4.comparator();
    java2.util2.Comparator var6 = var4.comparator();
    java.lang.Object var7 = var4.first();
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var14 = new java2.util2.TreeSet((java2.util2.Collection)var13);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var17);
    java2.util2.Collection var19 = java2.util2.Collections.unmodifiableCollection(var17);
    boolean var20 = var14.equals((java.lang.Object)var19);
    java2.util2.Map var21 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var19);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.List var25 = java2.util2.Collections.singletonList((java.lang.Object)var24);
    java2.util2.Collection var26 = java2.util2.Collections.unmodifiableCollection(var24);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var26);
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection(var26);
    java2.util2.Map var29 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var26);
    boolean var30 = var10.equals((java.lang.Object)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var4.add((java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test299"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    boolean var6 = var2.addAll((java2.util2.Collection)var4);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.max((java2.util2.Collection)var10, var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var13 = var2.containsAll((java2.util2.Collection)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[[hi!], hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test300"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.Collections.rotate(var3, 0);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.Comparator var10 = java2.util2.Collections.reverseOrder();
    java.lang.Object var11 = java2.util2.Collections.min((java2.util2.Collection)var3, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test301"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[]");

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test302"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.addAll(var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration(var8);
    java2.util2.List var11 = java2.util2.Collections.nCopies(10, (java.lang.Object)var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Collections.reverse(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test303"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java.lang.Object[] var3 = var2.toArray();
    java2.util2.Map var5 = java2.util2.Collections.singletonMap((java.lang.Object)var2, (java.lang.Object)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test304"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var3);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java.lang.Object[] var9 = var8.toArray();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)var9);
    java.lang.Object[] var11 = var5.toArray(var9);
    java2.util2.List var12 = java2.util2.Collections.nCopies(0, (java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test305"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var8 = var5.retainAll((java2.util2.Collection)var7);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var2.add((java.lang.Object)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test306"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var3, 1, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test307"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.reverse(var3);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var12 = var9.retainAll((java2.util2.Collection)var11);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collections.reverse(var14);
    java2.util2.Collections.shuffle(var14);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    int var18 = java2.util2.Collections.indexOfSubList(var3, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test308"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var8 = var4.contains((java.lang.Object)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test309"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = var4.comparator();
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var11 = var8.retainAll((java2.util2.Collection)var10);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var15 = new java2.util2.TreeSet((java2.util2.Collection)var14);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    java2.util2.Collection var20 = java2.util2.Collections.unmodifiableCollection(var18);
    boolean var21 = var15.equals((java.lang.Object)var20);
    java2.util2.Map var22 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var20);
    java2.util2.Map var23 = java2.util2.Collections.synchronizedMap(var22);
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.lang.Object[] var25 = var8.toArray(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var4.remove((java.lang.Object)var25);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test310"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test311"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.addAll(var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration(var8);
    java2.util2.List var11 = java2.util2.Collections.nCopies(10, (java.lang.Object)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.reverse(var11);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test312"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java.lang.Object var12 = java2.util2.Collections.min(var8, var11);
    java.lang.Object var13 = java2.util2.Collections.max(var8);
    java2.util2.Comparator var14 = java2.util2.Collections.reverseOrder();
    java.lang.Object var15 = java2.util2.Collections.max(var8, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test313"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.Collections.reverse(var3);
    java2.util2.Collections.reverse(var3);
    java2.util2.Collections.rotate(var3, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test314"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var5 = java2.util2.Collections.synchronizedList(var4);
    java2.util2.List var6 = java2.util2.Collections.nCopies(10, (java.lang.Object)var4);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Collection var14 = java2.util2.Collections.unmodifiableCollection(var12);
    boolean var15 = var9.equals((java.lang.Object)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var16 = java2.util2.Collections.binarySearch(var4, (java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test315"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(-1.0f));
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var5);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    boolean var16 = var10.equals((java.lang.Object)var15);
    java2.util2.Map var17 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var15);
    java2.util2.Map var18 = java2.util2.Collections.synchronizedMap(var17);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var22 = new java2.util2.TreeSet((java2.util2.Collection)var21);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.Collection var27 = java2.util2.Collections.unmodifiableCollection(var25);
    boolean var28 = var22.equals((java.lang.Object)var27);
    java2.util2.Map var29 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var27);
    java2.util2.Map var30 = java2.util2.Collections.synchronizedMap(var29);
    java2.util2.Map var31 = java2.util2.Collections.singletonMap((java.lang.Object)var17, (java.lang.Object)var29);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var34 = new java2.util2.TreeSet((java2.util2.Collection)var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var37 = var34.retainAll((java2.util2.Collection)var36);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.Collections.reverse(var39);
    java2.util2.Collections.shuffle(var39);
    boolean var42 = java2.util2.Collections.replaceAll(var6, (java.lang.Object)var29, (java.lang.Object)var39);
    int var43 = java2.util2.Collections.lastIndexOfSubList(var2, var39);
    java2.util2.Collection var44 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var22.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var34.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test316"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var10);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection(var10);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.Map var15 = java2.util2.Collections.singletonMap((java.lang.Object)var10, (java.lang.Object)(byte)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var16 = var4.remove((java.lang.Object)(byte)10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test317"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.last();
    java.lang.Object[] var6 = var4.toArray();
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Collections.rotate(var10, 0);
    java2.util2.Collections.rotate(var10, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var17 = var4.containsAll((java2.util2.Collection)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test318"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var5);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var9);
    boolean var12 = var6.equals((java.lang.Object)var11);
    java2.util2.Map var13 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var11);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    java2.util2.Collection var18 = java2.util2.Collections.unmodifiableCollection(var16);
    java2.util2.Collection var19 = java2.util2.Collections.unmodifiableCollection(var18);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection(var18);
    java2.util2.Map var21 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var18);
    boolean var22 = var2.equals((java.lang.Object)var21);
    java2.util2.Map var23 = java2.util2.Collections.unmodifiableMap(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test319"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.List var42 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var43);
    java2.util2.TreeSet var45 = new java2.util2.TreeSet((java2.util2.Collection)var44);
    java.lang.Object var46 = var45.last();
    java.lang.Object[] var47 = var45.toArray();
    java.lang.Object var48 = var45.last();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var49 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)var45);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var45.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test320"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection(var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.Set var6 = java2.util2.Collections.unmodifiableSet(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test321"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.last();
    java.lang.Object[] var6 = var4.toArray();
    java2.util2.Comparator var7 = var4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test322"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java.lang.Object var8 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test323"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Collection var15 = java2.util2.Collections.unmodifiableCollection(var13);
    java2.util2.Collection var16 = java2.util2.Collections.unmodifiableCollection(var15);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection(var15);
    boolean var18 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"[hi!]", (java.lang.Object)var15);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet(var15);
    java.lang.Object var20 = java2.util2.Collections.max((java2.util2.Collection)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test324"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var3 = java2.util2.Collections.list(var2);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var7 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var8 = java2.util2.Collections.list(var7);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var7);
    java.lang.Object[] var10 = var9.toArray();
    java.lang.Object[] var11 = var4.toArray(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test325"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = var4.comparator();
    java2.util2.Comparator var6 = var4.comparator();
    java2.util2.Iterator var7 = var4.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test326"); }


    java2.util2.List var2 = java2.util2.Collections.nCopies(100, (java.lang.Object)"");
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test327"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.addAll(var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration(var8);
    java2.util2.List var11 = java2.util2.Collections.nCopies(10, (java.lang.Object)var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)1L);
    boolean var16 = var13.retainAll((java2.util2.Collection)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test328"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.Collections.reverse(var3);
    java2.util2.Collections.shuffle(var3);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)var3, (java.lang.Object)100L);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var17 = new java2.util2.TreeSet((java2.util2.Collection)var16);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var20);
    java2.util2.Collection var22 = java2.util2.Collections.unmodifiableCollection(var20);
    boolean var23 = var17.addAll(var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var25 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)var22);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test329"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = var4.comparator();
    java2.util2.Comparator var6 = var4.comparator();
    java.lang.Object var7 = var4.first();
    java.lang.Object var8 = var4.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test330"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.Collections.reverse(var3);
    java2.util2.Collections.shuffle(var3);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)var3, (java.lang.Object)100L);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    java2.util2.List var20 = java2.util2.Collections.synchronizedList(var19);
    java2.util2.List var21 = java2.util2.Collections.nCopies(10, (java.lang.Object)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var22 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)var21);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test331"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collections.reverse(var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min((java2.util2.Collection)var7, var9);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.SortedSet var12 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test332"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var8);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java.lang.Object[] var14 = var13.toArray();
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)var14);
    java.lang.Object[] var16 = var10.toArray(var14);
    java.lang.Object[] var17 = var4.toArray(var16);
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test333"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.List var4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.unmodifiableCollection(var8);
    boolean var11 = var5.addAll(var10);
    java2.util2.Enumeration var12 = java2.util2.Collections.enumeration(var10);
    java2.util2.List var13 = java2.util2.Collections.nCopies(10, (java.lang.Object)var12);
    int var14 = java2.util2.Collections.indexOfSubList(var1, var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test334"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collections.reverse(var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.min((java2.util2.Collection)var7, var9);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    var11.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[]");

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test335"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = var4.comparator();
    java2.util2.Comparator var6 = var4.comparator();
    java.lang.Object[] var7 = var4.toArray();
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test336"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collections.reverse(var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test337"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max((java2.util2.Collection)var3, var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var3, var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var3);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test338"); }


    java2.util2.List var2 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var6);
    boolean var9 = var3.equals((java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var8);
    java2.util2.Map var11 = java2.util2.Collections.synchronizedMap(var10);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var15 = new java2.util2.TreeSet((java2.util2.Collection)var14);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    java2.util2.Collection var20 = java2.util2.Collections.unmodifiableCollection(var18);
    boolean var21 = var15.equals((java.lang.Object)var20);
    java2.util2.Map var22 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var20);
    java2.util2.Map var23 = java2.util2.Collections.synchronizedMap(var22);
    java2.util2.Map var24 = java2.util2.Collections.singletonMap((java.lang.Object)var10, (java.lang.Object)var22);
    java2.util2.Map var25 = java2.util2.Collections.unmodifiableMap(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test339"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var2 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.List var5 = java2.util2.Collections.nCopies(10, (java.lang.Object)"hi!");
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)var5);
    java2.util2.Map var7 = java2.util2.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test340"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = var4.comparator();
    java2.util2.Comparator var6 = var4.comparator();
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    java2.util2.Collection var11 = java2.util2.Collections.unmodifiableCollection(var9);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var11);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection(var12);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var4.contains((java.lang.Object)var12);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test341"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var2.first();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test342"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var10 = var7.retainAll((java2.util2.Collection)var9);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var14 = new java2.util2.TreeSet((java2.util2.Collection)var13);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var17);
    java2.util2.Collection var19 = java2.util2.Collections.unmodifiableCollection(var17);
    boolean var20 = var14.addAll(var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration(var19);
    java2.util2.List var22 = java2.util2.Collections.nCopies(10, (java.lang.Object)var21);
    boolean var23 = var7.removeAll((java2.util2.Collection)var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var3, var22);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test343"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var2 = new java2.util2.TreeSet((java2.util2.Collection)var1);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var5 = var2.retainAll((java2.util2.Collection)var4);
    boolean var7 = var2.add((java.lang.Object)0.0f);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.TreeSet var12 = new java2.util2.TreeSet((java2.util2.Collection)var11);
    java.lang.Object var13 = var12.last();
    java.lang.Object[] var14 = var12.toArray();
    java.lang.Object[] var15 = var2.toArray(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var2.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test344"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.last();
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var11 = var8.retainAll((java2.util2.Collection)var10);
    boolean var13 = var8.add((java.lang.Object)0.0f);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var16 = new java2.util2.TreeSet((java2.util2.Collection)var15);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var19 = var16.retainAll((java2.util2.Collection)var18);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var20);
    boolean var22 = var8.containsAll(var20);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection(var20);
    boolean var24 = var4.equals((java.lang.Object)var20);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var27 = new java2.util2.TreeSet((java2.util2.Collection)var26);
    java.lang.Object[] var28 = var27.toArray();
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)var28);
    java.lang.Object[] var30 = var4.toArray(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test345"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.Collections.rotate(var3, 100);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    boolean var9 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)"hi!", (java.lang.Object)(-1.0d));
    java2.util2.List var10 = java2.util2.Collections.synchronizedList(var3);
    java2.util2.Collections.reverse(var3);
    java2.util2.Collections.shuffle(var3);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)var3, (java.lang.Object)100L);
    java2.util2.Collections.shuffle(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test346"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"[hi!]");
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var7 = var4.retainAll((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection(var8);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = java2.util2.Collections.binarySearch(var1, (java.lang.Object)var10, var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test347"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java.lang.Object var11 = var10.first();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var4.retainAll((java2.util2.Collection)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test348"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.last();
    java.lang.Object[] var6 = var4.toArray();
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)'#');
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var9);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var14 = new java2.util2.TreeSet((java2.util2.Collection)var13);
    java.lang.Object[] var15 = var14.toArray();
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)var15);
    java.lang.Object[] var17 = var11.toArray(var15);
    java.lang.Object[] var18 = var4.toArray(var17);
    java.lang.Object var19 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[hi!]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test349"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.first();
    java.lang.Object var6 = var4.first();
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[[hi!]]");

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test350"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Collection var12 = java2.util2.Collections.unmodifiableCollection(var10);
    boolean var13 = var7.equals((java.lang.Object)var12);
    java2.util2.Map var14 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var12);
    java2.util2.Map var15 = java2.util2.Collections.synchronizedMap(var14);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)(byte)10);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var22);
    boolean var25 = var19.equals((java.lang.Object)var24);
    java2.util2.Map var26 = java2.util2.Collections.singletonMap((java.lang.Object)1.0f, (java.lang.Object)var24);
    java2.util2.Map var27 = java2.util2.Collections.synchronizedMap(var26);
    java2.util2.Map var28 = java2.util2.Collections.singletonMap((java.lang.Object)var14, (java.lang.Object)var26);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)"");
    boolean var34 = var31.retainAll((java2.util2.Collection)var33);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.Collections.reverse(var36);
    java2.util2.Collections.shuffle(var36);
    boolean var39 = java2.util2.Collections.replaceAll(var3, (java.lang.Object)var26, (java.lang.Object)var36);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.List var42 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var43);
    java2.util2.TreeSet var45 = new java2.util2.TreeSet((java2.util2.Collection)var44);
    java.lang.Object var46 = var45.first();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var3, (java.lang.Object)var45);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var45.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test351"); }


    java2.util2.List var1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.List var3 = java2.util2.Collections.singletonList((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java.lang.Object var5 = var4.first();
    java.lang.Object var6 = var4.first();
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java.lang.Object var8 = var7.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[[hi!]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

}
