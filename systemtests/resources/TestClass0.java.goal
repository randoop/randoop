package foo.bar;

import junit.framework.*;

public class TestClass0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test1"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.contains((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test2"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test3"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)' ');
    boolean var3 = var0.containsAll((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test4"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var1 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test5"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    int var1 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test6"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)(-1));
    java2.util2.Map var3 = java2.util2.Collections.synchronizedMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test7"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java.lang.Object var1 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test8"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.remove((java.lang.Object)10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test9"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet((java2.util2.Collection)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test10"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = var0.last();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test11"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Comparator var1 = var0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test12"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.equals((java.lang.Object)1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test13"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.remove((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test14"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Iterator var1 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test15"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    boolean var4 = var0.addAll((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1.0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test16"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test17"); }


    java2.util2.Comparator var0 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test18"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)(short)0);
    java2.util2.Map var3 = java2.util2.Collections.synchronizedMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test19"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    boolean var5 = var1.removeAll(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var6 = var0.headSet((java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test20"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    boolean var4 = var0.removeAll(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = java2.util2.Collections.min((java2.util2.Collection)var0);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test21"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java.lang.String var1 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test22"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)(short)0);
    java2.util2.Map var3 = java2.util2.Collections.unmodifiableMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test23"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test24"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.max((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ' '+ "'", var3.equals(' '));

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test25"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var1 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test26"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var3 = var0.subSet((java.lang.Object)"", (java.lang.Object)0L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test27"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.unmodifiableSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test28"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var2 = var0.headSet((java.lang.Object)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test29"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.contains((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test30"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.SortedSet var1 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test31"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    boolean var3 = var0.containsAll((java2.util2.Collection)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test32"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Iterator var3 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test33"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Comparator var2 = java2.util2.Collections.reverseOrder();
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var1, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 10L+ "'", var3.equals(10L));

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test34"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, (-1), 1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test35"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Map var3 = java2.util2.Collections.singletonMap((java.lang.Object)var1, (java.lang.Object)(-1));
    boolean var4 = var0.equals((java.lang.Object)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test36"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Comparator var3 = var0.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test37"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.sort((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test38"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = var0.first();
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test39"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max(var6, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var9 = var0.subSet((java.lang.Object)1.0f, var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test40"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    java.lang.Object var4 = java2.util2.Collections.min((java2.util2.Collection)var2, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test41"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.add((java.lang.Object)(byte)0);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test42"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test43"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var4, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test44"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 1L+ "'", var3.equals(1L));

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test45"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, 0, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test46"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.copy((java2.util2.List)var4, (java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test47"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.shuffle((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test48"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Comparator var1 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var2 = java2.util2.Collections.max((java2.util2.Collection)var0, var1);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test49"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Collection var3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.min((java2.util2.Collection)var1, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 1.0f+ "'", var5.equals(1.0f));

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test50"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var5, 1, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test51"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Collections.rotate(var6, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test52"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var7 = var0.subSet((java.lang.Object)var4, (java.lang.Object)(short)0);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test53"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    int var6 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-2));

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test54"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = java2.util2.Collections.binarySearch(var5, (java.lang.Object)(byte)100);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test55"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java.lang.Object var3 = var0.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 1L+ "'", var3.equals(1L));

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test56"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java.lang.Object var3 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 1L+ "'", var3.equals(1L));

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test57"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = java2.util2.Collections.min((java2.util2.Collection)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test58"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    boolean var6 = var0.containsAll((java2.util2.Collection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test59"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var6, var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test60"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    int var3 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test61"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java.lang.Object var3 = java2.util2.Collections.min((java2.util2.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + 10L+ "'", var3.equals(10L));

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test62"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.contains((java.lang.Object)(short)0);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test63"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.Set var2 = java2.util2.Collections.synchronizedSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test64"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.ArrayList var12 = java2.util2.Collections.list(var10);
    java2.util2.Collections.copy(var6, (java2.util2.List)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test65"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var5 = var0.subSet((java.lang.Object)100L, (java.lang.Object)10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test66"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var11 = java2.util2.Collections.unmodifiableList(var10);
    java2.util2.Collections.copy((java2.util2.List)var4, var10);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Comparator var16 = java2.util2.Collections.reverseOrder();
    java.lang.Object var17 = java2.util2.Collections.max(var15, var16);
    java.lang.Object var18 = java2.util2.Collections.min(var15);
    java2.util2.Comparator var19 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var20 = java2.util2.Collections.binarySearch(var10, var18, var19);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + 10L+ "'", var17.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + 10L+ "'", var18.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test67"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var9, 1, (-2));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test68"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.Enumeration var20 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var21 = java2.util2.Collections.list(var20);
    java2.util2.Collections.fill((java2.util2.List)var16, (java.lang.Object)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy((java2.util2.List)var4, (java2.util2.List)var21);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test69"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Set var3 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test70"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test71"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    boolean var3 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test72"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.Enumeration var7 = java2.util2.Collections.enumeration((java2.util2.Collection)var5);
    java2.util2.ArrayList var8 = java2.util2.Collections.list(var7);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var10 = var0.subSet((java.lang.Object)(-1), (java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test73"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    int var14 = java2.util2.Collections.indexOfSubList(var6, var12);
    java2.util2.List var15 = java2.util2.Collections.unmodifiableList(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test74"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java.lang.String var3 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[1]"+ "'", var3.equals("[1]"));

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test75"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java.lang.Object[] var11 = var9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test76"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java.lang.Object var7 = new java.lang.Object();
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var9 = java2.util2.Collections.binarySearch(var5, var7, var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test77"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.SortedSet var4 = var0.headSet((java.lang.Object)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test78"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    int var14 = java2.util2.Collections.indexOfSubList(var6, var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var6, (-2), (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test79"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    int var14 = java2.util2.Collections.indexOfSubList(var6, var12);
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var12, var15);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test80"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.Enumeration var7 = java2.util2.Collections.enumeration((java2.util2.Collection)var5);
    java2.util2.ArrayList var8 = java2.util2.Collections.list(var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.Enumeration var12 = java2.util2.Collections.enumeration((java2.util2.Collection)var10);
    java2.util2.ArrayList var13 = java2.util2.Collections.list(var12);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.Enumeration var17 = java2.util2.Collections.enumeration((java2.util2.Collection)var15);
    java2.util2.ArrayList var18 = java2.util2.Collections.list(var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var17);
    java2.util2.List var20 = java2.util2.Collections.unmodifiableList(var19);
    java2.util2.Collections.copy((java2.util2.List)var13, var19);
    boolean var22 = var8.containsAll((java2.util2.Collection)var13);
    java2.util2.TreeSet var23 = new java2.util2.TreeSet();
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var27 = java2.util2.Collections.singleton((java.lang.Object)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.Map var29 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var28);
    boolean var30 = java2.util2.Collections.replaceAll((java2.util2.List)var13, (java.lang.Object)var23, (java.lang.Object)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var3.remove((java.lang.Object)var23);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test81"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var4 = java2.util2.Collections.synchronizedSet(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test82"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet();
    boolean var5 = var3.add((java.lang.Object)1L);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet();
    java2.util2.TreeSet var7 = new java2.util2.TreeSet();
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    boolean var11 = var7.removeAll(var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var10, var12);
    boolean var14 = var6.containsAll(var10);
    boolean var15 = var3.removeAll(var10);
    boolean var16 = var0.removeAll((java2.util2.Collection)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test83"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var11 = java2.util2.Collections.unmodifiableList(var10);
    java2.util2.Collections.copy((java2.util2.List)var4, var10);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)var14);
    boolean var16 = var4.retainAll((java2.util2.Collection)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test84"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[10]"+ "'", var5.equals("[10]"));

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test85"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.SortedSet var4 = var0.headSet((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test86"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test87"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.contains((java.lang.Object)(short)10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test88"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test89"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.SortedSet var3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test90"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Enumeration var38 = java2.util2.Collections.enumeration((java2.util2.Collection)var36);
    java2.util2.ArrayList var39 = java2.util2.Collections.list(var38);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var41 = java2.util2.Collections.unmodifiableList(var40);
    java2.util2.Collections.copy((java2.util2.List)var34, var40);
    boolean var43 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)(byte)10, (java.lang.Object)var40);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test91"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var0.add((java.lang.Object)100.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test92"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.List var19 = java2.util2.Collections.synchronizedList((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test93"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collections.rotate((java2.util2.List)var4, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test94"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Enumeration var11 = java2.util2.Collections.enumeration((java2.util2.Collection)var9);
    java2.util2.ArrayList var12 = java2.util2.Collections.list(var11);
    java2.util2.ArrayList var13 = java2.util2.Collections.list(var11);
    java2.util2.TreeSet var14 = new java2.util2.TreeSet();
    java2.util2.TreeSet var15 = new java2.util2.TreeSet();
    java.lang.Object[] var16 = var15.toArray();
    java.lang.Object[] var17 = var14.toArray(var16);
    java.lang.Object[] var18 = var13.toArray(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var19 = var4.contains((java.lang.Object)var18);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test95"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    var3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test96"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.Set var3 = java2.util2.Collections.synchronizedSet(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test97"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    java.lang.Object var4 = java2.util2.Collections.max((java2.util2.Collection)var0, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 1L+ "'", var4.equals(1L));

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test98"); }


    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.Collection var5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var3);
    java2.util2.Map var6 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)var5);
    java2.util2.List var7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test99"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var2 = java2.util2.Collections.nCopies((-1), (java.lang.Object)(-2));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test100"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var16);
    java2.util2.ArrayList var19 = java2.util2.Collections.list(var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.Collections.fill((java2.util2.List)var19, (java.lang.Object)var24);
    boolean var26 = java2.util2.Collections.replaceAll(var10, (java.lang.Object)(-2), (java.lang.Object)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var19, 10, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test101"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var4.remove((java.lang.Object)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test102"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = java2.util2.Collections.min((java2.util2.Collection)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test103"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    boolean var6 = var4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test104"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var4.remove((java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[]");

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test105"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    boolean var5 = var1.removeAll(var4);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.max(var4, var6);
    boolean var8 = var0.containsAll(var4);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = java2.util2.Collections.min((java2.util2.Collection)var0, var9);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 10L+ "'", var7.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test106"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    boolean var4 = var0.removeAll(var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.max(var3, var5);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.max(var3, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 10L+ "'", var8.equals(10L));

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test107"); }


    java2.util2.Map var2 = java2.util2.Collections.singletonMap((java.lang.Object)(byte)1, (java.lang.Object)'4');
    java2.util2.Map var3 = java2.util2.Collections.unmodifiableMap(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test108"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var1 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test109"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    var3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test110"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet();
    java2.util2.TreeSet var4 = new java2.util2.TreeSet();
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    boolean var8 = var4.removeAll(var7);
    java2.util2.Comparator var9 = java2.util2.Collections.reverseOrder();
    java.lang.Object var10 = java2.util2.Collections.max(var7, var9);
    boolean var11 = var3.containsAll(var7);
    boolean var12 = var0.removeAll(var7);
    java2.util2.Collection var13 = java2.util2.Collections.unmodifiableCollection(var7);
    java.lang.Object var14 = java2.util2.Collections.max(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10L+ "'", var10.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 10L+ "'", var14.equals(10L));

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test111"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet();
    java.lang.Object[] var4 = var3.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var0.remove((java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test112"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    boolean var8 = var4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test113"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max(var3, var4);
    boolean var6 = var0.containsAll(var3);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection(var3);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test114"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    int var5 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test115"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    var3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test116"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.List var7 = java2.util2.Collections.unmodifiableList(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var5, 100, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test117"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.reverse((java2.util2.List)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test118"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var23, 1, (-2));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test119"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.SortedSet var3 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test120"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Collections.rotate(var6, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test121"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Comparator var13 = java2.util2.Collections.reverseOrder();
    int var14 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)10.0d, var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test122"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test123"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var8);
    java2.util2.Set var10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var8);
    java2.util2.SortedSet var12 = var8.tailSet((java.lang.Object)0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var13 = var3.removeAll((java2.util2.Collection)var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test124"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet();
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.max(var30, var31);
    boolean var33 = var27.containsAll(var30);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection(var30);
    boolean var35 = var9.retainAll(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test125"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Comparator var11 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var4, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test126"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test127"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Iterator var5 = var4.iterator();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var8 = var4.tailSet((java.lang.Object)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test128"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Enumeration var11 = java2.util2.Collections.enumeration((java2.util2.Collection)var9);
    java2.util2.ArrayList var12 = java2.util2.Collections.list(var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.Collections.fill((java2.util2.List)var12, (java.lang.Object)var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.List var25 = java2.util2.Collections.unmodifiableList(var24);
    java2.util2.Set var27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Enumeration var29 = java2.util2.Collections.enumeration((java2.util2.Collection)var27);
    java2.util2.ArrayList var30 = java2.util2.Collections.list(var29);
    java2.util2.List var31 = java2.util2.Collections.singletonList((java.lang.Object)var29);
    java2.util2.List var32 = java2.util2.Collections.unmodifiableList(var31);
    int var33 = java2.util2.Collections.indexOfSubList(var25, var31);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var35 = var3.subSet((java.lang.Object)(byte)1, (java.lang.Object)var17);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test129"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.shuffle(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var29 = java2.util2.Collections.binarySearch(var23, (java.lang.Object)100.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test130"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(var10, (java.lang.Object)false);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test131"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    boolean var12 = var8.removeAll(var11);
    boolean var13 = var4.containsAll((java2.util2.Collection)var8);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.Enumeration var17 = java2.util2.Collections.enumeration((java2.util2.Collection)var15);
    java2.util2.ArrayList var18 = java2.util2.Collections.list(var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var17);
    java2.util2.List var20 = java2.util2.Collections.unmodifiableList(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var21 = var4.headSet((java.lang.Object)var20);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test132"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    int var16 = java2.util2.Collections.binarySearch((java2.util2.List)var4, (java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test133"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Enumeration var41 = java2.util2.Collections.enumeration((java2.util2.Collection)var39);
    java2.util2.ArrayList var42 = java2.util2.Collections.list(var41);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var41);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Collections.copy((java2.util2.List)var37, var43);
    boolean var46 = var32.containsAll((java2.util2.Collection)var37);
    java2.util2.TreeSet var47 = new java2.util2.TreeSet();
    java2.util2.Set var50 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var51 = java2.util2.Collections.singleton((java.lang.Object)var50);
    java2.util2.Enumeration var52 = java2.util2.Collections.enumeration((java2.util2.Collection)var50);
    java2.util2.Map var53 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var52);
    boolean var54 = java2.util2.Collections.replaceAll((java2.util2.List)var37, (java.lang.Object)var47, (java.lang.Object)var53);
    boolean var55 = var9.retainAll((java2.util2.Collection)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var47.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test134"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    var3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test135"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = java2.util2.Collections.max((java2.util2.Collection)var5);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test136"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Iterator var5 = var4.iterator();
    var4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test137"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet();
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.max(var30, var31);
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    java.lang.Object[] var35 = var9.toArray(var33);
    java2.util2.TreeSet var36 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var9, 100, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36.size() == 1);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test138"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    java.lang.Object var4 = java2.util2.Collections.max(var2, var3);
    java2.util2.Set var5 = java2.util2.Collections.singleton(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 10L+ "'", var4.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test139"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Enumeration var37 = java2.util2.Collections.enumeration((java2.util2.Collection)var35);
    java2.util2.ArrayList var38 = java2.util2.Collections.list(var37);
    java2.util2.Collections.fill((java2.util2.List)var33, (java.lang.Object)var38);
    java2.util2.Set var41 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var41);
    java2.util2.Enumeration var43 = java2.util2.Collections.enumeration((java2.util2.Collection)var41);
    java2.util2.ArrayList var44 = java2.util2.Collections.list(var43);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var43);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    java2.util2.Set var48 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var49 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var48);
    java2.util2.Enumeration var50 = java2.util2.Collections.enumeration((java2.util2.Collection)var48);
    java2.util2.ArrayList var51 = java2.util2.Collections.list(var50);
    java2.util2.List var52 = java2.util2.Collections.singletonList((java.lang.Object)var50);
    java2.util2.List var53 = java2.util2.Collections.unmodifiableList(var52);
    int var54 = java2.util2.Collections.indexOfSubList(var46, var52);
    java2.util2.Collections.fill((java2.util2.List)var38, (java.lang.Object)var52);
    java2.util2.Collections.rotate((java2.util2.List)var38, 0);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var60);
    java2.util2.Enumeration var62 = java2.util2.Collections.enumeration((java2.util2.Collection)var60);
    java2.util2.ArrayList var63 = java2.util2.Collections.list(var62);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var65);
    java2.util2.Enumeration var67 = java2.util2.Collections.enumeration((java2.util2.Collection)var65);
    java2.util2.ArrayList var68 = java2.util2.Collections.list(var67);
    java2.util2.List var69 = java2.util2.Collections.singletonList((java.lang.Object)var67);
    java2.util2.List var70 = java2.util2.Collections.unmodifiableList(var69);
    java2.util2.Collections.copy((java2.util2.List)var63, var69);
    boolean var72 = java2.util2.Collections.replaceAll((java2.util2.List)var38, (java.lang.Object)(byte)10, (java.lang.Object)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var73 = java2.util2.Collections.binarySearch((java2.util2.List)var9, (java.lang.Object)var72);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test140"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var4, (-2), 0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test141"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var23);
    int var26 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var9, (java2.util2.List)var25);
    java2.util2.List var27 = java2.util2.Collections.synchronizedList((java2.util2.List)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test142"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var7 = var3.comparator();
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Enumeration var11 = java2.util2.Collections.enumeration((java2.util2.Collection)var9);
    java2.util2.ArrayList var12 = java2.util2.Collections.list(var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    java2.util2.List var19 = java2.util2.Collections.unmodifiableList(var18);
    java2.util2.Collections.copy((java2.util2.List)var12, var18);
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var24);
    java2.util2.Set var27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Enumeration var29 = java2.util2.Collections.enumeration((java2.util2.Collection)var27);
    java2.util2.ArrayList var30 = java2.util2.Collections.list(var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.List var37 = java2.util2.Collections.unmodifiableList(var36);
    java2.util2.Collections.copy((java2.util2.List)var30, var36);
    boolean var39 = var25.containsAll((java2.util2.Collection)var30);
    java2.util2.TreeSet var40 = new java2.util2.TreeSet();
    java2.util2.Set var43 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)var43);
    java2.util2.Enumeration var45 = java2.util2.Collections.enumeration((java2.util2.Collection)var43);
    java2.util2.Map var46 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var45);
    boolean var47 = java2.util2.Collections.replaceAll((java2.util2.List)var30, (java.lang.Object)var40, (java.lang.Object)var46);
    java2.util2.Set var49 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var49);
    java2.util2.Enumeration var51 = java2.util2.Collections.enumeration((java2.util2.Collection)var49);
    java2.util2.ArrayList var52 = java2.util2.Collections.list(var51);
    java2.util2.ArrayList var53 = java2.util2.Collections.list(var51);
    boolean var54 = java2.util2.Collections.replaceAll(var18, (java.lang.Object)var47, (java.lang.Object)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var55 = var3.headSet((java.lang.Object)var18);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var40.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test143"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var16);
    java2.util2.ArrayList var19 = java2.util2.Collections.list(var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.Collections.fill((java2.util2.List)var19, (java.lang.Object)var24);
    boolean var26 = java2.util2.Collections.replaceAll(var10, (java.lang.Object)(-2), (java.lang.Object)var19);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)var29);
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java.lang.Object var32 = var31.clone();
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.List var38 = java2.util2.Collections.singletonList((java.lang.Object)var36);
    java2.util2.Collections.reverse(var38);
    boolean var40 = var31.retainAll((java2.util2.Collection)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var27, var38);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test144"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.SortedSet var5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet();
    java2.util2.TreeSet var7 = new java2.util2.TreeSet();
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    boolean var11 = var7.removeAll(var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var10, var12);
    boolean var14 = var6.containsAll(var10);
    boolean var15 = var3.removeAll((java2.util2.Collection)var6);
    java2.util2.Set var16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test145"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.TreeSet var8 = new java2.util2.TreeSet(var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test146"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java2.util2.Set var8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    java.lang.Object var9 = var4.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test147"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.Enumeration var12 = java2.util2.Collections.enumeration((java2.util2.Collection)var10);
    java2.util2.ArrayList var13 = java2.util2.Collections.list(var12);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var4.add((java.lang.Object)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test148"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var35);
    java2.util2.Enumeration var37 = java2.util2.Collections.enumeration((java2.util2.Collection)var35);
    java2.util2.ArrayList var38 = java2.util2.Collections.list(var37);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Enumeration var42 = java2.util2.Collections.enumeration((java2.util2.Collection)var40);
    java2.util2.ArrayList var43 = java2.util2.Collections.list(var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Collections.copy((java2.util2.List)var38, var44);
    boolean var47 = var33.containsAll((java2.util2.Collection)var38);
    java2.util2.Collections.sort((java2.util2.List)var38);
    java2.util2.Set var50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var50);
    java2.util2.Comparator var52 = java2.util2.Collections.reverseOrder();
    java.lang.Object var53 = java2.util2.Collections.max(var51, var52);
    java.lang.Object var54 = java2.util2.Collections.min(var51);
    java2.util2.Enumeration var55 = java2.util2.Collections.enumeration(var51);
    boolean var56 = var38.containsAll(var51);
    boolean var57 = var9.containsAll(var51);
    java2.util2.Set var59 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)var59);
    java2.util2.TreeSet var61 = new java2.util2.TreeSet((java2.util2.Collection)var60);
    java2.util2.TreeSet var62 = new java2.util2.TreeSet((java2.util2.SortedSet)var61);
    java.lang.Object var63 = var62.first();
    java2.util2.Set var64 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var62);
    java2.util2.SortedSet var66 = var62.headSet((java.lang.Object)(short)0);
    java2.util2.Comparator var67 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var68 = java2.util2.Collections.binarySearch((java2.util2.List)var9, (java.lang.Object)var62, var67);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + 10L+ "'", var53.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + 10L+ "'", var54.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var61.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test149"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List var3 = java2.util2.Collections.nCopies(100, (java.lang.Object)var2);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Collection var8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var6);
    java2.util2.Map var9 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)var8);
    java2.util2.Map var10 = java2.util2.Collections.unmodifiableMap(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = java2.util2.Collections.binarySearch(var3, (java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test150"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java2.util2.Iterator var5 = var3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test151"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var3.remove((java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test152"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.SortedSet)var9);
    java.lang.Object var11 = var9.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var4.contains(var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test153"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Collections.fill((java2.util2.List)var15, (java.lang.Object)var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var35 = java2.util2.Collections.unmodifiableList(var34);
    int var36 = java2.util2.Collections.indexOfSubList(var28, var34);
    java2.util2.Collections.fill((java2.util2.List)var20, (java.lang.Object)var34);
    java2.util2.TreeSet var38 = new java2.util2.TreeSet();
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max(var41, var42);
    java.lang.Object[] var44 = new java.lang.Object[] { var42};
    java.lang.Object[] var45 = var38.toArray(var44);
    java.lang.Object[] var46 = var20.toArray(var44);
    java.lang.Object[] var47 = var9.toArray(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var38.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 10L+ "'", var43.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test154"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Set var6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    java2.util2.SortedSet var8 = var4.headSet((java.lang.Object)(short)0);
    int var9 = var4.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test155"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    boolean var12 = var8.removeAll(var11);
    boolean var13 = var4.containsAll((java2.util2.Collection)var8);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.Enumeration var17 = java2.util2.Collections.enumeration((java2.util2.Collection)var15);
    java2.util2.ArrayList var18 = java2.util2.Collections.list(var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Collections.fill((java2.util2.List)var18, (java.lang.Object)var23);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)var28);
    java2.util2.List var31 = java2.util2.Collections.unmodifiableList(var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Enumeration var35 = java2.util2.Collections.enumeration((java2.util2.Collection)var33);
    java2.util2.ArrayList var36 = java2.util2.Collections.list(var35);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.List var38 = java2.util2.Collections.unmodifiableList(var37);
    int var39 = java2.util2.Collections.indexOfSubList(var31, var37);
    java2.util2.Collections.fill((java2.util2.List)var23, (java.lang.Object)var37);
    java2.util2.Collections.rotate((java2.util2.List)var23, 0);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Enumeration var46 = java2.util2.Collections.enumeration((java2.util2.Collection)var44);
    java2.util2.ArrayList var47 = java2.util2.Collections.list(var46);
    java2.util2.Set var49 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var50 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var49);
    java2.util2.Enumeration var51 = java2.util2.Collections.enumeration((java2.util2.Collection)var49);
    java2.util2.ArrayList var52 = java2.util2.Collections.list(var51);
    java2.util2.Set var54 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var54);
    java2.util2.Enumeration var56 = java2.util2.Collections.enumeration((java2.util2.Collection)var54);
    java2.util2.ArrayList var57 = java2.util2.Collections.list(var56);
    java2.util2.List var58 = java2.util2.Collections.singletonList((java.lang.Object)var56);
    java2.util2.List var59 = java2.util2.Collections.unmodifiableList(var58);
    java2.util2.Collections.copy((java2.util2.List)var52, var58);
    boolean var61 = var47.containsAll((java2.util2.Collection)var52);
    java2.util2.Collections.sort((java2.util2.List)var52);
    java2.util2.Set var64 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var65 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var64);
    java2.util2.Comparator var66 = java2.util2.Collections.reverseOrder();
    java.lang.Object var67 = java2.util2.Collections.max(var65, var66);
    java.lang.Object var68 = java2.util2.Collections.min(var65);
    java2.util2.Enumeration var69 = java2.util2.Collections.enumeration(var65);
    boolean var70 = var52.containsAll(var65);
    boolean var71 = var23.containsAll(var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var73 = var4.subSet((java.lang.Object)var23, (java.lang.Object)(byte)(-1));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + 10L+ "'", var67.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + 10L+ "'", var68.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test156"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.Collections.fill((java2.util2.List)var11, (java.lang.Object)var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)var28);
    java2.util2.List var31 = java2.util2.Collections.unmodifiableList(var30);
    int var32 = java2.util2.Collections.indexOfSubList(var24, var30);
    java2.util2.Collections.fill((java2.util2.List)var16, (java.lang.Object)var30);
    java2.util2.Collections.rotate((java2.util2.List)var16, 0);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var16, var36);
    java2.util2.TreeSet var38 = new java2.util2.TreeSet((java2.util2.Collection)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var39 = java2.util2.Collections.binarySearch(var5, (java.lang.Object)var38);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.size() == 1);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test157"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.Collections.fill((java2.util2.List)var11, (java.lang.Object)var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)var28);
    java2.util2.List var31 = java2.util2.Collections.unmodifiableList(var30);
    int var32 = java2.util2.Collections.indexOfSubList(var24, var30);
    java2.util2.Collections.fill((java2.util2.List)var16, (java.lang.Object)var30);
    java2.util2.Comparator var34 = java2.util2.Collections.reverseOrder();
    java.lang.Object var35 = java2.util2.Collections.min((java2.util2.Collection)var30, var34);
    java.lang.Object var36 = new java.lang.Object();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var37 = var3.subSet((java.lang.Object)var30, var36);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test158"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.List var17 = java2.util2.Collections.singletonList((java.lang.Object)var15);
    java2.util2.List var18 = java2.util2.Collections.unmodifiableList(var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.List var24 = java2.util2.Collections.singletonList((java.lang.Object)var22);
    java2.util2.List var25 = java2.util2.Collections.unmodifiableList(var24);
    int var26 = java2.util2.Collections.indexOfSubList(var18, var24);
    java2.util2.Collections.fill((java2.util2.List)var10, (java.lang.Object)var24);
    java2.util2.TreeSet var28 = new java2.util2.TreeSet();
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Comparator var32 = java2.util2.Collections.reverseOrder();
    java.lang.Object var33 = java2.util2.Collections.max(var31, var32);
    java.lang.Object[] var34 = new java.lang.Object[] { var32};
    java.lang.Object[] var35 = var28.toArray(var34);
    java.lang.Object[] var36 = var10.toArray(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var37 = java2.util2.Collections.nCopies((-2), (java.lang.Object)var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 10L+ "'", var33.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test159"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var7 = var3.tailSet((java.lang.Object)0.0d);
    java.lang.String var8 = var3.toString();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)var10);
    java2.util2.TreeSet var12 = new java2.util2.TreeSet((java2.util2.Collection)var11);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.SortedSet)var12);
    java2.util2.Set var14 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var12);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var12);
    java2.util2.Iterator var16 = var12.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var17 = var3.headSet((java.lang.Object)var16);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test160"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Collections.reverse(var5);
    java2.util2.Collections.rotate(var5, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var5);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test161"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.ArrayList var6 = java2.util2.Collections.list(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var7 = java2.util2.Collections.nCopies((-1), (java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test162"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var9);
    boolean var12 = var5.retainAll((java2.util2.Collection)var11);
    java2.util2.Collections.rotate(var11, 100);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var24);
    java2.util2.Collections.fill((java2.util2.List)var20, (java.lang.Object)var25);
    boolean var27 = java2.util2.Collections.replaceAll(var11, (java.lang.Object)(-2), (java.lang.Object)var20);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.List var29 = java2.util2.Collections.nCopies(1, (java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test163"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    java2.util2.ArrayList var7 = java2.util2.Collections.list(var6);
    java2.util2.List var8 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    java2.util2.List var9 = java2.util2.Collections.singletonList((java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var0.contains((java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test164"); }


    java2.util2.Comparator var0 = java2.util2.Collections.reverseOrder();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Set var6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    java2.util2.List var7 = java2.util2.Collections.singletonList((java.lang.Object)var4);
    java2.util2.Iterator var8 = var4.iterator();
    java2.util2.Map var9 = java2.util2.Collections.singletonMap((java.lang.Object)var0, (java.lang.Object)var4);
    boolean var10 = var4.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test165"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    boolean var7 = var6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test166"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Iterator var10 = var4.iterator();
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var24);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)var24);
    java2.util2.List var27 = java2.util2.Collections.unmodifiableList(var26);
    java2.util2.Collections.copy((java2.util2.List)var20, var26);
    boolean var29 = var15.containsAll((java2.util2.Collection)var20);
    java2.util2.Collections.sort((java2.util2.List)var20);
    java2.util2.Collections.shuffle((java2.util2.List)var20);
    java2.util2.List var32 = java2.util2.Collections.unmodifiableList((java2.util2.List)var20);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Enumeration var41 = java2.util2.Collections.enumeration((java2.util2.Collection)var39);
    java2.util2.ArrayList var42 = java2.util2.Collections.list(var41);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)var42);
    java2.util2.Set var45 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var45);
    java2.util2.Enumeration var47 = java2.util2.Collections.enumeration((java2.util2.Collection)var45);
    java2.util2.ArrayList var48 = java2.util2.Collections.list(var47);
    java2.util2.List var49 = java2.util2.Collections.singletonList((java.lang.Object)var47);
    java2.util2.List var50 = java2.util2.Collections.unmodifiableList(var49);
    java2.util2.Set var52 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var53 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var52);
    java2.util2.Enumeration var54 = java2.util2.Collections.enumeration((java2.util2.Collection)var52);
    java2.util2.ArrayList var55 = java2.util2.Collections.list(var54);
    java2.util2.List var56 = java2.util2.Collections.singletonList((java.lang.Object)var54);
    java2.util2.List var57 = java2.util2.Collections.unmodifiableList(var56);
    int var58 = java2.util2.Collections.indexOfSubList(var50, var56);
    java2.util2.Collections.fill((java2.util2.List)var42, (java.lang.Object)var56);
    java2.util2.Collections.sort((java2.util2.List)var42);
    java2.util2.Set var62 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Map var63 = java2.util2.Collections.singletonMap((java.lang.Object)var42, (java.lang.Object)10L);
    java2.util2.Collections.fill((java2.util2.List)var20, (java.lang.Object)var42);
    boolean var65 = var4.retainAll((java2.util2.Collection)var20);
    java2.util2.List var66 = java2.util2.Collections.synchronizedList((java2.util2.List)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test167"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java.lang.Object var5 = var3.clone();
    var3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test168"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Iterator var5 = var4.iterator();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java.lang.Object var10 = var9.last();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var4.addAll((java2.util2.Collection)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test169"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collections.reverse(var10);
    boolean var12 = var3.retainAll((java2.util2.Collection)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var10, 100, 0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test170"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java2.util2.Set var8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.Enumeration var12 = java2.util2.Collections.enumeration((java2.util2.Collection)var10);
    java2.util2.ArrayList var13 = java2.util2.Collections.list(var12);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.Enumeration var17 = java2.util2.Collections.enumeration((java2.util2.Collection)var15);
    java2.util2.ArrayList var18 = java2.util2.Collections.list(var17);
    java2.util2.Collections.fill((java2.util2.List)var13, (java.lang.Object)var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.List var25 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.List var26 = java2.util2.Collections.unmodifiableList(var25);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Enumeration var30 = java2.util2.Collections.enumeration((java2.util2.Collection)var28);
    java2.util2.ArrayList var31 = java2.util2.Collections.list(var30);
    java2.util2.List var32 = java2.util2.Collections.singletonList((java.lang.Object)var30);
    java2.util2.List var33 = java2.util2.Collections.unmodifiableList(var32);
    int var34 = java2.util2.Collections.indexOfSubList(var26, var32);
    java2.util2.Collections.fill((java2.util2.List)var18, (java.lang.Object)var32);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.Set var38 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)var38);
    java2.util2.TreeSet var40 = new java2.util2.TreeSet((java2.util2.Collection)var39);
    java2.util2.TreeSet var41 = new java2.util2.TreeSet((java2.util2.SortedSet)var40);
    java2.util2.Set var43 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)var43);
    java2.util2.TreeSet var45 = new java2.util2.TreeSet((java2.util2.Collection)var44);
    java2.util2.TreeSet var46 = new java2.util2.TreeSet((java2.util2.SortedSet)var45);
    java2.util2.Set var47 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var45);
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var45);
    boolean var49 = var40.retainAll((java2.util2.Collection)var48);
    int var50 = java2.util2.Collections.lastIndexOfSubList(var32, var48);
    boolean var51 = var4.retainAll((java2.util2.Collection)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var40.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var41.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var45.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var46.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var46.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test171"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var8);
    java2.util2.Set var10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var12 = var3.retainAll((java2.util2.Collection)var11);
    java2.util2.Collections.reverse(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test172"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    int var14 = java2.util2.Collections.indexOfSubList(var6, var12);
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    java.lang.Object var16 = java2.util2.Collections.max((java2.util2.Collection)var12, var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var12);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test173"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Comparator var27 = java2.util2.Collections.reverseOrder();
    java.lang.Object var28 = java2.util2.Collections.min((java2.util2.Collection)var23, var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)var30);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet((java2.util2.Collection)var31);
    java2.util2.TreeSet var33 = new java2.util2.TreeSet((java2.util2.SortedSet)var32);
    java2.util2.Set var34 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var32);
    java2.util2.List var35 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var37 = java2.util2.Collections.binarySearch(var23, (java.lang.Object)var35, var36);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var33.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test174"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var11 = java2.util2.Collections.unmodifiableList(var10);
    java2.util2.Collections.copy((java2.util2.List)var4, var10);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var24);
    java2.util2.ArrayList var27 = java2.util2.Collections.list(var26);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var26);
    java2.util2.List var29 = java2.util2.Collections.unmodifiableList(var28);
    java2.util2.Collections.copy((java2.util2.List)var22, var28);
    boolean var31 = var17.containsAll((java2.util2.Collection)var22);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet();
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)var35);
    java2.util2.Enumeration var37 = java2.util2.Collections.enumeration((java2.util2.Collection)var35);
    java2.util2.Map var38 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var37);
    boolean var39 = java2.util2.Collections.replaceAll((java2.util2.List)var22, (java.lang.Object)var32, (java.lang.Object)var38);
    java2.util2.Set var41 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var41);
    java2.util2.Enumeration var43 = java2.util2.Collections.enumeration((java2.util2.Collection)var41);
    java2.util2.ArrayList var44 = java2.util2.Collections.list(var43);
    java2.util2.ArrayList var45 = java2.util2.Collections.list(var43);
    boolean var46 = java2.util2.Collections.replaceAll(var10, (java.lang.Object)var39, (java.lang.Object)var43);
    java2.util2.ArrayList var47 = java2.util2.Collections.list(var43);
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test175"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var8);
    java2.util2.Set var10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var8);
    java2.util2.List var11 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var12 = var3.retainAll((java2.util2.Collection)var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var27);
    java2.util2.List var30 = java2.util2.Collections.unmodifiableList(var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.List var37 = java2.util2.Collections.unmodifiableList(var36);
    int var38 = java2.util2.Collections.indexOfSubList(var30, var36);
    java2.util2.Collections.fill((java2.util2.List)var22, (java.lang.Object)var36);
    java2.util2.Collections.rotate((java2.util2.List)var22, 0);
    java2.util2.Comparator var42 = java2.util2.Collections.reverseOrder();
    java.lang.Object var43 = java2.util2.Collections.max((java2.util2.Collection)var22, var42);
    java2.util2.Comparator var44 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var22, var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var11, (java2.util2.List)var22);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test176"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = java2.util2.Collections.min((java2.util2.Collection)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test177"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min((java2.util2.Collection)var3, var7);
    java2.util2.SortedSet var9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var3);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)var11);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java2.util2.TreeSet var14 = new java2.util2.TreeSet((java2.util2.SortedSet)var13);
    java2.util2.Set var15 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var13);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.Iterator var17 = var13.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var18 = var3.retainAll((java2.util2.Collection)var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test178"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Collections.fill((java2.util2.List)var32, (java.lang.Object)var37);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Enumeration var42 = java2.util2.Collections.enumeration((java2.util2.Collection)var40);
    java2.util2.ArrayList var43 = java2.util2.Collections.list(var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.Enumeration var49 = java2.util2.Collections.enumeration((java2.util2.Collection)var47);
    java2.util2.ArrayList var50 = java2.util2.Collections.list(var49);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var49);
    java2.util2.List var52 = java2.util2.Collections.unmodifiableList(var51);
    int var53 = java2.util2.Collections.indexOfSubList(var45, var51);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)var51);
    java2.util2.TreeSet var55 = new java2.util2.TreeSet();
    java2.util2.Set var57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var57);
    java2.util2.Comparator var59 = java2.util2.Collections.reverseOrder();
    java.lang.Object var60 = java2.util2.Collections.max(var58, var59);
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    java.lang.Object[] var63 = var37.toArray(var61);
    int var64 = java2.util2.Collections.indexOfSubList((java2.util2.List)var9, (java2.util2.List)var37);
    java2.util2.TreeSet var65 = new java2.util2.TreeSet();
    java2.util2.Set var67 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var68 = java2.util2.Collections.singleton((java.lang.Object)var67);
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.lang.Object[] var70 = var65.toArray(var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var71 = java2.util2.Collections.binarySearch((java2.util2.List)var37, (java.lang.Object)var70);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 10L+ "'", var60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var65.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test179"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java2.util2.Set var8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    boolean var10 = var4.equals((java.lang.Object)"[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test180"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet var9 = var4.tailSet((java.lang.Object)"hi!");
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)var11);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java2.util2.TreeSet var14 = new java2.util2.TreeSet((java2.util2.SortedSet)var13);
    java.lang.Object var15 = var14.first();
    java2.util2.Set var16 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var14);
    java.lang.Object[] var17 = var14.toArray();
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var19 = var4.headSet((java.lang.Object)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test181"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.SortedSet)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[1]");

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test182"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.Collections.reverse(var10);
    boolean var12 = var3.retainAll((java2.util2.Collection)var10);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet();
    java.lang.Object[] var14 = var13.toArray();
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var16 = java2.util2.Collections.binarySearch(var10, (java.lang.Object)var13, var15);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test183"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)var18);
    java2.util2.Set var20 = java2.util2.Collections.unmodifiableSet(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test184"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.Set var9 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var4);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var16);
    java2.util2.ArrayList var19 = java2.util2.Collections.list(var18);
    java2.util2.Collections.fill((java2.util2.List)var14, (java.lang.Object)var19);
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var24);
    java2.util2.List var26 = java2.util2.Collections.singletonList((java.lang.Object)var24);
    java2.util2.List var27 = java2.util2.Collections.unmodifiableList(var26);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)var31);
    java2.util2.List var34 = java2.util2.Collections.unmodifiableList(var33);
    int var35 = java2.util2.Collections.indexOfSubList(var27, var33);
    java2.util2.Collections.fill((java2.util2.List)var19, (java.lang.Object)var33);
    java2.util2.List var37 = java2.util2.Collections.synchronizedList((java2.util2.List)var19);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)var39);
    java2.util2.TreeSet var41 = new java2.util2.TreeSet((java2.util2.Collection)var40);
    java2.util2.TreeSet var42 = new java2.util2.TreeSet((java2.util2.SortedSet)var41);
    java2.util2.SortedSet var43 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var41);
    java2.util2.TreeSet var44 = new java2.util2.TreeSet();
    java2.util2.TreeSet var45 = new java2.util2.TreeSet();
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    boolean var49 = var45.removeAll(var48);
    java2.util2.Comparator var50 = java2.util2.Collections.reverseOrder();
    java.lang.Object var51 = java2.util2.Collections.max(var48, var50);
    boolean var52 = var44.containsAll(var48);
    boolean var53 = var41.removeAll((java2.util2.Collection)var44);
    java.lang.Object var54 = var41.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var55 = var4.subSet((java.lang.Object)var37, (java.lang.Object)var41);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var41.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var42.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var45.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + 10L+ "'", var51.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test185"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.sort((java2.util2.List)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var28 = java2.util2.Collections.max((java2.util2.Collection)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test186"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    java2.util2.Map var5 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)var4);
    java2.util2.Map var6 = java2.util2.Collections.synchronizedMap(var5);
    java2.util2.Map var7 = java2.util2.Collections.synchronizedMap(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test187"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java.lang.Object var6 = var5.first();
    java2.util2.SortedSet var8 = var5.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet();
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    boolean var13 = var9.removeAll(var12);
    boolean var14 = var5.containsAll((java2.util2.Collection)var9);
    java2.util2.Iterator var15 = var9.iterator();
    java2.util2.Map var16 = java2.util2.Collections.singletonMap((java.lang.Object)10L, (java.lang.Object)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test188"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet();
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.Map var25 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var24);
    boolean var26 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)var19, (java.lang.Object)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var28 = java2.util2.Collections.binarySearch((java2.util2.List)var9, (java.lang.Object)1L);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test189"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Collections.fill((java2.util2.List)var15, (java.lang.Object)var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var35 = java2.util2.Collections.unmodifiableList(var34);
    int var36 = java2.util2.Collections.indexOfSubList(var28, var34);
    java2.util2.Collections.fill((java2.util2.List)var20, (java.lang.Object)var34);
    java2.util2.Collections.shuffle(var34);
    java2.util2.Collections.copy((java2.util2.List)var9, var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(var34, 0, (-1));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test190"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var16);
    java2.util2.ArrayList var19 = java2.util2.Collections.list(var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.Collections.fill((java2.util2.List)var19, (java.lang.Object)var24);
    boolean var26 = java2.util2.Collections.replaceAll(var10, (java.lang.Object)(-2), (java.lang.Object)var19);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test191"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var8);
    boolean var10 = var3.equals((java.lang.Object)var8);
    java2.util2.SortedSet var11 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test192"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var9, var29);
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)var33);
    java2.util2.TreeSet var35 = new java2.util2.TreeSet((java2.util2.Collection)var34);
    java2.util2.TreeSet var36 = new java2.util2.TreeSet((java2.util2.SortedSet)var35);
    java.lang.Object var37 = var36.first();
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    java.lang.Object var39 = java2.util2.Collections.min((java2.util2.Collection)var36, var38);
    java.lang.String var40 = var36.toString();
    java2.util2.Set var41 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var42 = var31.removeAll((java2.util2.Collection)var41);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var35.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var36.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "[[1.0]]"+ "'", var40.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test193"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.List var7 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.Collections.rotate(var5, (-1));
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Collections.fill((java2.util2.List)var15, (java.lang.Object)var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var35 = java2.util2.Collections.unmodifiableList(var34);
    int var36 = java2.util2.Collections.indexOfSubList(var28, var34);
    java2.util2.Collections.fill((java2.util2.List)var20, (java.lang.Object)var34);
    java2.util2.List var38 = java2.util2.Collections.synchronizedList((java2.util2.List)var20);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Enumeration var42 = java2.util2.Collections.enumeration((java2.util2.Collection)var40);
    java2.util2.ArrayList var43 = java2.util2.Collections.list(var42);
    java2.util2.Set var45 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var45);
    java2.util2.Enumeration var47 = java2.util2.Collections.enumeration((java2.util2.Collection)var45);
    java2.util2.ArrayList var48 = java2.util2.Collections.list(var47);
    java2.util2.Collections.fill((java2.util2.List)var43, (java.lang.Object)var48);
    java2.util2.Set var51 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var52 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var51);
    java2.util2.Enumeration var53 = java2.util2.Collections.enumeration((java2.util2.Collection)var51);
    java2.util2.ArrayList var54 = java2.util2.Collections.list(var53);
    java2.util2.List var55 = java2.util2.Collections.singletonList((java.lang.Object)var53);
    java2.util2.List var56 = java2.util2.Collections.unmodifiableList(var55);
    java2.util2.Set var58 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var59 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var58);
    java2.util2.Enumeration var60 = java2.util2.Collections.enumeration((java2.util2.Collection)var58);
    java2.util2.ArrayList var61 = java2.util2.Collections.list(var60);
    java2.util2.List var62 = java2.util2.Collections.singletonList((java.lang.Object)var60);
    java2.util2.List var63 = java2.util2.Collections.unmodifiableList(var62);
    int var64 = java2.util2.Collections.indexOfSubList(var56, var62);
    java2.util2.Collections.fill((java2.util2.List)var48, (java.lang.Object)var62);
    java2.util2.Collections.rotate((java2.util2.List)var48, 0);
    java2.util2.TreeSet var68 = new java2.util2.TreeSet((java2.util2.Collection)var48);
    java2.util2.Set var70 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var71 = java2.util2.Collections.singleton((java.lang.Object)var70);
    java2.util2.TreeSet var72 = new java2.util2.TreeSet((java2.util2.Collection)var71);
    java2.util2.TreeSet var73 = new java2.util2.TreeSet((java2.util2.SortedSet)var72);
    java2.util2.Set var74 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var72);
    java2.util2.List var75 = java2.util2.Collections.singletonList((java.lang.Object)var72);
    boolean var76 = java2.util2.Collections.replaceAll((java2.util2.List)var20, (java.lang.Object)var48, (java.lang.Object)var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var5, (java2.util2.List)var48);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var68.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var72.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var72.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var73.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var73.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test194"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Set var6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    java2.util2.SortedSet var7 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var4);
    java.lang.Object var8 = var4.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var9 = var0.tailSet((java.lang.Object)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test195"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.List var27 = java2.util2.Collections.synchronizedList((java2.util2.List)var9);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Collections.fill((java2.util2.List)var32, (java.lang.Object)var37);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Enumeration var42 = java2.util2.Collections.enumeration((java2.util2.Collection)var40);
    java2.util2.ArrayList var43 = java2.util2.Collections.list(var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.Enumeration var49 = java2.util2.Collections.enumeration((java2.util2.Collection)var47);
    java2.util2.ArrayList var50 = java2.util2.Collections.list(var49);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var49);
    java2.util2.List var52 = java2.util2.Collections.unmodifiableList(var51);
    int var53 = java2.util2.Collections.indexOfSubList(var45, var51);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)var51);
    java2.util2.Collections.rotate((java2.util2.List)var37, 0);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet((java2.util2.Collection)var37);
    java2.util2.Set var59 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)var59);
    java2.util2.TreeSet var61 = new java2.util2.TreeSet((java2.util2.Collection)var60);
    java2.util2.TreeSet var62 = new java2.util2.TreeSet((java2.util2.SortedSet)var61);
    java2.util2.Set var63 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var61);
    java2.util2.List var64 = java2.util2.Collections.singletonList((java.lang.Object)var61);
    boolean var65 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)var37, (java.lang.Object)var61);
    java2.util2.List var66 = java2.util2.Collections.unmodifiableList((java2.util2.List)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var61.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test196"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.Collections.fill((java2.util2.List)var23, (java.lang.Object)var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.List var35 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var36 = java2.util2.Collections.unmodifiableList(var35);
    java2.util2.Set var38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var38);
    java2.util2.Enumeration var40 = java2.util2.Collections.enumeration((java2.util2.Collection)var38);
    java2.util2.ArrayList var41 = java2.util2.Collections.list(var40);
    java2.util2.List var42 = java2.util2.Collections.singletonList((java.lang.Object)var40);
    java2.util2.List var43 = java2.util2.Collections.unmodifiableList(var42);
    int var44 = java2.util2.Collections.indexOfSubList(var36, var42);
    java2.util2.Collections.fill((java2.util2.List)var28, (java.lang.Object)var42);
    java2.util2.Collections.rotate((java2.util2.List)var28, 0);
    java2.util2.Set var50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var50);
    java2.util2.Enumeration var52 = java2.util2.Collections.enumeration((java2.util2.Collection)var50);
    java2.util2.ArrayList var53 = java2.util2.Collections.list(var52);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var55);
    java2.util2.Enumeration var57 = java2.util2.Collections.enumeration((java2.util2.Collection)var55);
    java2.util2.ArrayList var58 = java2.util2.Collections.list(var57);
    java2.util2.List var59 = java2.util2.Collections.singletonList((java.lang.Object)var57);
    java2.util2.List var60 = java2.util2.Collections.unmodifiableList(var59);
    java2.util2.Collections.copy((java2.util2.List)var53, var59);
    boolean var62 = java2.util2.Collections.replaceAll((java2.util2.List)var28, (java.lang.Object)(byte)10, (java.lang.Object)var59);
    java2.util2.Collections.shuffle((java2.util2.List)var28);
    java2.util2.Collections.copy((java2.util2.List)var4, (java2.util2.List)var28);
    java2.util2.Set var66 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var67 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var66);
    java2.util2.Enumeration var68 = java2.util2.Collections.enumeration((java2.util2.Collection)var66);
    java2.util2.ArrayList var69 = java2.util2.Collections.list(var68);
    java2.util2.List var70 = java2.util2.Collections.singletonList((java.lang.Object)var68);
    java2.util2.List var71 = java2.util2.Collections.unmodifiableList(var70);
    java2.util2.List var72 = java2.util2.Collections.unmodifiableList(var70);
    java2.util2.Collection var73 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var70);
    java2.util2.Collections.rotate(var70, (-1));
    java2.util2.Collections.copy((java2.util2.List)var28, var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test197"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Iterator var5 = var4.iterator();
    java2.util2.Set var6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test198"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.SortedSet var5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test199"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Collections.shuffle(var10);
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var10, var15);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test200"); }


    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)var3);
    java2.util2.Enumeration var5 = java2.util2.Collections.enumeration((java2.util2.Collection)var3);
    java2.util2.Map var6 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var7 = java2.util2.Collections.nCopies((-1), (java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test201"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.List var7 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var5, var8);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test202"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    boolean var16 = var9.retainAll((java2.util2.Collection)var15);
    int var17 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var4, (java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test203"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min((java2.util2.Collection)var3, var7);
    java2.util2.SortedSet var9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var3);
    int var10 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test204"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var5);
    java2.util2.Enumeration var7 = java2.util2.Collections.enumeration((java2.util2.Collection)var5);
    java2.util2.ArrayList var8 = java2.util2.Collections.list(var7);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.Enumeration var12 = java2.util2.Collections.enumeration((java2.util2.Collection)var10);
    java2.util2.ArrayList var13 = java2.util2.Collections.list(var12);
    java2.util2.Collections.fill((java2.util2.List)var8, (java.lang.Object)var13);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var16);
    java2.util2.ArrayList var19 = java2.util2.Collections.list(var18);
    java2.util2.List var20 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    java2.util2.List var21 = java2.util2.Collections.unmodifiableList(var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    int var29 = java2.util2.Collections.indexOfSubList(var21, var27);
    java2.util2.Collections.fill((java2.util2.List)var13, (java.lang.Object)var27);
    java2.util2.TreeSet var31 = new java2.util2.TreeSet();
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Comparator var35 = java2.util2.Collections.reverseOrder();
    java.lang.Object var36 = java2.util2.Collections.max(var34, var35);
    java.lang.Object[] var37 = new java.lang.Object[] { var35};
    java.lang.Object[] var38 = var31.toArray(var37);
    java.lang.Object[] var39 = var13.toArray(var37);
    java2.util2.TreeSet var40 = new java2.util2.TreeSet((java2.util2.Collection)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var41 = var3.headSet((java.lang.Object)var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + 10L+ "'", var36.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40.size() == 1);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test205"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java.lang.Object var10 = var4.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test206"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Iterator var6 = var4.iterator();
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.Collections.fill((java2.util2.List)var11, (java.lang.Object)var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)var28);
    java2.util2.List var31 = java2.util2.Collections.unmodifiableList(var30);
    int var32 = java2.util2.Collections.indexOfSubList(var24, var30);
    java2.util2.Collections.fill((java2.util2.List)var16, (java.lang.Object)var30);
    java2.util2.Collections.rotate((java2.util2.List)var16, 0);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Enumeration var39 = java2.util2.Collections.enumeration((java2.util2.Collection)var37);
    java2.util2.ArrayList var40 = java2.util2.Collections.list(var39);
    java2.util2.Set var42 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var42);
    java2.util2.Enumeration var44 = java2.util2.Collections.enumeration((java2.util2.Collection)var42);
    java2.util2.ArrayList var45 = java2.util2.Collections.list(var44);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.Enumeration var49 = java2.util2.Collections.enumeration((java2.util2.Collection)var47);
    java2.util2.ArrayList var50 = java2.util2.Collections.list(var49);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var49);
    java2.util2.List var52 = java2.util2.Collections.unmodifiableList(var51);
    java2.util2.Collections.copy((java2.util2.List)var45, var51);
    boolean var54 = var40.containsAll((java2.util2.Collection)var45);
    java2.util2.Collections.sort((java2.util2.List)var45);
    java2.util2.Set var57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var57);
    java2.util2.Comparator var59 = java2.util2.Collections.reverseOrder();
    java.lang.Object var60 = java2.util2.Collections.max(var58, var59);
    java.lang.Object var61 = java2.util2.Collections.min(var58);
    java2.util2.Enumeration var62 = java2.util2.Collections.enumeration(var58);
    boolean var63 = var45.containsAll(var58);
    boolean var64 = var16.containsAll(var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var65 = var4.remove((java.lang.Object)var58);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 10L+ "'", var60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + 10L+ "'", var61.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test207"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var4 = java2.util2.Collections.nCopies((-2), (java.lang.Object)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test208"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    int var8 = var4.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test209"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Enumeration var38 = java2.util2.Collections.enumeration((java2.util2.Collection)var36);
    java2.util2.ArrayList var39 = java2.util2.Collections.list(var38);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var41 = java2.util2.Collections.unmodifiableList(var40);
    java2.util2.Collections.copy((java2.util2.List)var34, var40);
    boolean var43 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)(byte)10, (java.lang.Object)var40);
    java2.util2.Map var45 = java2.util2.Collections.singletonMap((java.lang.Object)(byte)10, (java.lang.Object)(-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test210"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Iterator var7 = var3.iterator();
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    java.lang.Object var9 = java2.util2.Collections.min((java2.util2.Collection)var3, var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)var11);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.Collection)var12);
    java2.util2.TreeSet var14 = new java2.util2.TreeSet((java2.util2.SortedSet)var13);
    java.lang.Object var15 = var14.first();
    java2.util2.Comparator var16 = java2.util2.Collections.reverseOrder();
    java.lang.Object var17 = java2.util2.Collections.min((java2.util2.Collection)var14, var16);
    java.lang.String var18 = var14.toString();
    java2.util2.Set var19 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var20 = var3.contains((java.lang.Object)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "[[1.0]]"+ "'", var18.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test211"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var7 = var3.comparator();
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)var9);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var10);
    java.lang.Object var12 = var11.clone();
    java.lang.Object var13 = var11.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var14 = var3.containsAll((java2.util2.Collection)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test212"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    boolean var12 = var8.removeAll(var11);
    boolean var13 = var4.containsAll((java2.util2.Collection)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var14 = java2.util2.Collections.max((java2.util2.Collection)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test213"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Collections.shuffle((java2.util2.List)var9);
    java2.util2.List var21 = java2.util2.Collections.unmodifiableList((java2.util2.List)var9);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Enumeration var30 = java2.util2.Collections.enumeration((java2.util2.Collection)var28);
    java2.util2.ArrayList var31 = java2.util2.Collections.list(var30);
    java2.util2.Collections.fill((java2.util2.List)var26, (java.lang.Object)var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.List var38 = java2.util2.Collections.singletonList((java.lang.Object)var36);
    java2.util2.List var39 = java2.util2.Collections.unmodifiableList(var38);
    java2.util2.Set var41 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var41);
    java2.util2.Enumeration var43 = java2.util2.Collections.enumeration((java2.util2.Collection)var41);
    java2.util2.ArrayList var44 = java2.util2.Collections.list(var43);
    java2.util2.List var45 = java2.util2.Collections.singletonList((java.lang.Object)var43);
    java2.util2.List var46 = java2.util2.Collections.unmodifiableList(var45);
    int var47 = java2.util2.Collections.indexOfSubList(var39, var45);
    java2.util2.Collections.fill((java2.util2.List)var31, (java.lang.Object)var45);
    java2.util2.Collections.sort((java2.util2.List)var31);
    java2.util2.Set var51 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Map var52 = java2.util2.Collections.singletonMap((java.lang.Object)var31, (java.lang.Object)10L);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var31);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var56 = java2.util2.Collections.singleton((java.lang.Object)var55);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet((java2.util2.Collection)var56);
    java2.util2.TreeSet var58 = new java2.util2.TreeSet((java2.util2.SortedSet)var57);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var61 = java2.util2.Collections.singleton((java.lang.Object)var60);
    java2.util2.TreeSet var62 = new java2.util2.TreeSet((java2.util2.Collection)var61);
    java2.util2.TreeSet var63 = new java2.util2.TreeSet((java2.util2.SortedSet)var62);
    boolean var64 = var57.equals((java.lang.Object)var62);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var57);
    java2.util2.Comparator var66 = var57.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var63.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var63.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test214"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java.lang.Object var7 = var3.clone();
    java.lang.Object var8 = var3.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var3.remove((java.lang.Object)1.0d);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test215"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Collections.fill((java2.util2.List)var32, (java.lang.Object)var37);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Enumeration var42 = java2.util2.Collections.enumeration((java2.util2.Collection)var40);
    java2.util2.ArrayList var43 = java2.util2.Collections.list(var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.Enumeration var49 = java2.util2.Collections.enumeration((java2.util2.Collection)var47);
    java2.util2.ArrayList var50 = java2.util2.Collections.list(var49);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var49);
    java2.util2.List var52 = java2.util2.Collections.unmodifiableList(var51);
    int var53 = java2.util2.Collections.indexOfSubList(var45, var51);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)var51);
    java2.util2.TreeSet var55 = new java2.util2.TreeSet();
    java2.util2.Set var57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var57);
    java2.util2.Comparator var59 = java2.util2.Collections.reverseOrder();
    java.lang.Object var60 = java2.util2.Collections.max(var58, var59);
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    java.lang.Object[] var63 = var37.toArray(var61);
    int var64 = java2.util2.Collections.indexOfSubList((java2.util2.List)var9, (java2.util2.List)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var65 = java2.util2.Collections.min((java2.util2.Collection)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 10L+ "'", var60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test216"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java.lang.Object var5 = var3.clone();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var13 = var3.subSet((java.lang.Object)var9, (java.lang.Object)"[1]");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test217"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    boolean var2 = var0.add((java.lang.Object)1L);
    java2.util2.Set var4 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var5 = java2.util2.Collections.singleton((java.lang.Object)var4);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var5);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.SortedSet)var6);
    java.lang.Object var8 = var7.first();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var0.add((java.lang.Object)var9);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test218"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Collections.reverse(var5);
    java2.util2.Collections.rotate(var5, 10);
    java2.util2.List var9 = java2.util2.Collections.unmodifiableList(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test219"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Collections.shuffle((java2.util2.List)var9);
    java2.util2.List var21 = java2.util2.Collections.unmodifiableList((java2.util2.List)var9);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Enumeration var30 = java2.util2.Collections.enumeration((java2.util2.Collection)var28);
    java2.util2.ArrayList var31 = java2.util2.Collections.list(var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Enumeration var35 = java2.util2.Collections.enumeration((java2.util2.Collection)var33);
    java2.util2.ArrayList var36 = java2.util2.Collections.list(var35);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.List var38 = java2.util2.Collections.unmodifiableList(var37);
    java2.util2.Collections.copy((java2.util2.List)var31, var37);
    boolean var40 = var26.containsAll((java2.util2.Collection)var31);
    java2.util2.Collections.sort((java2.util2.List)var31);
    java2.util2.Collections.shuffle((java2.util2.List)var31);
    java2.util2.List var43 = java2.util2.Collections.unmodifiableList((java2.util2.List)var31);
    java2.util2.Set var45 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var45);
    java2.util2.Enumeration var47 = java2.util2.Collections.enumeration((java2.util2.Collection)var45);
    java2.util2.ArrayList var48 = java2.util2.Collections.list(var47);
    java2.util2.Set var50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var50);
    java2.util2.Enumeration var52 = java2.util2.Collections.enumeration((java2.util2.Collection)var50);
    java2.util2.ArrayList var53 = java2.util2.Collections.list(var52);
    java2.util2.Collections.fill((java2.util2.List)var48, (java.lang.Object)var53);
    java2.util2.Set var56 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var57 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var56);
    java2.util2.Enumeration var58 = java2.util2.Collections.enumeration((java2.util2.Collection)var56);
    java2.util2.ArrayList var59 = java2.util2.Collections.list(var58);
    java2.util2.List var60 = java2.util2.Collections.singletonList((java.lang.Object)var58);
    java2.util2.List var61 = java2.util2.Collections.unmodifiableList(var60);
    java2.util2.Set var63 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var64 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var63);
    java2.util2.Enumeration var65 = java2.util2.Collections.enumeration((java2.util2.Collection)var63);
    java2.util2.ArrayList var66 = java2.util2.Collections.list(var65);
    java2.util2.List var67 = java2.util2.Collections.singletonList((java.lang.Object)var65);
    java2.util2.List var68 = java2.util2.Collections.unmodifiableList(var67);
    int var69 = java2.util2.Collections.indexOfSubList(var61, var67);
    java2.util2.Collections.fill((java2.util2.List)var53, (java.lang.Object)var67);
    java2.util2.Collections.sort((java2.util2.List)var53);
    java2.util2.Set var73 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Map var74 = java2.util2.Collections.singletonMap((java.lang.Object)var53, (java.lang.Object)10L);
    java2.util2.Collections.fill((java2.util2.List)var31, (java.lang.Object)var53);
    java2.util2.Set var77 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var78 = java2.util2.Collections.singleton((java.lang.Object)var77);
    java2.util2.TreeSet var79 = new java2.util2.TreeSet((java2.util2.Collection)var78);
    java2.util2.TreeSet var80 = new java2.util2.TreeSet((java2.util2.SortedSet)var79);
    java2.util2.Set var82 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var83 = java2.util2.Collections.singleton((java.lang.Object)var82);
    java2.util2.TreeSet var84 = new java2.util2.TreeSet((java2.util2.Collection)var83);
    java2.util2.TreeSet var85 = new java2.util2.TreeSet((java2.util2.SortedSet)var84);
    boolean var86 = var79.equals((java.lang.Object)var84);
    java2.util2.Collections.fill((java2.util2.List)var31, (java.lang.Object)var79);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var79.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var79.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var80.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var80.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var84.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var84.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var85.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var85.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test220"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.max((java2.util2.Collection)var9, var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var9, var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Enumeration var41 = java2.util2.Collections.enumeration((java2.util2.Collection)var39);
    java2.util2.ArrayList var42 = java2.util2.Collections.list(var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Enumeration var46 = java2.util2.Collections.enumeration((java2.util2.Collection)var44);
    java2.util2.ArrayList var47 = java2.util2.Collections.list(var46);
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.List var49 = java2.util2.Collections.unmodifiableList(var48);
    java2.util2.Collections.copy((java2.util2.List)var42, var48);
    boolean var51 = var37.containsAll((java2.util2.Collection)var42);
    java2.util2.Collections.sort((java2.util2.List)var42);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var56 = java2.util2.Collections.singleton((java.lang.Object)var55);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet((java2.util2.Collection)var56);
    java2.util2.TreeSet var58 = new java2.util2.TreeSet((java2.util2.SortedSet)var57);
    java.lang.Object var59 = var58.first();
    java2.util2.TreeSet var60 = new java2.util2.TreeSet((java2.util2.Collection)var58);
    java2.util2.Map var61 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)var60);
    boolean var62 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)var42, (java.lang.Object)100.0d);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var66 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var65);
    java2.util2.Collection var67 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var65);
    java2.util2.Map var68 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)var67);
    java2.util2.Map var69 = java2.util2.Collections.synchronizedMap(var68);
    java2.util2.Comparator var70 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var71 = java2.util2.Collections.binarySearch((java2.util2.List)var42, (java.lang.Object)var69, var70);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test221"); }


    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = java2.util2.Collections.max((java2.util2.Collection)var1, var3);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test222"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var7 = var3.tailSet((java.lang.Object)0.0d);
    java2.util2.Iterator var8 = var3.iterator();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)var10);
    java2.util2.TreeSet var12 = new java2.util2.TreeSet((java2.util2.Collection)var11);
    java2.util2.TreeSet var13 = new java2.util2.TreeSet((java2.util2.SortedSet)var12);
    java.lang.Object var14 = var13.first();
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    java.lang.Object var16 = java2.util2.Collections.min((java2.util2.Collection)var13, var15);
    java.lang.String var17 = var13.toString();
    java2.util2.TreeSet var18 = new java2.util2.TreeSet((java2.util2.SortedSet)var13);
    java2.util2.Iterator var19 = var13.iterator();
    java2.util2.Map var20 = java2.util2.Collections.singletonMap((java.lang.Object)var3, (java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var13.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[[1.0]]"+ "'", var17.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test223"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.SortedSet)var9);
    java.lang.Object var11 = var10.first();
    java2.util2.SortedSet var13 = var10.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet var15 = var10.tailSet((java.lang.Object)"hi!");
    boolean var16 = var3.equals((java.lang.Object)var10);
    java2.util2.Set var17 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test224"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var8);
    boolean var10 = var3.equals((java.lang.Object)var8);
    java.lang.Object var11 = var8.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test225"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Iterator var5 = var4.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = var4.remove((java.lang.Object)(short)10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test226"); }


    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var2);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test227"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.Enumeration var20 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var21 = java2.util2.Collections.list(var20);
    java2.util2.Collections.fill((java2.util2.List)var16, (java.lang.Object)var21);
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var24);
    java2.util2.ArrayList var27 = java2.util2.Collections.list(var26);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var26);
    java2.util2.List var29 = java2.util2.Collections.unmodifiableList(var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.List var35 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var36 = java2.util2.Collections.unmodifiableList(var35);
    int var37 = java2.util2.Collections.indexOfSubList(var29, var35);
    java2.util2.Collections.fill((java2.util2.List)var21, (java.lang.Object)var35);
    java2.util2.Collections.shuffle(var35);
    java2.util2.Collections.copy((java2.util2.List)var10, var35);
    java2.util2.List var41 = java2.util2.Collections.nCopies(100, (java.lang.Object)var10);
    java2.util2.Set var43 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var44 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var43);
    java2.util2.Enumeration var45 = java2.util2.Collections.enumeration((java2.util2.Collection)var43);
    java2.util2.ArrayList var46 = java2.util2.Collections.list(var45);
    java2.util2.Set var48 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var49 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var48);
    java2.util2.Enumeration var50 = java2.util2.Collections.enumeration((java2.util2.Collection)var48);
    java2.util2.ArrayList var51 = java2.util2.Collections.list(var50);
    java2.util2.Collections.fill((java2.util2.List)var46, (java.lang.Object)var51);
    java2.util2.Set var54 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var54);
    java2.util2.Enumeration var56 = java2.util2.Collections.enumeration((java2.util2.Collection)var54);
    java2.util2.ArrayList var57 = java2.util2.Collections.list(var56);
    java2.util2.List var58 = java2.util2.Collections.singletonList((java.lang.Object)var56);
    java2.util2.List var59 = java2.util2.Collections.unmodifiableList(var58);
    java2.util2.Set var61 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var62 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var61);
    java2.util2.Enumeration var63 = java2.util2.Collections.enumeration((java2.util2.Collection)var61);
    java2.util2.ArrayList var64 = java2.util2.Collections.list(var63);
    java2.util2.List var65 = java2.util2.Collections.singletonList((java.lang.Object)var63);
    java2.util2.List var66 = java2.util2.Collections.unmodifiableList(var65);
    int var67 = java2.util2.Collections.indexOfSubList(var59, var65);
    java2.util2.Collections.fill((java2.util2.List)var51, (java.lang.Object)var65);
    java2.util2.Collections.rotate((java2.util2.List)var51, 0);
    java2.util2.Comparator var71 = java2.util2.Collections.reverseOrder();
    java.lang.Object var72 = java2.util2.Collections.max((java2.util2.Collection)var51, var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var73 = java2.util2.Collections.binarySearch((java2.util2.List)var10, (java.lang.Object)var51);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test228"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    boolean var12 = var8.removeAll(var11);
    boolean var13 = var4.containsAll((java2.util2.Collection)var8);
    java2.util2.Iterator var14 = var4.iterator();
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var19);
    java2.util2.List var22 = java2.util2.Collections.unmodifiableList(var21);
    java2.util2.List var23 = java2.util2.Collections.unmodifiableList(var21);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Collections.rotate(var21, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var27 = java2.util2.Collections.binarySearch(var15, (java.lang.Object)(-1));
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test229"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.max((java2.util2.Collection)var9, var29);
    java2.util2.Collections.reverse((java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test230"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java.lang.Object var7 = var3.clone();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet();
    java2.util2.TreeSet var10 = new java2.util2.TreeSet();
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    boolean var14 = var10.removeAll(var13);
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    java.lang.Object var16 = java2.util2.Collections.max(var13, var15);
    boolean var17 = var9.containsAll(var13);
    java2.util2.List var18 = java2.util2.Collections.nCopies(10, (java.lang.Object)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var19 = var3.remove((java.lang.Object)var18);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + 10L+ "'", var16.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test231"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java.lang.Object var7 = var3.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = java2.util2.Collections.min((java2.util2.Collection)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test232"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    int var14 = java2.util2.Collections.indexOfSubList(var6, var12);
    java2.util2.Comparator var15 = java2.util2.Collections.reverseOrder();
    java.lang.Object var16 = java2.util2.Collections.max((java2.util2.Collection)var12, var15);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.Enumeration var20 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var21 = java2.util2.Collections.list(var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.Collections.fill((java2.util2.List)var21, (java.lang.Object)var26);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.List var33 = java2.util2.Collections.singletonList((java.lang.Object)var31);
    java2.util2.List var34 = java2.util2.Collections.unmodifiableList(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Enumeration var38 = java2.util2.Collections.enumeration((java2.util2.Collection)var36);
    java2.util2.ArrayList var39 = java2.util2.Collections.list(var38);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var41 = java2.util2.Collections.unmodifiableList(var40);
    int var42 = java2.util2.Collections.indexOfSubList(var34, var40);
    java2.util2.Collections.fill((java2.util2.List)var26, (java.lang.Object)var40);
    java2.util2.Collections.rotate((java2.util2.List)var26, 0);
    java2.util2.Comparator var46 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var26, var46);
    java2.util2.Collections.rotate((java2.util2.List)var26, 1);
    int var50 = java2.util2.Collections.lastIndexOfSubList(var12, (java2.util2.List)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test233"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Collections.shuffle((java2.util2.List)var9);
    java2.util2.List var21 = java2.util2.Collections.unmodifiableList((java2.util2.List)var9);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Enumeration var30 = java2.util2.Collections.enumeration((java2.util2.Collection)var28);
    java2.util2.ArrayList var31 = java2.util2.Collections.list(var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Enumeration var35 = java2.util2.Collections.enumeration((java2.util2.Collection)var33);
    java2.util2.ArrayList var36 = java2.util2.Collections.list(var35);
    java2.util2.List var37 = java2.util2.Collections.singletonList((java.lang.Object)var35);
    java2.util2.List var38 = java2.util2.Collections.unmodifiableList(var37);
    java2.util2.Collections.copy((java2.util2.List)var31, var37);
    boolean var40 = var26.containsAll((java2.util2.Collection)var31);
    java2.util2.Set var42 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var42);
    java2.util2.Enumeration var44 = java2.util2.Collections.enumeration((java2.util2.Collection)var42);
    java2.util2.ArrayList var45 = java2.util2.Collections.list(var44);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.Enumeration var49 = java2.util2.Collections.enumeration((java2.util2.Collection)var47);
    java2.util2.ArrayList var50 = java2.util2.Collections.list(var49);
    java2.util2.Collections.fill((java2.util2.List)var45, (java.lang.Object)var50);
    java2.util2.Set var53 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var54 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var53);
    java2.util2.Enumeration var55 = java2.util2.Collections.enumeration((java2.util2.Collection)var53);
    java2.util2.ArrayList var56 = java2.util2.Collections.list(var55);
    java2.util2.List var57 = java2.util2.Collections.singletonList((java.lang.Object)var55);
    java2.util2.List var58 = java2.util2.Collections.unmodifiableList(var57);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var61 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var60);
    java2.util2.Enumeration var62 = java2.util2.Collections.enumeration((java2.util2.Collection)var60);
    java2.util2.ArrayList var63 = java2.util2.Collections.list(var62);
    java2.util2.List var64 = java2.util2.Collections.singletonList((java.lang.Object)var62);
    java2.util2.List var65 = java2.util2.Collections.unmodifiableList(var64);
    int var66 = java2.util2.Collections.indexOfSubList(var58, var64);
    java2.util2.Collections.fill((java2.util2.List)var50, (java.lang.Object)var64);
    java2.util2.Collections.rotate((java2.util2.List)var50, 0);
    java2.util2.Set var72 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var73 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var72);
    java2.util2.Enumeration var74 = java2.util2.Collections.enumeration((java2.util2.Collection)var72);
    java2.util2.ArrayList var75 = java2.util2.Collections.list(var74);
    java2.util2.Set var77 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var78 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var77);
    java2.util2.Enumeration var79 = java2.util2.Collections.enumeration((java2.util2.Collection)var77);
    java2.util2.ArrayList var80 = java2.util2.Collections.list(var79);
    java2.util2.List var81 = java2.util2.Collections.singletonList((java.lang.Object)var79);
    java2.util2.List var82 = java2.util2.Collections.unmodifiableList(var81);
    java2.util2.Collections.copy((java2.util2.List)var75, var81);
    boolean var84 = java2.util2.Collections.replaceAll((java2.util2.List)var50, (java.lang.Object)(byte)10, (java.lang.Object)var81);
    java2.util2.Collections.shuffle((java2.util2.List)var50);
    java2.util2.Collections.copy((java2.util2.List)var26, (java2.util2.List)var50);
    java2.util2.Collections.copy((java2.util2.List)var9, (java2.util2.List)var26);
    java2.util2.Comparator var88 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var26, var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test234"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    int var14 = java2.util2.Collections.indexOfSubList(var6, var12);
    java2.util2.Collections.rotate(var12, (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test235"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Iterator var7 = var3.iterator();
    java2.util2.Iterator var8 = var3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test236"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.List var27 = java2.util2.Collections.synchronizedList((java2.util2.List)var9);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Collections.fill((java2.util2.List)var32, (java.lang.Object)var37);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Enumeration var42 = java2.util2.Collections.enumeration((java2.util2.Collection)var40);
    java2.util2.ArrayList var43 = java2.util2.Collections.list(var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.Enumeration var49 = java2.util2.Collections.enumeration((java2.util2.Collection)var47);
    java2.util2.ArrayList var50 = java2.util2.Collections.list(var49);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var49);
    java2.util2.List var52 = java2.util2.Collections.unmodifiableList(var51);
    int var53 = java2.util2.Collections.indexOfSubList(var45, var51);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)var51);
    java2.util2.Collections.rotate((java2.util2.List)var37, 0);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet((java2.util2.Collection)var37);
    java2.util2.Set var59 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var60 = java2.util2.Collections.singleton((java.lang.Object)var59);
    java2.util2.TreeSet var61 = new java2.util2.TreeSet((java2.util2.Collection)var60);
    java2.util2.TreeSet var62 = new java2.util2.TreeSet((java2.util2.SortedSet)var61);
    java2.util2.Set var63 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var61);
    java2.util2.List var64 = java2.util2.Collections.singletonList((java.lang.Object)var61);
    boolean var65 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)var37, (java.lang.Object)var61);
    java.lang.String var66 = var9.toString();
    java2.util2.Collections.sort((java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var61.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var62.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var62.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test237"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java.lang.Object var7 = var3.clone();
    java.lang.Object var8 = var3.clone();
    java.lang.Object var9 = var3.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test238"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var9, var29);
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.Map var37 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var38 = var31.tailSet((java.lang.Object)var36);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test239"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[[1.0]]");

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test240"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java.lang.Object var6 = var5.first();
    java2.util2.TreeSet var7 = new java2.util2.TreeSet((java2.util2.Collection)var5);
    java2.util2.Map var8 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)var7);
    java2.util2.Map var9 = java2.util2.Collections.unmodifiableMap(var8);
    java2.util2.Map var10 = java2.util2.Collections.synchronizedMap(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test241"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var7 = var3.tailSet((java.lang.Object)0.0d);
    java2.util2.Iterator var8 = var3.iterator();
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List var12 = java2.util2.Collections.nCopies(100, (java.lang.Object)var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.Collections.fill((java2.util2.List)var17, (java.lang.Object)var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var27);
    java2.util2.List var30 = java2.util2.Collections.unmodifiableList(var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.ArrayList var35 = java2.util2.Collections.list(var34);
    java2.util2.List var36 = java2.util2.Collections.singletonList((java.lang.Object)var34);
    java2.util2.List var37 = java2.util2.Collections.unmodifiableList(var36);
    int var38 = java2.util2.Collections.indexOfSubList(var30, var36);
    java2.util2.Collections.fill((java2.util2.List)var22, (java.lang.Object)var36);
    int var40 = java2.util2.Collections.indexOfSubList(var12, var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var41 = var3.add((java.lang.Object)var36);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test242"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Set var10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var9);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet();
    boolean var13 = var11.add((java.lang.Object)1L);
    java2.util2.TreeSet var14 = new java2.util2.TreeSet();
    java2.util2.TreeSet var15 = new java2.util2.TreeSet();
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    boolean var19 = var15.removeAll(var18);
    java2.util2.Comparator var20 = java2.util2.Collections.reverseOrder();
    java.lang.Object var21 = java2.util2.Collections.max(var18, var20);
    boolean var22 = var14.containsAll(var18);
    boolean var23 = var11.removeAll(var18);
    java2.util2.Collection var24 = java2.util2.Collections.unmodifiableCollection(var18);
    java.lang.Object var25 = java2.util2.Collections.min(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var9.addAll(var18);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + 10L+ "'", var21.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test243"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var8);
    boolean var10 = var3.equals((java.lang.Object)var8);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Collections.fill((java2.util2.List)var15, (java.lang.Object)var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var35 = java2.util2.Collections.unmodifiableList(var34);
    int var36 = java2.util2.Collections.indexOfSubList(var28, var34);
    java2.util2.Collections.fill((java2.util2.List)var20, (java.lang.Object)var34);
    java2.util2.Collections.sort((java2.util2.List)var20);
    java2.util2.Comparator var39 = java2.util2.Collections.reverseOrder();
    java.lang.Object var40 = java2.util2.Collections.max((java2.util2.Collection)var20, var39);
    boolean var41 = var8.equals(var40);
    java2.util2.SortedSet var42 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test244"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    boolean var4 = var3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test245"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)var29);
    java2.util2.TreeSet var31 = new java2.util2.TreeSet((java2.util2.Collection)var30);
    java2.util2.TreeSet var32 = new java2.util2.TreeSet((java2.util2.SortedSet)var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)var34);
    java2.util2.TreeSet var36 = new java2.util2.TreeSet((java2.util2.Collection)var35);
    java2.util2.TreeSet var37 = new java2.util2.TreeSet((java2.util2.SortedSet)var36);
    java2.util2.Set var38 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var36);
    java2.util2.List var39 = java2.util2.Collections.singletonList((java.lang.Object)var36);
    boolean var40 = var31.retainAll((java2.util2.Collection)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(var23, var39);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var32.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var36.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var37.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test246"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java.lang.Object var9 = var8.last();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var10 = var3.tailSet((java.lang.Object)var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test247"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max(var3, var4);
    java.lang.Object var6 = java2.util2.Collections.min(var3);
    java2.util2.Enumeration var7 = java2.util2.Collections.enumeration(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var8 = java2.util2.Collections.nCopies((-1), (java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test248"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Collections.shuffle(var10);
    java2.util2.Collections.reverse(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test249"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Set var36 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var36);
    java2.util2.Enumeration var38 = java2.util2.Collections.enumeration((java2.util2.Collection)var36);
    java2.util2.ArrayList var39 = java2.util2.Collections.list(var38);
    java2.util2.List var40 = java2.util2.Collections.singletonList((java.lang.Object)var38);
    java2.util2.List var41 = java2.util2.Collections.unmodifiableList(var40);
    java2.util2.Collections.copy((java2.util2.List)var34, var40);
    boolean var43 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)(byte)10, (java.lang.Object)var40);
    java2.util2.Collections.shuffle((java2.util2.List)var9);
    java2.util2.Enumeration var45 = java2.util2.Collections.enumeration((java2.util2.Collection)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test250"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var3.clone();
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.Collection)var8);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.SortedSet)var9);
    java.lang.Object var11 = var10.first();
    java2.util2.SortedSet var13 = var10.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet var15 = var10.tailSet((java.lang.Object)"hi!");
    boolean var16 = var3.equals((java.lang.Object)var10);
    var3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test251"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Iterator var6 = var4.iterator();
    java.lang.Object var7 = var4.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test252"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java.lang.Object var5 = var3.first();
    java.lang.String var6 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[[1.0]]"+ "'", var6.equals("[[1.0]]"));

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test253"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.SortedSet var9 = var4.tailSet((java.lang.Object)"hi!");
    java.lang.Object var10 = var4.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test254"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var5, var6);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test255"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    java2.util2.List var11 = java2.util2.Collections.unmodifiableList(var10);
    java2.util2.Collections.copy((java2.util2.List)var4, var10);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.Enumeration var17 = java2.util2.Collections.enumeration((java2.util2.Collection)var15);
    java2.util2.ArrayList var18 = java2.util2.Collections.list(var17);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Collections.fill((java2.util2.List)var18, (java.lang.Object)var23);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.Collections.fill((java2.util2.List)var29, (java.lang.Object)var34);
    java2.util2.Set var37 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var38 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var37);
    java2.util2.Enumeration var39 = java2.util2.Collections.enumeration((java2.util2.Collection)var37);
    java2.util2.ArrayList var40 = java2.util2.Collections.list(var39);
    java2.util2.List var41 = java2.util2.Collections.singletonList((java.lang.Object)var39);
    java2.util2.List var42 = java2.util2.Collections.unmodifiableList(var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Enumeration var46 = java2.util2.Collections.enumeration((java2.util2.Collection)var44);
    java2.util2.ArrayList var47 = java2.util2.Collections.list(var46);
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.List var49 = java2.util2.Collections.unmodifiableList(var48);
    int var50 = java2.util2.Collections.indexOfSubList(var42, var48);
    java2.util2.Collections.fill((java2.util2.List)var34, (java.lang.Object)var48);
    java2.util2.Collections.shuffle(var48);
    java2.util2.Collections.copy((java2.util2.List)var23, var48);
    java2.util2.List var54 = java2.util2.Collections.nCopies(100, (java.lang.Object)var23);
    boolean var55 = var4.retainAll((java2.util2.Collection)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test256"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Collections.fill((java2.util2.List)var15, (java.lang.Object)var20);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var23);
    java2.util2.Enumeration var25 = java2.util2.Collections.enumeration((java2.util2.Collection)var23);
    java2.util2.ArrayList var26 = java2.util2.Collections.list(var25);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)var25);
    java2.util2.List var28 = java2.util2.Collections.unmodifiableList(var27);
    java2.util2.Set var30 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var30);
    java2.util2.Enumeration var32 = java2.util2.Collections.enumeration((java2.util2.Collection)var30);
    java2.util2.ArrayList var33 = java2.util2.Collections.list(var32);
    java2.util2.List var34 = java2.util2.Collections.singletonList((java.lang.Object)var32);
    java2.util2.List var35 = java2.util2.Collections.unmodifiableList(var34);
    int var36 = java2.util2.Collections.indexOfSubList(var28, var34);
    java2.util2.Collections.fill((java2.util2.List)var20, (java.lang.Object)var34);
    java2.util2.Collections.shuffle(var34);
    java2.util2.Collections.copy((java2.util2.List)var9, var34);
    java.lang.String var40 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test257"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.TreeSet var29 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var30 = java2.util2.Collections.min((java2.util2.Collection)var29);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29.size() == 1);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test258"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap((java2.util2.List)var5, 0, 0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test259"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.SortedSet var5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.Collections.fill((java2.util2.List)var10, (java.lang.Object)var15);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.Enumeration var20 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var21 = java2.util2.Collections.list(var20);
    java2.util2.List var22 = java2.util2.Collections.singletonList((java.lang.Object)var20);
    java2.util2.List var23 = java2.util2.Collections.unmodifiableList(var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.List var29 = java2.util2.Collections.singletonList((java.lang.Object)var27);
    java2.util2.List var30 = java2.util2.Collections.unmodifiableList(var29);
    int var31 = java2.util2.Collections.indexOfSubList(var23, var29);
    java2.util2.Collections.fill((java2.util2.List)var15, (java.lang.Object)var29);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    boolean var35 = var3.equals((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test260"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.List var6 = java2.util2.Collections.unmodifiableList(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.List var12 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.List var13 = java2.util2.Collections.unmodifiableList(var12);
    int var14 = java2.util2.Collections.indexOfSubList(var6, var12);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)var16);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet((java2.util2.Collection)var17);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.SortedSet)var18);
    java2.util2.Set var20 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var18);
    java2.util2.List var21 = java2.util2.Collections.singletonList((java.lang.Object)var18);
    java2.util2.Iterator var22 = var18.iterator();
    java2.util2.Map var23 = java2.util2.Collections.singletonMap((java.lang.Object)var6, (java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test261"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.SortedSet var5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet();
    java2.util2.TreeSet var7 = new java2.util2.TreeSet();
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    boolean var11 = var7.removeAll(var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var10, var12);
    boolean var14 = var6.containsAll(var10);
    boolean var15 = var3.removeAll((java2.util2.Collection)var6);
    java.lang.Object var16 = var3.clone();
    java2.util2.Collection var17 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test262"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java.lang.Object var7 = var3.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test263"); }


    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var3);
    java2.util2.Comparator var5 = java2.util2.Collections.reverseOrder();
    java.lang.Object var6 = java2.util2.Collections.max(var4, var5);
    boolean var7 = var1.containsAll(var4);
    java2.util2.List var8 = java2.util2.Collections.nCopies(100, (java.lang.Object)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10L+ "'", var6.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test264"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.max((java2.util2.Collection)var9, var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var9, var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Enumeration var41 = java2.util2.Collections.enumeration((java2.util2.Collection)var39);
    java2.util2.ArrayList var42 = java2.util2.Collections.list(var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Enumeration var46 = java2.util2.Collections.enumeration((java2.util2.Collection)var44);
    java2.util2.ArrayList var47 = java2.util2.Collections.list(var46);
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.List var49 = java2.util2.Collections.unmodifiableList(var48);
    java2.util2.Collections.copy((java2.util2.List)var42, var48);
    boolean var51 = var37.containsAll((java2.util2.Collection)var42);
    java2.util2.Collections.sort((java2.util2.List)var42);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var56 = java2.util2.Collections.singleton((java.lang.Object)var55);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet((java2.util2.Collection)var56);
    java2.util2.TreeSet var58 = new java2.util2.TreeSet((java2.util2.SortedSet)var57);
    java.lang.Object var59 = var58.first();
    java2.util2.TreeSet var60 = new java2.util2.TreeSet((java2.util2.Collection)var58);
    java2.util2.Map var61 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)var60);
    boolean var62 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)var42, (java.lang.Object)100.0d);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List var66 = java2.util2.Collections.nCopies(100, (java.lang.Object)var65);
    int var67 = java2.util2.Collections.indexOfSubList((java2.util2.List)var9, var66);
    java2.util2.Collection var68 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test265"); }


    java2.util2.TreeSet var1 = new java2.util2.TreeSet();
    java2.util2.List var2 = java2.util2.Collections.nCopies(10, (java.lang.Object)var1);
    java2.util2.Comparator var3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = java2.util2.Collections.min((java2.util2.Collection)var1, var3);
      fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test266"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var4);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var7);
    java2.util2.Enumeration var9 = java2.util2.Collections.enumeration((java2.util2.Collection)var7);
    java2.util2.ArrayList var10 = java2.util2.Collections.list(var9);
    java2.util2.Collections.fill((java2.util2.List)var5, (java.lang.Object)var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.Set var18 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var18);
    java2.util2.Enumeration var20 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var21 = java2.util2.Collections.list(var20);
    java2.util2.Collections.fill((java2.util2.List)var16, (java.lang.Object)var21);
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var24);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration((java2.util2.Collection)var24);
    java2.util2.ArrayList var27 = java2.util2.Collections.list(var26);
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)var26);
    java2.util2.List var29 = java2.util2.Collections.unmodifiableList(var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.List var35 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var36 = java2.util2.Collections.unmodifiableList(var35);
    int var37 = java2.util2.Collections.indexOfSubList(var29, var35);
    java2.util2.Collections.fill((java2.util2.List)var21, (java.lang.Object)var35);
    java2.util2.Collections.shuffle(var35);
    java2.util2.Collections.copy((java2.util2.List)var10, var35);
    java2.util2.List var41 = java2.util2.Collections.nCopies(100, (java.lang.Object)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var42 = java2.util2.Collections.min((java2.util2.Collection)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test267"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java.lang.Object var7 = var3.clone();
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)var9);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.Collection)var10);
    java2.util2.TreeSet var12 = new java2.util2.TreeSet((java2.util2.SortedSet)var11);
    java2.util2.Set var13 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var11);
    java2.util2.List var14 = java2.util2.Collections.singletonList((java.lang.Object)var11);
    java2.util2.Comparator var15 = var11.comparator();
    java2.util2.Set var17 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var17);
    java2.util2.Enumeration var19 = java2.util2.Collections.enumeration((java2.util2.Collection)var17);
    java2.util2.ArrayList var20 = java2.util2.Collections.list(var19);
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var24);
    java2.util2.Set var27 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var27);
    java2.util2.Enumeration var29 = java2.util2.Collections.enumeration((java2.util2.Collection)var27);
    java2.util2.ArrayList var30 = java2.util2.Collections.list(var29);
    java2.util2.List var31 = java2.util2.Collections.singletonList((java.lang.Object)var29);
    java2.util2.List var32 = java2.util2.Collections.unmodifiableList(var31);
    java2.util2.Collections.copy((java2.util2.List)var25, var31);
    boolean var34 = var20.containsAll((java2.util2.Collection)var25);
    java2.util2.Set var35 = java2.util2.Collections.singleton((java.lang.Object)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var36 = var3.subSet((java.lang.Object)var11, (java.lang.Object)var35);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var12.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test268"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java.lang.Object var4 = var3.clone();
    java2.util2.SortedSet var5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var9 = var3.addAll((java2.util2.Collection)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test269"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.Collection)var4);
    java2.util2.SortedSet var8 = var6.headSet((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test270"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Enumeration var31 = java2.util2.Collections.enumeration((java2.util2.Collection)var29);
    java2.util2.ArrayList var32 = java2.util2.Collections.list(var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Collections.fill((java2.util2.List)var32, (java.lang.Object)var37);
    java2.util2.Set var40 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var40);
    java2.util2.Enumeration var42 = java2.util2.Collections.enumeration((java2.util2.Collection)var40);
    java2.util2.ArrayList var43 = java2.util2.Collections.list(var42);
    java2.util2.List var44 = java2.util2.Collections.singletonList((java.lang.Object)var42);
    java2.util2.List var45 = java2.util2.Collections.unmodifiableList(var44);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var47);
    java2.util2.Enumeration var49 = java2.util2.Collections.enumeration((java2.util2.Collection)var47);
    java2.util2.ArrayList var50 = java2.util2.Collections.list(var49);
    java2.util2.List var51 = java2.util2.Collections.singletonList((java.lang.Object)var49);
    java2.util2.List var52 = java2.util2.Collections.unmodifiableList(var51);
    int var53 = java2.util2.Collections.indexOfSubList(var45, var51);
    java2.util2.Collections.fill((java2.util2.List)var37, (java.lang.Object)var51);
    java2.util2.TreeSet var55 = new java2.util2.TreeSet();
    java2.util2.Set var57 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var58 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var57);
    java2.util2.Comparator var59 = java2.util2.Collections.reverseOrder();
    java.lang.Object var60 = java2.util2.Collections.max(var58, var59);
    java.lang.Object[] var61 = new java.lang.Object[] { var59};
    java.lang.Object[] var62 = var55.toArray(var61);
    java.lang.Object[] var63 = var37.toArray(var61);
    int var64 = java2.util2.Collections.indexOfSubList((java2.util2.List)var9, (java2.util2.List)var37);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Collection var66 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 10L+ "'", var60.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test271"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Collection var5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var4);
    java2.util2.Enumeration var6 = java2.util2.Collections.enumeration((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test272"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Collection var6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test273"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.TreeSet var19 = new java2.util2.TreeSet();
    java2.util2.Set var22 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)var22);
    java2.util2.Enumeration var24 = java2.util2.Collections.enumeration((java2.util2.Collection)var22);
    java2.util2.Map var25 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var24);
    boolean var26 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)var19, (java.lang.Object)var25);
    java2.util2.Set var28 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var28);
    java2.util2.Enumeration var30 = java2.util2.Collections.enumeration((java2.util2.Collection)var28);
    java2.util2.ArrayList var31 = java2.util2.Collections.list(var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Enumeration var35 = java2.util2.Collections.enumeration((java2.util2.Collection)var33);
    java2.util2.ArrayList var36 = java2.util2.Collections.list(var35);
    java2.util2.Collections.fill((java2.util2.List)var31, (java.lang.Object)var36);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Enumeration var41 = java2.util2.Collections.enumeration((java2.util2.Collection)var39);
    java2.util2.ArrayList var42 = java2.util2.Collections.list(var41);
    java2.util2.List var43 = java2.util2.Collections.singletonList((java.lang.Object)var41);
    java2.util2.List var44 = java2.util2.Collections.unmodifiableList(var43);
    java2.util2.Set var46 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var46);
    java2.util2.Enumeration var48 = java2.util2.Collections.enumeration((java2.util2.Collection)var46);
    java2.util2.ArrayList var49 = java2.util2.Collections.list(var48);
    java2.util2.List var50 = java2.util2.Collections.singletonList((java.lang.Object)var48);
    java2.util2.List var51 = java2.util2.Collections.unmodifiableList(var50);
    int var52 = java2.util2.Collections.indexOfSubList(var44, var50);
    java2.util2.Collections.fill((java2.util2.List)var36, (java.lang.Object)var50);
    java2.util2.TreeSet var54 = new java2.util2.TreeSet();
    java2.util2.Set var56 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var57 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var56);
    java2.util2.Comparator var58 = java2.util2.Collections.reverseOrder();
    java.lang.Object var59 = java2.util2.Collections.max(var57, var58);
    java.lang.Object[] var60 = new java.lang.Object[] { var58};
    java.lang.Object[] var61 = var54.toArray(var60);
    java.lang.Object[] var62 = var36.toArray(var60);
    java2.util2.Collections.shuffle((java2.util2.List)var36);
    int var64 = java2.util2.Collections.indexOfSubList((java2.util2.List)var9, (java2.util2.List)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var54.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + 10L+ "'", var59.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test274"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var7 = var3.tailSet((java.lang.Object)0.0d);
    java.lang.String var8 = var3.toString();
    boolean var10 = var3.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test275"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.ArrayList var25 = java2.util2.Collections.list(var23);
    int var26 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var9, (java2.util2.List)var25);
    java2.util2.List var27 = java2.util2.Collections.synchronizedList((java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test276"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Comparator var6 = var5.comparator();
    java.lang.Object var7 = var5.first();
    java.lang.Object[] var8 = var5.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test277"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Collections.reverse(var5);
    java2.util2.Collections.rotate(var5, 1);
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.Enumeration var12 = java2.util2.Collections.enumeration((java2.util2.Collection)var10);
    java2.util2.ArrayList var13 = java2.util2.Collections.list(var12);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var15);
    java2.util2.Enumeration var17 = java2.util2.Collections.enumeration((java2.util2.Collection)var15);
    java2.util2.ArrayList var18 = java2.util2.Collections.list(var17);
    java2.util2.List var19 = java2.util2.Collections.singletonList((java.lang.Object)var17);
    boolean var20 = var13.retainAll((java2.util2.Collection)var19);
    java2.util2.Collections.rotate(var19, 100);
    java2.util2.Collections.shuffle(var19);
    int var24 = java2.util2.Collections.indexOfSubList(var5, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test278"); }


    java2.util2.TreeSet var0 = new java2.util2.TreeSet();
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Comparator var4 = java2.util2.Collections.reverseOrder();
    java.lang.Object var5 = java2.util2.Collections.max(var3, var4);
    boolean var6 = var0.containsAll(var3);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection(var3);
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    java.lang.Object var9 = java2.util2.Collections.max(var7, var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 10L+ "'", var5.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10L+ "'", var9.equals(10L));

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test279"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Iterator var5 = var4.iterator();
    java2.util2.Comparator var6 = var4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test280"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Iterator var7 = var3.iterator();
    java2.util2.Comparator var8 = java2.util2.Collections.reverseOrder();
    java.lang.Object var9 = java2.util2.Collections.min((java2.util2.Collection)var3, var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var16);
    java2.util2.ArrayList var19 = java2.util2.Collections.list(var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.List var25 = java2.util2.Collections.singletonList((java.lang.Object)var23);
    java2.util2.List var26 = java2.util2.Collections.unmodifiableList(var25);
    java2.util2.Collections.copy((java2.util2.List)var19, var25);
    boolean var28 = var14.containsAll((java2.util2.Collection)var19);
    java2.util2.TreeSet var29 = new java2.util2.TreeSet();
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)var32);
    java2.util2.Enumeration var34 = java2.util2.Collections.enumeration((java2.util2.Collection)var32);
    java2.util2.Map var35 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var34);
    boolean var36 = java2.util2.Collections.replaceAll((java2.util2.List)var19, (java.lang.Object)var29, (java.lang.Object)var35);
    boolean var37 = var3.equals((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test281"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var7 = var3.tailSet((java.lang.Object)0.0d);
    java2.util2.Iterator var8 = var3.iterator();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    java2.util2.Comparator var12 = java2.util2.Collections.reverseOrder();
    java.lang.Object var13 = java2.util2.Collections.max(var11, var12);
    java.lang.Object var14 = java2.util2.Collections.min(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var3.remove((java.lang.Object)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + 10L+ "'", var13.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 10L+ "'", var14.equals(10L));

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test282"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Iterator var10 = var4.iterator();
    java2.util2.Set var11 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var4);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)var14);
    java2.util2.TreeSet var16 = new java2.util2.TreeSet((java2.util2.Collection)var15);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet((java2.util2.SortedSet)var16);
    java.lang.Object var18 = var17.first();
    java2.util2.TreeSet var19 = new java2.util2.TreeSet((java2.util2.Collection)var17);
    java2.util2.Map var20 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)var19);
    java.lang.String var21 = var19.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet var22 = var4.headSet((java.lang.Object)var19);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var16.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var19.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[[1.0]]"+ "'", var21.equals("[[1.0]]"));

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test283"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet();
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.max(var30, var31);
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    java.lang.Object[] var35 = var9.toArray(var33);
    java2.util2.Collections.shuffle((java2.util2.List)var9);
    java2.util2.Collections.rotate((java2.util2.List)var9, (-1));
    java2.util2.Collections.reverse((java2.util2.List)var9);
    java2.util2.List var40 = java2.util2.Collections.synchronizedList((java2.util2.List)var9);
    java.lang.Object[] var41 = var9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test284"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Collections.shuffle((java2.util2.List)var9);
    java2.util2.List var21 = java2.util2.Collections.unmodifiableList((java2.util2.List)var9);
    java2.util2.List var22 = java2.util2.Collections.synchronizedList((java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test285"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet();
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.max(var30, var31);
    java.lang.Object[] var33 = new java.lang.Object[] { var31};
    java.lang.Object[] var34 = var27.toArray(var33);
    java.lang.Object[] var35 = var9.toArray(var33);
    java2.util2.TreeSet var36 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.Collection var37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var36);
    java.lang.String var38 = var36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test286"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Iterator var6 = var4.iterator();
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test287"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java.lang.Object var6 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test288"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet((java2.util2.Collection)var7);
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var8);
    boolean var10 = var3.equals((java.lang.Object)var8);
    java.lang.String var11 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[[1.0]]"+ "'", var11.equals("[[1.0]]"));

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test289"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.ArrayList var5 = java2.util2.Collections.list(var3);
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)var8);
    java2.util2.TreeSet var10 = new java2.util2.TreeSet((java2.util2.Collection)var9);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.SortedSet)var10);
    java2.util2.Set var12 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var10);
    java2.util2.List var13 = java2.util2.Collections.singletonList((java.lang.Object)var10);
    java2.util2.Iterator var14 = var10.iterator();
    java2.util2.Map var15 = java2.util2.Collections.singletonMap((java.lang.Object)var6, (java.lang.Object)var10);
    java2.util2.Comparator var16 = java2.util2.Collections.reverseOrder();
    int var17 = java2.util2.Collections.binarySearch((java2.util2.List)var5, (java.lang.Object)var15, var16);
    java2.util2.Map var18 = java2.util2.Collections.synchronizedMap(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var10.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test290"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Set var7 = java2.util2.Collections.singleton((java.lang.Object)var6);
    java2.util2.Set var9 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var9);
    java2.util2.Enumeration var11 = java2.util2.Collections.enumeration((java2.util2.Collection)var9);
    java2.util2.ArrayList var12 = java2.util2.Collections.list(var11);
    java2.util2.Set var14 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var14);
    java2.util2.Enumeration var16 = java2.util2.Collections.enumeration((java2.util2.Collection)var14);
    java2.util2.ArrayList var17 = java2.util2.Collections.list(var16);
    java2.util2.List var18 = java2.util2.Collections.singletonList((java.lang.Object)var16);
    boolean var19 = var12.retainAll((java2.util2.Collection)var18);
    java2.util2.Collections.rotate(var18, 100);
    java2.util2.Set var23 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var24 = java2.util2.Collections.singleton((java.lang.Object)var23);
    java2.util2.TreeSet var25 = new java2.util2.TreeSet((java2.util2.Collection)var24);
    java2.util2.TreeSet var26 = new java2.util2.TreeSet((java2.util2.SortedSet)var25);
    java2.util2.Set var27 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var25);
    java2.util2.SortedSet var28 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var25);
    java.lang.Object var29 = var25.clone();
    boolean var30 = java2.util2.Collections.replaceAll(var6, (java.lang.Object)var18, var29);
    java2.util2.Set var32 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)var32);
    java2.util2.TreeSet var34 = new java2.util2.TreeSet((java2.util2.Collection)var33);
    java2.util2.TreeSet var35 = new java2.util2.TreeSet((java2.util2.SortedSet)var34);
    java.lang.Object[] var36 = var35.toArray();
    java2.util2.Comparator var37 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var38 = java2.util2.Collections.binarySearch(var18, (java.lang.Object)var36, var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var25.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var26.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var34.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var35.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test291"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.Comparator var6 = java2.util2.Collections.reverseOrder();
    java.lang.Object var7 = java2.util2.Collections.min((java2.util2.Collection)var4, var6);
    java.lang.String var8 = var4.toString();
    java2.util2.TreeSet var9 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Set var10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var9);
    java2.util2.TreeSet var11 = new java2.util2.TreeSet((java2.util2.SortedSet)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var9.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var11.toString(), "[[1.0]]");

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test292"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.Comparator var6 = var5.comparator();
    java.lang.Object var7 = var5.first();
    java2.util2.Comparator var8 = var5.comparator();
    java.lang.Object var9 = var5.last();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test293"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var7 = java2.util2.Collections.reverseOrder();
    java.lang.Object var8 = java2.util2.Collections.min((java2.util2.Collection)var3, var7);
    java.lang.Object[] var9 = var3.toArray();
    java.lang.Object var10 = var3.first();
    java2.util2.Iterator var11 = var3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test294"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Comparator var28 = java2.util2.Collections.reverseOrder();
    java.lang.Object var29 = java2.util2.Collections.max((java2.util2.Collection)var9, var28);
    java.lang.Object[] var30 = var9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test295"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Set var15 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)var15);
    java2.util2.TreeSet var17 = new java2.util2.TreeSet((java2.util2.Collection)var16);
    java2.util2.TreeSet var18 = new java2.util2.TreeSet((java2.util2.SortedSet)var17);
    java.lang.Object var19 = var18.first();
    java2.util2.Set var20 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var18);
    java.lang.Object[] var21 = var18.toArray();
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var18);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)var25);
    java2.util2.TreeSet var27 = new java2.util2.TreeSet((java2.util2.Collection)var26);
    java2.util2.TreeSet var28 = new java2.util2.TreeSet((java2.util2.SortedSet)var27);
    java2.util2.Set var29 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var27);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)var27);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)var30);
    java2.util2.Set var33 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var33);
    java2.util2.Enumeration var35 = java2.util2.Collections.enumeration((java2.util2.Collection)var33);
    java2.util2.ArrayList var36 = java2.util2.Collections.list(var35);
    java2.util2.Set var38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var38);
    java2.util2.Enumeration var40 = java2.util2.Collections.enumeration((java2.util2.Collection)var38);
    java2.util2.ArrayList var41 = java2.util2.Collections.list(var40);
    java2.util2.List var42 = java2.util2.Collections.singletonList((java.lang.Object)var40);
    boolean var43 = var36.retainAll((java2.util2.Collection)var42);
    java2.util2.Collections.rotate(var42, 100);
    java2.util2.Set var47 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var48 = java2.util2.Collections.singleton((java.lang.Object)var47);
    java2.util2.TreeSet var49 = new java2.util2.TreeSet((java2.util2.Collection)var48);
    java2.util2.TreeSet var50 = new java2.util2.TreeSet((java2.util2.SortedSet)var49);
    java2.util2.Set var51 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var49);
    java2.util2.SortedSet var52 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var49);
    java.lang.Object var53 = var49.clone();
    boolean var54 = java2.util2.Collections.replaceAll(var30, (java.lang.Object)var42, var53);
    boolean var55 = var23.containsAll((java2.util2.Collection)var30);
    java2.util2.Set var57 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var58 = java2.util2.Collections.singleton((java.lang.Object)var57);
    java2.util2.TreeSet var59 = new java2.util2.TreeSet((java2.util2.Collection)var58);
    java2.util2.TreeSet var60 = new java2.util2.TreeSet((java2.util2.SortedSet)var59);
    java2.util2.Set var62 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var63 = java2.util2.Collections.singleton((java.lang.Object)var62);
    java2.util2.TreeSet var64 = new java2.util2.TreeSet((java2.util2.Collection)var63);
    java2.util2.TreeSet var65 = new java2.util2.TreeSet((java2.util2.SortedSet)var64);
    java2.util2.Set var66 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var64);
    java2.util2.List var67 = java2.util2.Collections.singletonList((java.lang.Object)var64);
    boolean var68 = var59.retainAll((java2.util2.Collection)var67);
    java2.util2.Comparator var69 = java2.util2.Collections.reverseOrder();
    java.lang.Object var70 = java2.util2.Collections.max((java2.util2.Collection)var67, var69);
    java2.util2.Collections.copy((java2.util2.List)var23, var67);
    boolean var73 = java2.util2.Collections.replaceAll(var10, (java.lang.Object)var23, (java.lang.Object)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var17.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var18.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var27.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var28.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var49.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var50.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var50.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var59.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var64.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var64.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var65.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var65.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test296"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.Comparator var8 = var4.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test297"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)var3);
    java.lang.Object var7 = var3.clone();
    java.lang.Object var8 = var3.clone();
    java.lang.Object var9 = var3.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test298"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var7 = var3.tailSet((java.lang.Object)0.0d);
    java.lang.String var8 = var3.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = java2.util2.Collections.min((java2.util2.Collection)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[[1.0]]"+ "'", var8.equals("[[1.0]]"));

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test299"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.List var10 = java2.util2.Collections.singletonList((java.lang.Object)var8);
    boolean var11 = var4.retainAll((java2.util2.Collection)var10);
    java2.util2.Collections.rotate(var10, 100);
    java2.util2.Set var16 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var16);
    java2.util2.Enumeration var18 = java2.util2.Collections.enumeration((java2.util2.Collection)var16);
    java2.util2.ArrayList var19 = java2.util2.Collections.list(var18);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Enumeration var23 = java2.util2.Collections.enumeration((java2.util2.Collection)var21);
    java2.util2.ArrayList var24 = java2.util2.Collections.list(var23);
    java2.util2.Collections.fill((java2.util2.List)var19, (java.lang.Object)var24);
    boolean var26 = java2.util2.Collections.replaceAll(var10, (java.lang.Object)(-2), (java.lang.Object)var19);
    java2.util2.List var27 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    java2.util2.List var28 = java2.util2.Collections.singletonList((java.lang.Object)(-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test300"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Set var20 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var20);
    java2.util2.Enumeration var22 = java2.util2.Collections.enumeration((java2.util2.Collection)var20);
    java2.util2.ArrayList var23 = java2.util2.Collections.list(var22);
    java2.util2.Set var25 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var25);
    java2.util2.Enumeration var27 = java2.util2.Collections.enumeration((java2.util2.Collection)var25);
    java2.util2.ArrayList var28 = java2.util2.Collections.list(var27);
    java2.util2.Collections.fill((java2.util2.List)var23, (java.lang.Object)var28);
    java2.util2.Set var31 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration((java2.util2.Collection)var31);
    java2.util2.ArrayList var34 = java2.util2.Collections.list(var33);
    java2.util2.List var35 = java2.util2.Collections.singletonList((java.lang.Object)var33);
    java2.util2.List var36 = java2.util2.Collections.unmodifiableList(var35);
    java2.util2.Set var38 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var38);
    java2.util2.Enumeration var40 = java2.util2.Collections.enumeration((java2.util2.Collection)var38);
    java2.util2.ArrayList var41 = java2.util2.Collections.list(var40);
    java2.util2.List var42 = java2.util2.Collections.singletonList((java.lang.Object)var40);
    java2.util2.List var43 = java2.util2.Collections.unmodifiableList(var42);
    int var44 = java2.util2.Collections.indexOfSubList(var36, var42);
    java2.util2.Collections.fill((java2.util2.List)var28, (java.lang.Object)var42);
    java2.util2.Collections.rotate((java2.util2.List)var28, 0);
    java2.util2.Set var50 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var51 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var50);
    java2.util2.Enumeration var52 = java2.util2.Collections.enumeration((java2.util2.Collection)var50);
    java2.util2.ArrayList var53 = java2.util2.Collections.list(var52);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var56 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var55);
    java2.util2.Enumeration var57 = java2.util2.Collections.enumeration((java2.util2.Collection)var55);
    java2.util2.ArrayList var58 = java2.util2.Collections.list(var57);
    java2.util2.List var59 = java2.util2.Collections.singletonList((java.lang.Object)var57);
    java2.util2.List var60 = java2.util2.Collections.unmodifiableList(var59);
    java2.util2.Collections.copy((java2.util2.List)var53, var59);
    boolean var62 = java2.util2.Collections.replaceAll((java2.util2.List)var28, (java.lang.Object)(byte)10, (java.lang.Object)var59);
    java2.util2.Collections.shuffle((java2.util2.List)var28);
    java2.util2.Collections.copy((java2.util2.List)var4, (java2.util2.List)var28);
    java2.util2.List var65 = java2.util2.Collections.unmodifiableList((java2.util2.List)var4);
    java2.util2.Set var67 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var68 = java2.util2.Collections.singleton((java.lang.Object)var67);
    java2.util2.TreeSet var69 = new java2.util2.TreeSet((java2.util2.Collection)var68);
    java2.util2.TreeSet var70 = new java2.util2.TreeSet((java2.util2.SortedSet)var69);
    java.lang.Object var71 = var70.first();
    java2.util2.SortedSet var73 = var70.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet var74 = new java2.util2.TreeSet();
    java2.util2.Set var76 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var77 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var76);
    boolean var78 = var74.removeAll(var77);
    boolean var79 = var70.containsAll((java2.util2.Collection)var74);
    boolean var80 = var4.containsAll((java2.util2.Collection)var70);
    java2.util2.Comparator var81 = var70.comparator();
    java2.util2.Set var82 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var69.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var69.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var70.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var70.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var74.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test301"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var2);
    java2.util2.Collection var4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)var2);
    java2.util2.Map var5 = java2.util2.Collections.singletonMap((java.lang.Object)(-1), (java.lang.Object)var4);
    java2.util2.Map var6 = java2.util2.Collections.unmodifiableMap(var5);
    java2.util2.Map var7 = java2.util2.Collections.unmodifiableMap(var5);
    java2.util2.Map var8 = java2.util2.Collections.unmodifiableMap(var5);
    java2.util2.Map var9 = java2.util2.Collections.unmodifiableMap(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test302"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.List var5 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Collections.reverse(var5);
    java2.util2.Set var8 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var8);
    java2.util2.Enumeration var10 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    java2.util2.ArrayList var11 = java2.util2.Collections.list(var10);
    java2.util2.Set var13 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var13);
    java2.util2.Enumeration var15 = java2.util2.Collections.enumeration((java2.util2.Collection)var13);
    java2.util2.ArrayList var16 = java2.util2.Collections.list(var15);
    java2.util2.Collections.fill((java2.util2.List)var11, (java.lang.Object)var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    java2.util2.Set var26 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var26);
    java2.util2.Enumeration var28 = java2.util2.Collections.enumeration((java2.util2.Collection)var26);
    java2.util2.ArrayList var29 = java2.util2.Collections.list(var28);
    java2.util2.List var30 = java2.util2.Collections.singletonList((java.lang.Object)var28);
    java2.util2.List var31 = java2.util2.Collections.unmodifiableList(var30);
    int var32 = java2.util2.Collections.indexOfSubList(var24, var30);
    java2.util2.Collections.fill((java2.util2.List)var16, (java.lang.Object)var30);
    java2.util2.Collections.rotate((java2.util2.List)var16, 0);
    java2.util2.Comparator var36 = java2.util2.Collections.reverseOrder();
    java.lang.Object var37 = java2.util2.Collections.max((java2.util2.Collection)var16, var36);
    java2.util2.Comparator var38 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var39 = java2.util2.Collections.binarySearch(var5, (java.lang.Object)var36, var38);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test303"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.List var6 = java2.util2.Collections.singletonList((java.lang.Object)var3);
    java2.util2.Comparator var7 = var3.comparator();
    java2.util2.Set var8 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = java2.util2.Collections.min((java2.util2.Collection)var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test304"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java2.util2.Set var5 = java2.util2.Collections.synchronizedSet((java2.util2.Set)var3);
    java2.util2.SortedSet var7 = var3.tailSet((java.lang.Object)0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = java2.util2.Collections.max((java2.util2.Collection)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test305"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)var1);
    java2.util2.TreeSet var3 = new java2.util2.TreeSet((java2.util2.Collection)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.SortedSet)var3);
    java.lang.Object var5 = var4.first();
    java2.util2.SortedSet var7 = var4.tailSet((java.lang.Object)(short)1);
    java2.util2.TreeSet var8 = new java2.util2.TreeSet();
    java2.util2.Set var10 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var10);
    boolean var12 = var8.removeAll(var11);
    boolean var13 = var4.containsAll((java2.util2.Collection)var8);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var3.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test306"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Set var11 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var11);
    java2.util2.Enumeration var13 = java2.util2.Collections.enumeration((java2.util2.Collection)var11);
    java2.util2.ArrayList var14 = java2.util2.Collections.list(var13);
    java2.util2.List var15 = java2.util2.Collections.singletonList((java.lang.Object)var13);
    java2.util2.List var16 = java2.util2.Collections.unmodifiableList(var15);
    java2.util2.Collections.copy((java2.util2.List)var9, var15);
    boolean var18 = var4.containsAll((java2.util2.Collection)var9);
    java2.util2.Collections.sort((java2.util2.List)var9);
    java2.util2.Set var21 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var21);
    java2.util2.Comparator var23 = java2.util2.Collections.reverseOrder();
    java.lang.Object var24 = java2.util2.Collections.max(var22, var23);
    java.lang.Object var25 = java2.util2.Collections.min(var22);
    java2.util2.Enumeration var26 = java2.util2.Collections.enumeration(var22);
    boolean var27 = var9.containsAll(var22);
    java2.util2.Set var29 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java.lang.Object var32 = java2.util2.Collections.max(var30, var31);
    java2.util2.Enumeration var33 = java2.util2.Collections.enumeration(var30);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10L+ "'", var24.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 10L+ "'", var25.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + 10L+ "'", var32.equals(10L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test307"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Collections.rotate((java2.util2.List)var9, 0);
    java2.util2.Comparator var29 = java2.util2.Collections.reverseOrder();
    java.lang.Object var30 = java2.util2.Collections.max((java2.util2.Collection)var9, var29);
    java2.util2.Comparator var31 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort((java2.util2.List)var9, var31);
    java2.util2.Set var34 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var34);
    java2.util2.Enumeration var36 = java2.util2.Collections.enumeration((java2.util2.Collection)var34);
    java2.util2.ArrayList var37 = java2.util2.Collections.list(var36);
    java2.util2.Set var39 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var39);
    java2.util2.Enumeration var41 = java2.util2.Collections.enumeration((java2.util2.Collection)var39);
    java2.util2.ArrayList var42 = java2.util2.Collections.list(var41);
    java2.util2.Set var44 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var45 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var44);
    java2.util2.Enumeration var46 = java2.util2.Collections.enumeration((java2.util2.Collection)var44);
    java2.util2.ArrayList var47 = java2.util2.Collections.list(var46);
    java2.util2.List var48 = java2.util2.Collections.singletonList((java.lang.Object)var46);
    java2.util2.List var49 = java2.util2.Collections.unmodifiableList(var48);
    java2.util2.Collections.copy((java2.util2.List)var42, var48);
    boolean var51 = var37.containsAll((java2.util2.Collection)var42);
    java2.util2.Collections.sort((java2.util2.List)var42);
    java2.util2.Set var55 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var56 = java2.util2.Collections.singleton((java.lang.Object)var55);
    java2.util2.TreeSet var57 = new java2.util2.TreeSet((java2.util2.Collection)var56);
    java2.util2.TreeSet var58 = new java2.util2.TreeSet((java2.util2.SortedSet)var57);
    java.lang.Object var59 = var58.first();
    java2.util2.TreeSet var60 = new java2.util2.TreeSet((java2.util2.Collection)var58);
    java2.util2.Map var61 = java2.util2.Collections.singletonMap((java.lang.Object)100.0d, (java.lang.Object)var60);
    boolean var62 = java2.util2.Collections.replaceAll((java2.util2.List)var9, (java.lang.Object)var42, (java.lang.Object)100.0d);
    java2.util2.Set var65 = java2.util2.Collections.singleton((java.lang.Object)' ');
    java2.util2.List var66 = java2.util2.Collections.nCopies(100, (java.lang.Object)var65);
    int var67 = java2.util2.Collections.indexOfSubList((java2.util2.List)var9, var66);
    java2.util2.Set var69 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var70 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var69);
    java2.util2.Enumeration var71 = java2.util2.Collections.enumeration((java2.util2.Collection)var69);
    java2.util2.ArrayList var72 = java2.util2.Collections.list(var71);
    java2.util2.Set var74 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var75 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var74);
    java2.util2.Enumeration var76 = java2.util2.Collections.enumeration((java2.util2.Collection)var74);
    java2.util2.ArrayList var77 = java2.util2.Collections.list(var76);
    java2.util2.Set var79 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var80 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var79);
    java2.util2.Enumeration var81 = java2.util2.Collections.enumeration((java2.util2.Collection)var79);
    java2.util2.ArrayList var82 = java2.util2.Collections.list(var81);
    java2.util2.List var83 = java2.util2.Collections.singletonList((java.lang.Object)var81);
    java2.util2.List var84 = java2.util2.Collections.unmodifiableList(var83);
    java2.util2.Collections.copy((java2.util2.List)var77, var83);
    boolean var86 = var72.containsAll((java2.util2.Collection)var77);
    java2.util2.Collections.sort((java2.util2.List)var77);
    java2.util2.Collections.shuffle((java2.util2.List)var77);
    int var89 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)var9, (java2.util2.List)var77);
    java2.util2.List var90 = java2.util2.Collections.synchronizedList((java2.util2.List)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var57.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var58.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var60.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test308"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.TreeSet var4 = new java2.util2.TreeSet((java2.util2.Collection)var3);
    java2.util2.TreeSet var5 = new java2.util2.TreeSet((java2.util2.SortedSet)var4);
    java2.util2.TreeSet var6 = new java2.util2.TreeSet((java2.util2.SortedSet)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.List var7 = java2.util2.Collections.nCopies((-2), (java.lang.Object)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var4.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var5.toString(), "[[1.0]]");
    
    // Regression assertion (captures the current behavior of the code)
    assertFalse(var6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertEquals(var6.toString(), "[[1.0]]");

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test309"); }


    java2.util2.Set var1 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var1);
    java2.util2.Enumeration var3 = java2.util2.Collections.enumeration((java2.util2.Collection)var1);
    java2.util2.ArrayList var4 = java2.util2.Collections.list(var3);
    java2.util2.Set var6 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var6);
    java2.util2.Enumeration var8 = java2.util2.Collections.enumeration((java2.util2.Collection)var6);
    java2.util2.ArrayList var9 = java2.util2.Collections.list(var8);
    java2.util2.Collections.fill((java2.util2.List)var4, (java.lang.Object)var9);
    java2.util2.Set var12 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var12);
    java2.util2.Enumeration var14 = java2.util2.Collections.enumeration((java2.util2.Collection)var12);
    java2.util2.ArrayList var15 = java2.util2.Collections.list(var14);
    java2.util2.List var16 = java2.util2.Collections.singletonList((java.lang.Object)var14);
    java2.util2.List var17 = java2.util2.Collections.unmodifiableList(var16);
    java2.util2.Set var19 = java2.util2.Collections.singleton((java.lang.Object)10L);
    java2.util2.Collection var20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)var19);
    java2.util2.Enumeration var21 = java2.util2.Collections.enumeration((java2.util2.Collection)var19);
    java2.util2.ArrayList var22 = java2.util2.Collections.list(var21);
    java2.util2.List var23 = java2.util2.Collections.singletonList((java.lang.Object)var21);
    java2.util2.List var24 = java2.util2.Collections.unmodifiableList(var23);
    int var25 = java2.util2.Collections.indexOfSubList(var17, var23);
    java2.util2.Collections.fill((java2.util2.List)var9, (java.lang.Object)var23);
    java2.util2.Comparator var27 = java2.util2.Collections.reverseOrder();
    java.lang.Object var28 = java2.util2.Collections.min((java2.util2.Collection)var23, var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var29 = java2.util2.Collections.min((java2.util2.Collection)var23);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("TestClass0.test310"); }


    java2.util2.Set var2 = java2.util2.Collections.singleton((java.lang.Object)1.0f);
    java2.util2.Set var3 = java2.util2.Collections.singleton((java.lang.Object)var2);
    java2.util2.Enumeration var4 = java2.util2.Collections.enumeration((java2.util2.Collection)var2);
    java2.util2.Map var5 = java2.util2.Collections.singletonMap((java.lang.Object)10.0f, (java.lang.Object)var4);
    java2.util2.Map var6 = java2.util2.Collections.unmodifiableMap(var5);
    java2.util2.Map var7 = java2.util2.Collections.synchronizedMap(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

}
