package foo.bar;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestClass0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test001"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test002"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test003"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.fill(list2, (java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test004"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list2, list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test005"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)'4');
    java.lang.Object obj2 = java2.util2.Collections.min((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj2 + "' != '" + '4'+ "'", obj2.equals('4'));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test006"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test007"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)'4');
    java2.util2.Set set2 = java2.util2.Collections.unmodifiableSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test008"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i6 = java2.util2.Collections.indexOfSubList(list2, list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test009"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.SortedSet sortedSet5 = treeSet3.tailSet((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test010"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)'4');
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[4]");

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test011"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet6 = treeSet3.subSet((java.lang.Object)(byte)0, (java.lang.Object)10L);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test012"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i4 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test013"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b7 = treeSet3.add((java.lang.Object)"hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test014"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 10, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test015"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)'4');
    java.lang.Object obj2 = java2.util2.Collections.max((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj2 + "' != '" + '4'+ "'", obj2.equals('4'));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test016"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b8 = treeSet3.addAll((java2.util2.Collection)treeSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test017"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj4 = treeSet3.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test018"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 100, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test019"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.SortedSet sortedSet5 = treeSet3.tailSet((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test020"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.sort(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test021"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test022"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test023"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java.lang.String str4 = treeSet3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[]"+ "'", str4.equals("[]"));

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test024"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list3 = java2.util2.Collections.synchronizedList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test025"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 100, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test026"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java.lang.String str6 = treeSet3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[1]"+ "'", str6.equals("[1]"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test027"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.shuffle(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test028"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test029"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.SortedSet sortedSet7 = treeSet3.headSet((java.lang.Object)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test030"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java.lang.Object obj6 = new java.lang.Object();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet7 = treeSet3.headSet(obj6);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test031"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    boolean b5 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)(byte)100, (java.lang.Object)10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test032"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test033"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list3 = java2.util2.Collections.singletonList((java.lang.Object)true);
    int i4 = java2.util2.Collections.lastIndexOfSubList(list1, list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test034"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.Comparator comparator6 = treeSet3.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator6);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test035"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java.lang.Object[] obj_array13 = new java.lang.Object[] { false };
    java.lang.Object[] obj_array14 = treeSet9.toArray(obj_array13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet15 = treeSet3.headSet((java.lang.Object)obj_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test036"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list2 = java2.util2.Collections.unmodifiableList(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test037"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)list2);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test038"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b9 = treeSet3.contains((java.lang.Object)(-1.0d));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test039"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java.lang.Object obj6 = treeSet3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj6);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test040"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list4 = java2.util2.Collections.singletonList((java.lang.Object)true);
    int i5 = java2.util2.Collections.indexOfSubList(list2, list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test041"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test042"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test043"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Set set5 = java2.util2.Collections.singleton((java.lang.Object)'4');
    boolean b6 = treeSet3.equals((java.lang.Object)set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test044"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    boolean b5 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)(short)0, (java.lang.Object)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test045"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test046"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.rotate(list2, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test047"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list4 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list1, list4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test048"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)true);
    boolean b8 = treeSet3.retainAll((java2.util2.Collection)list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test049"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test050"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i4 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test051"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.contains((java.lang.Object)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test052"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i4 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test053"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.contains((java.lang.Object)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test054"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collections.shuffle(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test055"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    int i4 = treeSet3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test056"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test057"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.rotate(list2, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test058"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    int i6 = java2.util2.Collections.lastIndexOfSubList(list2, list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test059"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.Iterator iterator6 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test060"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.equals((java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test061"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b4 = treeSet3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test062"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java.lang.Object obj3 = java2.util2.Collections.min((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 100.0f+ "'", obj3.equals(100.0f));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test063"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.rotate(list2, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test064"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test065"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java.lang.Object[] obj_array9 = new java.lang.Object[] { 1.0f };
    java.lang.Object[] obj_array10 = treeSet7.toArray(obj_array9);
    java.lang.Object[] obj_array11 = treeSet3.toArray(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test066"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test067"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test068"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.List list4 = java2.util2.Collections.singletonList((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test069"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collections.shuffle(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test070"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet7);
    boolean b9 = treeSet3.removeAll((java2.util2.Collection)treeSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test071"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)list3);
    java2.util2.Map map6 = java2.util2.Collections.synchronizedMap(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test072"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list3 = java2.util2.Collections.singletonList((java.lang.Object)"");
    int i4 = java2.util2.Collections.lastIndexOfSubList(list1, list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test073"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i5 = java2.util2.Collections.lastIndexOfSubList(list1, list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test074"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b8 = treeSet3.remove((java.lang.Object)treeSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test075"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Comparator comparator4 = treeSet3.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator4);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test076"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list1, (java.lang.Object)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test077"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b7 = treeSet3.contains((java.lang.Object)1.0f);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test078"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.List list2 = java2.util2.Collections.unmodifiableList(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test079"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Set set4 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test080"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)list20);
    boolean b23 = treeSet21.add((java.lang.Object)(short)1);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet21);
    boolean b25 = treeSet15.removeAll(collection24);
    boolean b26 = treeSet9.removeAll(collection24);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)treeSet9);
    boolean b28 = treeSet3.removeAll((java2.util2.Collection)treeSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test081"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b9 = treeSet7.add((java.lang.Object)(short)1);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    boolean b21 = treeSet19.add((java.lang.Object)(short)1);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet19);
    boolean b23 = treeSet13.removeAll(collection22);
    boolean b24 = treeSet7.removeAll(collection22);
    boolean b25 = treeSet3.retainAll((java2.util2.Collection)treeSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test082"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b8 = treeSet3.add((java.lang.Object)list7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test083"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java.lang.Object obj6 = treeSet3.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (short)1+ "'", obj6.equals((short)1));

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test084"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test085"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list1, comparator2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test086"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)'4');
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj3 = java2.util2.Collections.max((java2.util2.Collection)set1, comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + '4'+ "'", obj3.equals('4'));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test087"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test088"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.SortedSet sortedSet5 = treeSet3.headSet((java.lang.Object)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test089"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test090"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java.lang.Object obj6 = treeSet3.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (short)1+ "'", obj6.equals((short)1));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test091"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)"");
    boolean b6 = treeSet3.containsAll((java2.util2.Collection)list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test092"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list1, (java.lang.Object)false);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test093"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i25 = java2.util2.Collections.indexOfSubList(list21, list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test094"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Iterator iterator4 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test095"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b9 = treeSet7.add((java.lang.Object)(short)1);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    boolean b21 = treeSet19.add((java.lang.Object)(short)1);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet19);
    boolean b23 = treeSet13.removeAll(collection22);
    boolean b24 = treeSet7.removeAll(collection22);
    boolean b25 = treeSet3.addAll((java2.util2.Collection)treeSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test096"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Set set23 = java2.util2.Collections.singleton((java.lang.Object)(short)0);
    java2.util2.Comparator comparator24 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i25 = java2.util2.Collections.binarySearch(list21, (java.lang.Object)(short)0, comparator24);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator24);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test097"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj4 = treeSet3.last();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test098"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test099"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Comparator comparator22 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list21, comparator22);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator22);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test100"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i6 = java2.util2.Collections.lastIndexOfSubList(list2, list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test101"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1+ "'", obj4.equals(1));

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test102"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Collections.reverse(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test103"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list4 = java2.util2.Collections.singletonList((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test104"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration(collection14);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet17 = treeSet3.subSet((java.lang.Object)collection8, (java.lang.Object)arrayList16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test105"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java.lang.Object obj4 = treeSet3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test106"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 100, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test107"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)true, (java.lang.Object)(-1.0f));
    java2.util2.Map map3 = java2.util2.Collections.unmodifiableMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test108"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Collections.copy(list2, list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test109"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.List list3 = java2.util2.Collections.singletonList((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list1, list3);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test110"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list21, list23);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test111"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b7 = treeSet3.contains((java.lang.Object)"hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test112"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test113"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    boolean b10 = treeSet3.removeAll((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test114"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)true, (java.lang.Object)(-1.0f));
    java2.util2.Map map3 = java2.util2.Collections.synchronizedMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test115"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = java2.util2.Collections.max(collection4);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test116"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test117"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Map map6 = java2.util2.Collections.singletonMap((java.lang.Object)true, (java.lang.Object)(-1.0f));
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test118"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet12.removeAll(collection21);
    boolean b23 = treeSet6.removeAll(collection21);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)treeSet6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list24);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test119"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java.lang.Object[] obj_array8 = new java.lang.Object[] { 1.0f };
    java.lang.Object[] obj_array9 = treeSet6.toArray(obj_array8);
    java2.util2.Comparator comparator10 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i11 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)treeSet6, comparator10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator10);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test120"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test121"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collections.reverse(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test122"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.List list22 = java2.util2.Collections.synchronizedList(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test123"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.SortedSet sortedSet5 = treeSet3.tailSet((java.lang.Object)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test124"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test125"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.Collections.reverse(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test126"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i5 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)(byte)10, comparator4);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test127"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list1, comparator2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test128"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test129"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection(collection9);
    boolean b11 = treeSet3.equals((java.lang.Object)collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test130"); }


    java2.util2.Comparator comparator0 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test131"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    boolean b9 = treeSet3.addAll((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test132"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i6 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)list5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test133"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b9 = treeSet3.contains((java.lang.Object)100.0f);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test134"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.List list24 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list21, list24);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test135"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration(collection14);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection(collection14);
    java2.util2.List list18 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list18);
    java2.util2.Map map20 = java2.util2.Collections.singletonMap((java.lang.Object)collection14, (java.lang.Object)list18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet21 = treeSet3.headSet((java.lang.Object)map20);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map20);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test136"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test137"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.Set set6 = java2.util2.Collections.singleton((java.lang.Object)b5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test138"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test139"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 0, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test140"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)list3);
    java2.util2.Map map6 = java2.util2.Collections.unmodifiableMap(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test141"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet6 = treeSet3.subSet((java.lang.Object)(-1.0f), (java.lang.Object)"hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test142"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.Set set7 = java2.util2.Collections.singleton((java.lang.Object)(short)0);
    boolean b8 = treeSet3.removeAll((java2.util2.Collection)set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test143"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b9 = treeSet7.add((java.lang.Object)(short)1);
    java.lang.Object[] obj_array11 = new java.lang.Object[] { false };
    java.lang.Object[] obj_array12 = treeSet7.toArray(obj_array11);
    java.lang.Object[] obj_array13 = treeSet3.toArray(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test144"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.List list5 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test145"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.Comparator comparator10 = treeSet3.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator10);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test146"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    boolean b10 = treeSet3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test147"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test148"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[100.0]");

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test149"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    boolean b11 = treeSet3.equals((java.lang.Object)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test150"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list6);
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj9 = java2.util2.Collections.min(collection7, comparator8);
    boolean b10 = treeSet3.equals((java.lang.Object)comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 100.0f+ "'", obj9.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test151"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[1]");

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test152"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list2, (java.lang.Object)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test153"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj8 = java2.util2.Collections.max(collection4, comparator7);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test154"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java.lang.Object obj10 = treeSet3.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test155"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.Collections.rotate(list2, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test156"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)list2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 1+ "'", obj4.equals(1));

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test157"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet12.removeAll(collection21);
    boolean b23 = treeSet6.removeAll(collection21);
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)list26);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet27);
    java2.util2.Enumeration enumeration29 = java2.util2.Collections.enumeration(collection28);
    java2.util2.Collection collection30 = java2.util2.Collections.unmodifiableCollection(collection28);
    boolean b31 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)collection21, (java.lang.Object)collection28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj32 = java2.util2.Collections.max(collection28);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test158"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 0.0f+ "'", obj4.equals(0.0f));

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test159"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)true, (java.lang.Object)(-1.0f));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)true);
    java2.util2.Set set4 = java2.util2.Collections.synchronizedSet(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test160"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set2 = java2.util2.Collections.unmodifiableSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test161"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration(collection10);
    java2.util2.List list14 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet16 = treeSet3.subSet((java.lang.Object)collection10, (java.lang.Object)list14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test162"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration(collection8);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet11 = treeSet3.tailSet((java.lang.Object)enumeration9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test163"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java.lang.Object[] obj_array13 = new java.lang.Object[] { false };
    java.lang.Object[] obj_array14 = treeSet9.toArray(obj_array13);
    boolean b15 = treeSet3.equals((java.lang.Object)obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test164"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.List list5 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    int i6 = java2.util2.Collections.indexOfSubList(list2, list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test165"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test166"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, (-1), 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test167"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i4 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)10, comparator3);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test168"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj8 = java2.util2.Collections.min(collection6, comparator7);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test169"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.SortedSet sortedSet7 = treeSet3.tailSet((java.lang.Object)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test170"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration(collection7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list2, (java.lang.Object)collection7);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test171"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list4 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    java2.util2.Comparator comparator5 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i6 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)list4, comparator5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator5);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test172"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)(-1.0f));
    java2.util2.Map map3 = java2.util2.Collections.synchronizedMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test173"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    boolean b21 = treeSet19.add((java.lang.Object)(short)1);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet((java2.util2.Collection)list24);
    boolean b27 = treeSet25.add((java.lang.Object)(short)1);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet25);
    boolean b29 = treeSet19.removeAll(collection28);
    boolean b30 = treeSet13.removeAll(collection28);
    java2.util2.List list31 = java2.util2.Collections.singletonList((java.lang.Object)treeSet13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet32 = treeSet3.headSet((java.lang.Object)list31);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test174"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java.lang.Object obj10 = treeSet3.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 100.0f+ "'", obj10.equals(100.0f));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test175"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Enumeration enumeration2 = java2.util2.Collections.enumeration((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration2);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test176"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list6 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet4);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)list9);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list13);
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection(collection14);
    boolean b16 = treeSet10.addAll(collection15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list6, (java.lang.Object)treeSet10);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test177"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    java2.util2.Comparator comparator5 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = java2.util2.Collections.max(collection4, comparator5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator5);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test178"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    boolean b4 = java2.util2.Collections.replaceAll(list1, (java.lang.Object)0.0d, (java.lang.Object)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test179"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list1, 0, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test180"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.Collections.shuffle(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test181"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    java.lang.Object[] obj_array21 = new java.lang.Object[] { 1.0f };
    java.lang.Object[] obj_array22 = treeSet19.toArray(obj_array21);
    java.lang.Object[] obj_array23 = treeSet13.toArray(obj_array21);
    java.lang.Object[] obj_array24 = treeSet3.toArray(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test182"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list6 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet4);
    java2.util2.List list7 = java2.util2.Collections.synchronizedList(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test183"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list1, 0, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test184"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Collections.shuffle(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test185"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)list7);
    boolean b9 = treeSet3.removeAll((java2.util2.Collection)treeSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test186"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)arrayList7);
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)(-1.0f));
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    java.lang.Object[] obj_array17 = new java.lang.Object[] { 1.0f };
    java.lang.Object[] obj_array18 = treeSet15.toArray(obj_array17);
    boolean b19 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)1.0d, (java.lang.Object)treeSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test187"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)true, (java.lang.Object)(-1.0f));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)true);
    java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + true+ "'", obj4.equals(true));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test188"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    boolean b7 = treeSet5.add((java.lang.Object)(short)1);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    boolean b19 = treeSet17.add((java.lang.Object)(short)1);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    boolean b21 = treeSet11.removeAll(collection20);
    boolean b22 = treeSet5.removeAll(collection20);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)treeSet5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list1, list23);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test189"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    boolean b6 = treeSet3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test190"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.List list22 = java2.util2.Collections.unmodifiableList(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test191"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.Comparator comparator3 = treeSet2.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator3);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test192"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Collections.rotate(list1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test193"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java.lang.Object[] obj_array8 = new java.lang.Object[] { 1.0f };
    java.lang.Object[] obj_array9 = treeSet6.toArray(obj_array8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet10 = treeSet2.headSet((java.lang.Object)obj_array9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test194"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)arrayList7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration(collection13);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration14);
    java2.util2.List list17 = java2.util2.Collections.singletonList((java.lang.Object)arrayList16);
    int i18 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList7, (java2.util2.List)arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test195"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection(collection9);
    java.lang.Object[] obj_array11 = new java.lang.Object[] { collection10 };
    java.lang.Object[] obj_array12 = treeSet3.toArray(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test196"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list5);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test197"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list2 = java2.util2.Collections.synchronizedList(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test198"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Map map24 = java2.util2.Collections.singletonMap((java.lang.Object)1.0d, (java.lang.Object)(-1.0f));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list21, (java.lang.Object)map24);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map24);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test199"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java.lang.String str10 = treeSet3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[100.0]"+ "'", str10.equals("[100.0]"));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test200"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet12.removeAll(collection21);
    boolean b23 = treeSet6.removeAll(collection21);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)treeSet6);
    int i25 = java2.util2.Collections.indexOfSubList(list2, list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test201"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list1, comparator2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test202"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj3 = java2.util2.Collections.min((java2.util2.Collection)list1, comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "hi!"+ "'", obj3.equals("hi!"));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test203"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test204"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.SortedSet sortedSet3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet3);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test205"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)true, (java.lang.Object)(-1.0f));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)true);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[true]");

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test206"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list2, comparator3);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test207"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list21, (-1), 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test208"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java.lang.Object obj6 = treeSet3.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 0.0f+ "'", obj6.equals(0.0f));

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test209"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.SortedSet sortedSet11 = treeSet3.headSet((java.lang.Object)1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test210"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test211"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet8 = treeSet3.subSet((java.lang.Object)(byte)100, (java.lang.Object)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test212"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)list2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (short)10+ "'", obj4.equals((short)10));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test213"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.Comparator comparator6 = treeSet3.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator6);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test214"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet9);
    boolean b11 = treeSet3.equals((java.lang.Object)collection10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj12 = java2.util2.Collections.min(collection10);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test215"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test216"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b10 = treeSet3.removeAll((java2.util2.Collection)treeSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test217"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b10 = treeSet3.addAll((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test218"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)0.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i9 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)b8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test219"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b8 = treeSet3.remove((java.lang.Object)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test220"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.Collections.rotate(list21, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test221"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(collection4);
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj9 = java2.util2.Collections.max(collection4, comparator8);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test222"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    boolean b9 = treeSet3.retainAll((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test223"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    int i10 = treeSet3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test224"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)arrayList7);
    java2.util2.Collections.reverse(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test225"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)list23);
    boolean b26 = treeSet24.add((java.lang.Object)(short)1);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet24);
    boolean b28 = treeSet18.removeAll(collection27);
    boolean b29 = treeSet12.removeAll(collection27);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet((java2.util2.Collection)list32);
    java2.util2.Collection collection34 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration(collection34);
    java2.util2.Collection collection36 = java2.util2.Collections.unmodifiableCollection(collection34);
    boolean b37 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)collection27, (java.lang.Object)collection34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b38 = treeSet3.add((java.lang.Object)list8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test226"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet12.removeAll(collection21);
    boolean b23 = treeSet6.removeAll(collection21);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)treeSet6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet25 = treeSet2.headSet((java.lang.Object)treeSet6);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test227"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b7 = treeSet3.remove((java.lang.Object)100.0d);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test228"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.List list4 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list1, list4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test229"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.remove((java.lang.Object)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test230"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    java2.util2.List list4 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    java2.util2.Comparator comparator5 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i6 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)list4, comparator5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator5);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test231"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b9 = treeSet7.add((java.lang.Object)(short)1);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    boolean b11 = treeSet3.addAll((java2.util2.Collection)treeSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test232"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)(short)0);
    java2.util2.Comparator comparator2 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj3 = java2.util2.Collections.min((java2.util2.Collection)set1, comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + (short)0+ "'", obj3.equals((short)0));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test233"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list4 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    int i5 = java2.util2.Collections.indexOfSubList(list1, list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test234"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet12.removeAll(collection21);
    boolean b23 = treeSet6.removeAll(collection21);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)treeSet6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i25 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)treeSet6);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test235"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.Collections.rotate(list2, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test236"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection(collection3);
    java.lang.Object obj5 = java2.util2.Collections.max(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test237"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)arrayList7);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test238"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[true]");

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test239"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 1, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test240"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    boolean b21 = treeSet19.add((java.lang.Object)(short)1);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet19);
    boolean b23 = treeSet13.removeAll(collection22);
    boolean b24 = treeSet9.addAll(collection22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet25 = treeSet3.tailSet((java.lang.Object)treeSet9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test241"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    java.lang.Object[] obj_array14 = new java.lang.Object[] { 1.0f };
    java.lang.Object[] obj_array15 = treeSet12.toArray(obj_array14);
    java.lang.Object[] obj_array16 = treeSet6.toArray(obj_array14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet17 = treeSet2.tailSet((java.lang.Object)obj_array16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test242"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration(collection16);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration17);
    java2.util2.List list20 = java2.util2.Collections.singletonList((java.lang.Object)arrayList19);
    int i21 = java2.util2.Collections.lastIndexOfSubList(list11, (java2.util2.List)arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test243"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)(short)0);
    java2.util2.Set set2 = java2.util2.Collections.unmodifiableSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test244"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List list4 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    int i5 = java2.util2.Collections.lastIndexOfSubList(list1, list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test245"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet5 = treeSet2.subSet((java.lang.Object)1.0d, (java.lang.Object)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test246"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    int i3 = treeSet2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test247"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(collection4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet7);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test248"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java.lang.Object obj5 = java2.util2.Collections.max((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (short)10+ "'", obj5.equals((short)10));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test249"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.shuffle(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test250"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java.lang.Object obj6 = treeSet3.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 0.0f+ "'", obj6.equals(0.0f));

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test251"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list12);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection(collection13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b15 = treeSet3.add((java.lang.Object)collection14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test252"); }


    java2.util2.Set set1 = java2.util2.Collections.singleton((java.lang.Object)0);
    java2.util2.Set set2 = java2.util2.Collections.synchronizedSet(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test253"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet3);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test254"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    boolean b21 = treeSet19.add((java.lang.Object)(short)1);
    java2.util2.List list24 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet((java2.util2.Collection)list24);
    boolean b27 = treeSet25.add((java.lang.Object)(short)1);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet25);
    boolean b29 = treeSet19.removeAll(collection28);
    boolean b30 = treeSet13.removeAll(collection28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet32 = treeSet3.subSet((java.lang.Object)b30, (java.lang.Object)false);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test255"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    int i6 = treeSet3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test256"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list4 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test257"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list12);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection(collection13);
    boolean b15 = treeSet9.addAll(collection14);
    java.lang.Object[] obj_array16 = treeSet9.toArray();
    java.lang.Object[] obj_array17 = treeSet3.toArray(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test258"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)"");
    boolean b8 = treeSet3.retainAll((java2.util2.Collection)list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test259"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.rotate(list2, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test260"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 100.0f+ "'", obj4.equals(100.0f));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test261"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list12);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection(collection13);
    boolean b15 = treeSet9.addAll(collection14);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet9);
    java2.util2.List list17 = java2.util2.Collections.singletonList((java.lang.Object)treeSet9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b18 = treeSet3.containsAll((java2.util2.Collection)list17);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test262"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java2.util2.Map map7 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)list5);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet11);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration(collection12);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration13);
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)list5, (java.lang.Object)arrayList15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list1, (java.lang.Object)list5);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test263"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 100, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test264"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet12 = treeSet3.tailSet((java.lang.Object)enumeration11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test265"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet9);
    boolean b13 = treeSet3.removeAll(collection12);
    java2.util2.Comparator comparator14 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj15 = java2.util2.Collections.min((java2.util2.Collection)treeSet3, comparator14);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator14);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test266"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)list3);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration(collection10);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.ArrayList arrayList13 = java2.util2.Collections.list(enumeration11);
    java2.util2.Map map14 = java2.util2.Collections.singletonMap((java.lang.Object)list3, (java.lang.Object)arrayList13);
    java2.util2.Map map15 = java2.util2.Collections.synchronizedMap(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test267"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 1, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test268"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list2, comparator3);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test269"); }


    java2.util2.Map map2 = java2.util2.Collections.singletonMap((java.lang.Object)100.0f, (java.lang.Object)(byte)1);
    java2.util2.Map map3 = java2.util2.Collections.unmodifiableMap(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test270"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    int i6 = java2.util2.Collections.indexOfSubList(list2, list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test271"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b8 = treeSet3.remove((java.lang.Object)true);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test272"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[true]");

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test273"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 0, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test274"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)arrayList7);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list8, comparator9);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test275"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)0.0f);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    java2.util2.Collection collection20 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet19);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration(collection20);
    java2.util2.Collection collection22 = java2.util2.Collections.unmodifiableCollection(collection20);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list24);
    java2.util2.Map map26 = java2.util2.Collections.singletonMap((java.lang.Object)collection20, (java.lang.Object)list24);
    boolean b27 = treeSet13.retainAll(collection20);
    boolean b28 = treeSet3.removeAll((java2.util2.Collection)treeSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test276"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    boolean b7 = treeSet5.add((java.lang.Object)(short)1);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    boolean b19 = treeSet17.add((java.lang.Object)(short)1);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    boolean b21 = treeSet11.removeAll(collection20);
    boolean b22 = treeSet5.removeAll(collection20);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)treeSet5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list1, list23);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test277"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list4 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list2, (java.lang.Object)list4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[10.0]");

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test278"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration(collection8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection(collection8);
    boolean b11 = treeSet3.addAll(collection8);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test279"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)true);
    boolean b6 = treeSet3.addAll((java2.util2.Collection)list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[true]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test280"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.Comparator comparator21 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj22 = java2.util2.Collections.min((java2.util2.Collection)treeSet3, comparator21);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator21);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test281"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    boolean b6 = treeSet3.retainAll((java2.util2.Collection)list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test282"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)list9);
    java2.util2.Collection collection11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet10);
    java2.util2.Enumeration enumeration12 = java2.util2.Collections.enumeration(collection11);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection(collection11);
    boolean b14 = treeSet6.addAll(collection11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i15 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)b14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test283"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)list2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)set3);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test284"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(-1.0d));
    java2.util2.Collections.shuffle(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test285"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java.lang.Object[] obj_array8 = treeSet7.toArray();
    java2.util2.List list9 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test286"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj5 = java2.util2.Collections.min(collection3, comparator4);
    java.lang.Object obj6 = java2.util2.Collections.min(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test287"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(-1.0d));
    java2.util2.List list2 = java2.util2.Collections.synchronizedList(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test288"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)list15);
    java.lang.Object[] obj_array17 = treeSet16.toArray();
    java2.util2.List list18 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list11, (java.lang.Object)treeSet16);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test289"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b9 = treeSet7.add((java.lang.Object)(short)1);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    boolean b17 = treeSet7.removeAll(collection16);
    boolean b18 = treeSet3.addAll(collection16);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection(collection16);
    java2.util2.Set set20 = java2.util2.Collections.singleton((java.lang.Object)collection19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj21 = java2.util2.Collections.max((java2.util2.Collection)set20);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test290"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Comparator comparator5 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = java2.util2.Collections.max((java2.util2.Collection)treeSet3, comparator5);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator5);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test291"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    int i4 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)"hi!", comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test292"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List list4 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i6 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)list4);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[10]");

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test293"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java.lang.String str3 = treeSet2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "[10.0]"+ "'", str3.equals("[10.0]"));

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test294"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Set set3 = java2.util2.Collections.singleton((java.lang.Object)list2);
    java2.util2.Set set4 = java2.util2.Collections.synchronizedSet(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test295"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java.lang.Object obj3 = treeSet2.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj3 + "' != '" + 10.0f+ "'", obj3.equals(10.0f));

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test296"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list6 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.reverse(list6);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test297"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)true);
    boolean b8 = treeSet3.retainAll((java2.util2.Collection)list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test298"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java.lang.Object obj4 = treeSet3.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (short)10+ "'", obj4.equals((short)10));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test299"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)0.0f);
    java.lang.Object[] obj_array16 = treeSet13.toArray();
    java.lang.Object[] obj_array17 = treeSet3.toArray(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test300"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)list9);
    boolean b12 = treeSet10.add((java.lang.Object)(short)1);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)list15);
    boolean b18 = treeSet16.add((java.lang.Object)(short)1);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet16);
    boolean b20 = treeSet10.removeAll(collection19);
    boolean b21 = treeSet6.addAll(collection19);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection(collection19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b23 = treeSet2.contains((java.lang.Object)collection22);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test301"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java.lang.Object[] obj_array7 = treeSet6.toArray();
    java2.util2.List list8 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.fill(list1, (java.lang.Object)treeSet6);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test302"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection(collection4);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection6);
    java2.util2.Set set8 = java2.util2.Collections.singleton((java.lang.Object)collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test303"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    boolean b6 = treeSet3.equals((java.lang.Object)list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test304"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list6 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i8 = java2.util2.Collections.binarySearch(list6, (java.lang.Object)1);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test305"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj5 = java2.util2.Collections.min(collection3, comparator4);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 100.0f+ "'", obj5.equals(100.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test306"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java.lang.Object[] obj_array13 = new java.lang.Object[] { false };
    java.lang.Object[] obj_array14 = treeSet9.toArray(obj_array13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.SortedSet sortedSet15 = treeSet3.headSet((java.lang.Object)obj_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test307"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test308"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.Collections.shuffle(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test309"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    java2.util2.Enumeration enumeration6 = java2.util2.Collections.enumeration(collection5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection(collection5);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(collection5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(10, (java.lang.Object)collection5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.reverse(list9);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test310"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration(collection6);
    java2.util2.ArrayList arrayList8 = java2.util2.Collections.list(enumeration7);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration7);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)arrayList9);
    int i11 = java2.util2.Collections.indexOfSubList(list1, list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test311"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)collection4, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map13 = java2.util2.Collections.unmodifiableMap(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test312"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection(collection4);
    java.lang.Object obj6 = java2.util2.Collections.min(collection5);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection5);
    java2.util2.List list10 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Comparator comparator11 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i12 = java2.util2.Collections.binarySearch(list7, (java.lang.Object)(short)10, comparator11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (short)10+ "'", obj6.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator11);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test313"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList8 = java2.util2.Collections.list(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList8);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test314"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)treeSet3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list21);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test315"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Collections.reverse(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test316"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration(collection7);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)arrayList10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list2, list11);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test317"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    java2.util2.Collection collection18 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet17);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration(collection18);
    java2.util2.Collection collection20 = java2.util2.Collections.unmodifiableCollection(collection18);
    boolean b21 = treeSet13.addAll(collection18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b22 = treeSet3.remove((java.lang.Object)treeSet13);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test318"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration(collection10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection(collection10);
    boolean b13 = treeSet5.addAll(collection10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i14 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)collection10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test319"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.Collections.rotate(list1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test320"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i3 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)(byte)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test321"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java.lang.Object[] obj_array9 = treeSet6.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b10 = treeSet2.remove((java.lang.Object)obj_array9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array9);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test322"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)list9);
    boolean b12 = treeSet10.add((java.lang.Object)(short)1);
    java2.util2.List list15 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)list15);
    boolean b18 = treeSet16.add((java.lang.Object)(short)1);
    java2.util2.List list21 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)list21);
    boolean b24 = treeSet22.add((java.lang.Object)(short)1);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet22);
    boolean b26 = treeSet16.removeAll(collection25);
    boolean b27 = treeSet10.removeAll(collection25);
    java2.util2.List list30 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)list30);
    java2.util2.Collection collection32 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet31);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration(collection32);
    java2.util2.Collection collection34 = java2.util2.Collections.unmodifiableCollection(collection32);
    boolean b35 = java2.util2.Collections.replaceAll(list6, (java.lang.Object)collection25, (java.lang.Object)collection32);
    boolean b36 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)10L, (java.lang.Object)b35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test323"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list8);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection(collection10);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection(collection10);
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)collection12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b14 = treeSet3.contains((java.lang.Object)collection12);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test324"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection(collection11);
    boolean b13 = treeSet7.addAll(collection12);
    boolean b14 = treeSet3.containsAll(collection12);
    java.lang.Object obj15 = java2.util2.Collections.max(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 100.0f+ "'", obj15.equals(100.0f));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test325"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test326"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    java2.util2.Enumeration enumeration6 = java2.util2.Collections.enumeration(collection5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection(collection5);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(collection5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(10, (java.lang.Object)collection5);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test327"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet13);
    boolean b16 = treeSet3.equals((java.lang.Object)treeSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test328"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list6 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet4);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)list6, comparator7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test329"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b7 = treeSet3.add((java.lang.Object)"[10.0]");
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test330"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)list23);
    boolean b26 = treeSet24.add((java.lang.Object)(short)1);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet24);
    boolean b28 = treeSet18.removeAll(collection27);
    boolean b29 = treeSet12.removeAll(collection27);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet((java2.util2.Collection)list32);
    java2.util2.Collection collection34 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration(collection34);
    java2.util2.Collection collection36 = java2.util2.Collections.unmodifiableCollection(collection34);
    boolean b37 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)collection27, (java.lang.Object)collection34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b38 = treeSet3.remove((java.lang.Object)b37);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test331"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.sort(list1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test332"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    int i6 = treeSet3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test333"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    boolean b9 = treeSet3.retainAll((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test334"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list9);
    java2.util2.Collection collection11 = java2.util2.Collections.unmodifiableCollection(collection10);
    boolean b12 = treeSet6.addAll(collection11);
    java2.util2.Iterator iterator13 = treeSet6.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i14 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)iterator13);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test335"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)list2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 0.0f+ "'", obj4.equals(0.0f));

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test336"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    java2.util2.Comparator comparator17 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj18 = java2.util2.Collections.min(collection16, comparator17);
    java2.util2.Collection collection19 = java2.util2.Collections.unmodifiableCollection(collection16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b20 = treeSet3.contains((java.lang.Object)collection16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)1+ "'", obj18.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test337"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    boolean b8 = treeSet6.add((java.lang.Object)(short)1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet12.removeAll(collection21);
    boolean b23 = treeSet6.removeAll(collection21);
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)list26);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet27);
    java2.util2.Enumeration enumeration29 = java2.util2.Collections.enumeration(collection28);
    java2.util2.Collection collection30 = java2.util2.Collections.unmodifiableCollection(collection28);
    boolean b31 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)collection21, (java.lang.Object)collection28);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test338"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)collection10);
    boolean b12 = treeSet3.removeAll((java2.util2.Collection)list11);
    java2.util2.List list14 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    int i15 = java2.util2.Collections.indexOfSubList(list11, list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test339"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.Collections.rotate(list1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test340"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list5);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection(collection7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b9 = treeSet2.add((java.lang.Object)collection7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test341"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)(byte)100);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection(collection9);
    boolean b11 = treeSet5.addAll(collection10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)treeSet5);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list1, list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test342"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.SortedSet sortedSet10 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet10);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test343"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"");
    java2.util2.List list3 = java2.util2.Collections.singletonList((java.lang.Object)true);
    int i4 = java2.util2.Collections.indexOfSubList(list1, list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == (-1));

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test344"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java.lang.Object[] obj_array5 = treeSet4.toArray();
    java2.util2.List list6 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list6, 10, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test345"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    java2.util2.Enumeration enumeration3 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration3);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test346"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, (-1), 1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test347"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet3);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj8 = java2.util2.Collections.max((java2.util2.Collection)treeSet3, comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + (short)1+ "'", obj8.equals((short)1));

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test348"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test349"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Map map8 = java2.util2.Collections.singletonMap((java.lang.Object)true, (java.lang.Object)(-1.0f));
    java2.util2.Set set9 = java2.util2.Collections.singleton((java.lang.Object)true);
    java.lang.Object obj10 = new java.lang.Object();
    boolean b11 = java2.util2.Collections.replaceAll(list5, (java.lang.Object)set9, obj10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b12 = treeSet3.contains((java.lang.Object)set9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test350"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list2 = java2.util2.Collections.singletonList((java.lang.Object)list1);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.Map map8 = java2.util2.Collections.singletonMap((java.lang.Object)"", (java.lang.Object)list6);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet12);
    java2.util2.Enumeration enumeration14 = java2.util2.Collections.enumeration(collection13);
    java2.util2.ArrayList arrayList15 = java2.util2.Collections.list(enumeration14);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration14);
    java2.util2.Map map17 = java2.util2.Collections.singletonMap((java.lang.Object)list6, (java.lang.Object)arrayList16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i18 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)map17);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test351"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    boolean b19 = treeSet17.add((java.lang.Object)(short)1);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    boolean b21 = treeSet11.removeAll(collection20);
    boolean b22 = treeSet7.addAll(collection20);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection(collection20);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(collection20);
    boolean b25 = treeSet3.addAll(collection20);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test352"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.List list23 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet((java2.util2.Collection)list23);
    boolean b26 = treeSet24.add((java.lang.Object)(short)1);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet24);
    boolean b28 = treeSet18.removeAll(collection27);
    boolean b29 = treeSet12.removeAll(collection27);
    java2.util2.List list32 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet((java2.util2.Collection)list32);
    java2.util2.Collection collection34 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet33);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration(collection34);
    java2.util2.Collection collection36 = java2.util2.Collections.unmodifiableCollection(collection34);
    boolean b37 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)collection27, (java.lang.Object)collection34);
    boolean b38 = treeSet3.retainAll(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test353"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet9);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration(collection10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection(collection10);
    java2.util2.List list14 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list14);
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)collection10, (java.lang.Object)list14);
    java2.util2.Map map17 = java2.util2.Collections.synchronizedMap(map16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b18 = treeSet3.remove((java.lang.Object)map16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test354"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)collection4, (java.lang.Object)list8);
    java2.util2.Map map11 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map12 = java2.util2.Collections.synchronizedMap(map10);
    java2.util2.Map map13 = java2.util2.Collections.synchronizedMap(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test355"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Iterator iterator4 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test356"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)0.0f);
    java.lang.String str6 = treeSet3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[0.0]"+ "'", str6.equals("[0.0]"));

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test357"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(collection4);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection(collection4);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj10 = java2.util2.Collections.min(collection4, comparator9);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test358"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)list1);
    java2.util2.Iterator iterator3 = treeSet2.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test359"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    boolean b19 = treeSet17.add((java.lang.Object)(short)1);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    boolean b21 = treeSet11.removeAll(collection20);
    boolean b22 = treeSet7.addAll(collection20);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection(collection20);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(collection20);
    boolean b25 = treeSet3.addAll(collection20);
    java2.util2.List list28 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list28);
    java2.util2.Collection collection30 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list28);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection(collection30);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection(collection30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b33 = treeSet3.add((java.lang.Object)collection30);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1, 10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test360"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration(collection7);
    java2.util2.Collection collection9 = java2.util2.Collections.unmodifiableCollection(collection7);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(collection7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(10, (java.lang.Object)collection7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.copy(list1, list11);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test361"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    java2.util2.Enumeration enumeration6 = java2.util2.Collections.enumeration(collection5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection(collection5);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(collection5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(10, (java.lang.Object)collection5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)list9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test362"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.Set set10 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test363"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list2, 10, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test364"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list5 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)list5);
    java.lang.Object[] obj_array7 = treeSet6.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b8 = treeSet3.add((java.lang.Object)treeSet6);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[10.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test365"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list2, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test366"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.List list20 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet((java2.util2.Collection)list20);
    java.lang.Object[] obj_array23 = new java.lang.Object[] { 1.0f };
    java.lang.Object[] obj_array24 = treeSet21.toArray(obj_array23);
    java.lang.Object[] obj_array25 = treeSet15.toArray(obj_array23);
    java.lang.Object[] obj_array26 = treeSet9.toArray(obj_array23);
    java.lang.Object[] obj_array27 = treeSet3.toArray(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test367"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    java2.util2.Collection collection10 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet9);
    boolean b11 = treeSet3.equals((java.lang.Object)collection10);
    java.lang.Object obj12 = java2.util2.Collections.max((java2.util2.Collection)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)1+ "'", obj12.equals((short)1));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test368"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    boolean b7 = treeSet5.add((java.lang.Object)(short)1);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet11);
    boolean b15 = treeSet5.removeAll(collection14);
    java2.util2.Comparator comparator16 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj17 = java2.util2.Collections.min(collection14, comparator16);
    java2.util2.Comparator comparator18 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i19 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)collection14, comparator18);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + (short)1+ "'", obj17.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator18);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test369"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.List list4 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)list4);
    boolean b7 = treeSet5.add((java.lang.Object)0.0f);
    java2.util2.Iterator iterator8 = treeSet5.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int i9 = java2.util2.Collections.binarySearch(list1, (java.lang.Object)treeSet5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test370"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    boolean b9 = treeSet7.add((java.lang.Object)(short)1);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    boolean b17 = treeSet7.removeAll(collection16);
    boolean b18 = treeSet3.addAll(collection16);
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(collection16);
    java2.util2.Collection collection20 = java2.util2.Collections.unmodifiableCollection(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test371"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    boolean b19 = treeSet17.add((java.lang.Object)(short)1);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    boolean b21 = treeSet11.removeAll(collection20);
    boolean b22 = treeSet7.addAll(collection20);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection(collection20);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(collection20);
    boolean b25 = treeSet3.addAll(collection20);
    java2.util2.List list28 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet((java2.util2.Collection)list28);
    boolean b31 = treeSet29.add((java.lang.Object)0.0f);
    java2.util2.List list34 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet((java2.util2.Collection)list34);
    java2.util2.Collection collection36 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet35);
    java2.util2.Enumeration enumeration37 = java2.util2.Collections.enumeration(collection36);
    java2.util2.Collection collection38 = java2.util2.Collections.unmodifiableCollection(collection36);
    java2.util2.List list40 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list40);
    java2.util2.Map map42 = java2.util2.Collections.singletonMap((java.lang.Object)collection36, (java.lang.Object)list40);
    boolean b43 = treeSet29.retainAll(collection36);
    boolean b44 = treeSet3.equals((java.lang.Object)b43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1, 10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test372"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.List list7 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.Collection)list7);
    boolean b10 = treeSet8.add((java.lang.Object)(short)1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet((java2.util2.Collection)list13);
    boolean b16 = treeSet14.add((java.lang.Object)(short)1);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    boolean b18 = treeSet8.removeAll(collection17);
    boolean b19 = treeSet4.addAll(collection17);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection(collection17);
    java2.util2.Set set21 = java2.util2.Collections.singleton((java.lang.Object)collection20);
    java2.util2.Comparator comparator22 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj23 = java2.util2.Collections.max(collection20, comparator22);
    java2.util2.List list24 = java2.util2.Collections.nCopies(100, (java.lang.Object)comparator22);
    java2.util2.List list27 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    int i28 = java2.util2.Collections.lastIndexOfSubList(list24, list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + (short)1+ "'", obj23.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 100);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test373"); }


    java2.util2.List list3 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)list3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    java2.util2.Enumeration enumeration6 = java2.util2.Collections.enumeration(collection5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection(collection5);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(collection5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(10, (java.lang.Object)collection5);
    java2.util2.List list10 = java2.util2.Collections.singletonList((java.lang.Object)list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test374"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection(collection4);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)true);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    java2.util2.Map map10 = java2.util2.Collections.singletonMap((java.lang.Object)collection4, (java.lang.Object)list8);
    java2.util2.Collection collection11 = java2.util2.Collections.unmodifiableCollection(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test375"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)collection10);
    boolean b12 = treeSet3.removeAll((java2.util2.Collection)list11);
    java2.util2.Collections.reverse(list11);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test376"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list15 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list18 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet((java2.util2.Collection)list18);
    boolean b21 = treeSet19.add((java.lang.Object)(short)1);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet19);
    java2.util2.Comparator comparator23 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj24 = java2.util2.Collections.min(collection22, comparator23);
    java2.util2.Collection collection25 = java2.util2.Collections.unmodifiableCollection(collection22);
    boolean b26 = java2.util2.Collections.replaceAll(list12, (java.lang.Object)list15, (java.lang.Object)collection25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b27 = treeSet3.retainAll(collection25);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)1+ "'", obj24.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test377"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.reverse(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test378"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection(collection7);
    boolean b9 = treeSet3.addAll(collection8);
    java.lang.Object obj10 = treeSet3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[100.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test379"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    boolean b19 = treeSet17.add((java.lang.Object)(short)1);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    boolean b21 = treeSet11.removeAll(collection20);
    boolean b22 = treeSet7.addAll(collection20);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection(collection20);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(collection20);
    boolean b25 = treeSet3.addAll(collection20);
    java.lang.Object obj26 = java2.util2.Collections.min(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1, 10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + (short)1+ "'", obj26.equals((short)1));

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test380"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list9 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)list9);
    java2.util2.Collection collection11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet10);
    java2.util2.Enumeration enumeration12 = java2.util2.Collections.enumeration(collection11);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection(collection11);
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(collection11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(10, (java.lang.Object)collection11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean b16 = treeSet3.containsAll((java2.util2.Collection)list15);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test381"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)collection10);
    boolean b12 = treeSet3.removeAll((java2.util2.Collection)list11);
    java2.util2.Collections.shuffle(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test382"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection(collection4);
    java.lang.Object obj7 = java2.util2.Collections.max(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (short)10+ "'", obj7.equals((short)10));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test383"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet((java2.util2.Collection)list6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet((java2.util2.Collection)list10);
    boolean b13 = treeSet11.add((java.lang.Object)(short)1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet((java2.util2.Collection)list16);
    boolean b19 = treeSet17.add((java.lang.Object)(short)1);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    boolean b21 = treeSet11.removeAll(collection20);
    boolean b22 = treeSet7.addAll(collection20);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection(collection20);
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(collection20);
    boolean b25 = treeSet3.addAll(collection20);
    java.lang.Object[] obj_array26 = treeSet3.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[1, 10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array26);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test384"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection(collection4);
    java.lang.Object obj6 = java2.util2.Collections.min(collection5);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection5);
    java2.util2.List list9 = java2.util2.Collections.singletonList((java.lang.Object)10.0f);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list7, list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (short)10+ "'", obj6.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test385"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection8);
    boolean b10 = treeSet3.add((java.lang.Object)collection9);
    java2.util2.Iterator iterator11 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test386"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)arrayList7);
    java2.util2.List list11 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)list11);
    boolean b14 = treeSet12.add((java.lang.Object)(short)1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list17);
    boolean b20 = treeSet18.add((java.lang.Object)(short)1);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet12.removeAll(collection21);
    java2.util2.Comparator comparator23 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj24 = java2.util2.Collections.min(collection21, comparator23);
    java2.util2.Collections.fill((java2.util2.List)arrayList7, (java.lang.Object)comparator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + (short)1+ "'", obj24.equals((short)1));

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test387"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection(collection3);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection(collection4);
    java.lang.Object obj6 = java2.util2.Collections.max(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 100.0f+ "'", obj6.equals(100.0f));

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test388"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(collection4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object obj6 = java2.util2.Collections.min(collection4);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test389"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    boolean b5 = treeSet3.add((java.lang.Object)(short)1);
    java2.util2.List list8 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    boolean b11 = treeSet9.add((java.lang.Object)(short)1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)list14);
    boolean b17 = treeSet15.add((java.lang.Object)(short)1);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b19 = treeSet9.removeAll(collection18);
    boolean b20 = treeSet3.removeAll(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)collection18);
    java2.util2.Comparator comparator22 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj23 = java2.util2.Collections.max(collection18, comparator22);
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + (short)1+ "'", obj23.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test390"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)100.0f);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list12 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet((java2.util2.Collection)list12);
    boolean b15 = treeSet13.add((java.lang.Object)(short)1);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    java2.util2.Comparator comparator17 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj18 = java2.util2.Collections.min(collection16, comparator17);
    java2.util2.Collection collection19 = java2.util2.Collections.unmodifiableCollection(collection16);
    boolean b20 = java2.util2.Collections.replaceAll(list6, (java.lang.Object)list9, (java.lang.Object)collection19);
    java2.util2.SortedSet sortedSet21 = treeSet3.headSet((java.lang.Object)b20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (short)1+ "'", obj18.equals((short)1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet21);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test391"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet3);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration(collection4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)arrayList7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java2.util2.Collections.swap(list8, 10, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test392"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection3 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list2);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection(collection4);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection(collection4);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection6);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList(list7);
    java2.util2.List list9 = java2.util2.Collections.synchronizedList(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test393"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection(collection8);
    java2.util2.List list11 = java2.util2.Collections.singletonList((java.lang.Object)collection10);
    boolean b12 = treeSet3.removeAll((java2.util2.Collection)list11);
    java2.util2.List list13 = java2.util2.Collections.unmodifiableList(list11);
    java2.util2.List list16 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection17 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list16);
    java2.util2.Collection collection18 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list16);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection(collection18);
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection(collection18);
    java2.util2.List list21 = java2.util2.Collections.singletonList((java.lang.Object)collection20);
    int i22 = java2.util2.Collections.lastIndexOfSubList(list11, list21);
    java2.util2.List list26 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)list26);
    java.lang.Object[] obj_array28 = treeSet27.toArray();
    java2.util2.List list29 = java2.util2.Collections.nCopies(100, (java.lang.Object)treeSet27);
    int i30 = java2.util2.Collections.lastIndexOfSubList(list21, list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test394"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(0, (java.lang.Object)(-1.0d));
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list6);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection8);
    boolean b10 = treeSet3.add((java.lang.Object)collection9);
    boolean b12 = treeSet3.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[[10]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test395"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)(short)10);
    java2.util2.List list3 = java2.util2.Collections.synchronizedList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

}
