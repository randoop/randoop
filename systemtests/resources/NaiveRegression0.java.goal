package foo.bar;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class NaiveRegression0 {

  public static boolean debug = false;

  @Test
  public void test01() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test01"); }


    java2.util2.Set set0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Set set1 = java2.util2.Collections.unmodifiableSet(set0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test02() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test02"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.List list1 = java2.util2.Collections.unmodifiableList(list0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test03() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test03"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.reverse(list0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test04() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test04"); }


    java2.util2.List list0 = null;
    java2.util2.List list1 = null;
    // The following exception was thrown during execution in test generation
    try {
      int i2 = java2.util2.Collections.lastIndexOfSubList(list0, list1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test05() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test05"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(100, (java.lang.Object)(-1.0d));
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list2, 1, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test06() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test06"); }


    java2.util2.List list0 = null;
    java2.util2.Comparator comparator2 = null;
    // The following exception was thrown during execution in test generation
    try {
      int i3 = java2.util2.Collections.binarySearch(list0, (java.lang.Object)"", comparator2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test07() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test07"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.Collections.shuffle((java2.util2.List)arrayList0);

  }

  @Test
  public void test08() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test08"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj2 = arrayList0.get((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test09() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test09"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.Enumeration enumeration1 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList0);
    java2.util2.ListIterator listIterator2 = arrayList0.listIterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(listIterator2);

  }

  @Test
  public void test10() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test10"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.Enumeration enumeration1 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList0);
    java2.util2.List list2 = null;
    // The following exception was thrown during execution in test generation
    try {
      int i3 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList0, list2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration1);

  }

  @Test
  public void test11() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test11"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    java.lang.Object[] obj_array3 = arrayList1.toArray();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList4, (java.lang.Object)(byte)0);
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList1, (java2.util2.List)linkedList4);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj9 = linkedList4.get(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test12() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test12"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    arrayList0.trimToSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test13() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test13"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array2 = new java.lang.Object[] { arrayList1 };
    java.lang.Object[] obj_array3 = linkedList0.toArray(obj_array2);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i6 = linkedList4.indexOf((java.lang.Object)(short)10);
    linkedList4.addLast((java.lang.Object)(short)1);
    boolean b9 = linkedList0.retainAll((java2.util2.Collection)linkedList4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test14() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test14"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i8 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList6, (java.lang.Object)(byte)0);
    int i9 = linkedList0.indexOf((java.lang.Object)linkedList6);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj10 = linkedList6.removeFirst();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test15() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test15"); }


    java2.util2.Set set0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Set set1 = java2.util2.Collections.synchronizedSet(set0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test16() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test16"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    java.lang.Object[] obj_array3 = arrayList1.toArray();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList4, (java.lang.Object)(byte)0);
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList1, (java2.util2.List)linkedList4);
    java2.util2.ArrayList arrayList9 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList10 = new java2.util2.ArrayList();
    boolean b11 = arrayList9.removeAll((java2.util2.Collection)arrayList10);
    java.lang.Object[] obj_array12 = arrayList10.toArray();
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList13, (java.lang.Object)(byte)0);
    int i16 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList10, (java2.util2.List)linkedList13);
    boolean b17 = linkedList4.addAll(1, (java2.util2.Collection)arrayList10);
    java2.util2.Comparator comparator18 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj19 = java2.util2.Collections.max((java2.util2.Collection)linkedList4, comparator18);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test17() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test17"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i5 = linkedList3.indexOf((java.lang.Object)(short)10);
    linkedList3.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList8 = new java2.util2.ArrayList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList();
    int i11 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList9, (java.lang.Object)(byte)0);
    int i12 = linkedList3.indexOf((java.lang.Object)linkedList9);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList14 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array15 = new java.lang.Object[] { arrayList14 };
    java.lang.Object[] obj_array16 = linkedList13.toArray(obj_array15);
    java.lang.Object[] obj_array17 = linkedList3.toArray(obj_array16);
    boolean b18 = linkedList0.retainAll((java2.util2.Collection)linkedList3);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.ListIterator listIterator20 = linkedList0.listIterator(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test18() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test18"); }


    // The following exception was thrown during execution in test generation
    try {
      java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test19() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test19"); }


    java2.util2.SortedMap sortedMap0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedMap sortedMap1 = java2.util2.Collections.unmodifiableSortedMap(sortedMap0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test20() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test20"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i8 = linkedList6.indexOf((java.lang.Object)(short)10);
    linkedList6.addLast((java.lang.Object)(short)1);
    boolean b11 = arrayList5.removeAll((java2.util2.Collection)linkedList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test21() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test21"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i6 = linkedList4.indexOf((java.lang.Object)(short)10);
    linkedList4.addLast((java.lang.Object)(short)1);
    java2.util2.Collections.fill((java2.util2.List)linkedList4, (java.lang.Object)10.0f);
    java2.util2.ArrayList arrayList11 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList12 = new java2.util2.ArrayList();
    boolean b13 = arrayList11.removeAll((java2.util2.Collection)arrayList12);
    java.lang.Object[] obj_array14 = arrayList12.toArray();
    int i15 = arrayList12.size();
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet16 = treeSet3.subSet((java.lang.Object)10.0f, (java.lang.Object)arrayList12);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test22() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test22"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.Collections.fill((java2.util2.List)linkedList0, (java.lang.Object)10.0f);
    java.lang.Object[] obj_array7 = null;
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object[] obj_array8 = linkedList0.toArray(obj_array7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test23() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test23"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i5 = linkedList3.indexOf((java.lang.Object)(short)10);
    linkedList3.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList8 = new java2.util2.ArrayList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList();
    int i11 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList9, (java.lang.Object)(byte)0);
    int i12 = linkedList3.indexOf((java.lang.Object)linkedList9);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList14 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array15 = new java.lang.Object[] { arrayList14 };
    java.lang.Object[] obj_array16 = linkedList13.toArray(obj_array15);
    java.lang.Object[] obj_array17 = linkedList3.toArray(obj_array16);
    boolean b18 = linkedList0.retainAll((java2.util2.Collection)linkedList3);
    boolean b20 = linkedList3.contains((java.lang.Object)10);
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList22 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array23 = new java.lang.Object[] { arrayList22 };
    java.lang.Object[] obj_array24 = linkedList21.toArray(obj_array23);
    java.lang.Object[] obj_array25 = linkedList3.toArray(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);

  }

  @Test
  public void test24() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test24"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array2 = new java.lang.Object[] { arrayList1 };
    java.lang.Object[] obj_array3 = linkedList0.toArray(obj_array2);
    java.lang.Object obj4 = null;
    boolean b5 = linkedList0.remove(obj4);
    java2.util2.LinkedList linkedList7 = new java2.util2.LinkedList();
    int i9 = linkedList7.indexOf((java.lang.Object)(short)10);
    linkedList7.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList12 = new java2.util2.ArrayList((java2.util2.Collection)linkedList7);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    int i15 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList13, (java.lang.Object)(byte)0);
    int i16 = linkedList7.indexOf((java.lang.Object)linkedList13);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList18 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array19 = new java.lang.Object[] { arrayList18 };
    java.lang.Object[] obj_array20 = linkedList17.toArray(obj_array19);
    java.lang.Object[] obj_array21 = linkedList7.toArray(obj_array20);
    linkedList0.add(0, (java.lang.Object)obj_array21);
    java2.util2.LinkedList linkedList23 = new java2.util2.LinkedList();
    boolean b24 = linkedList0.addAll((java2.util2.Collection)linkedList23);
    java.lang.Object obj25 = linkedList0.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);

  }

  @Test
  public void test25() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test25"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    java.lang.Object[] obj_array3 = arrayList1.toArray();
    int i4 = arrayList1.size();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i7 = linkedList5.indexOf((java.lang.Object)(short)10);
    linkedList5.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList10 = new java2.util2.ArrayList((java2.util2.Collection)linkedList5);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    int i13 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList11, (java.lang.Object)(byte)0);
    int i14 = linkedList5.indexOf((java.lang.Object)linkedList11);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList16 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array17 = new java.lang.Object[] { arrayList16 };
    java.lang.Object[] obj_array18 = linkedList15.toArray(obj_array17);
    java.lang.Object[] obj_array19 = linkedList5.toArray(obj_array18);
    java.lang.Object[] obj_array20 = arrayList1.toArray(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);

  }

  @Test
  public void test26() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test26"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    java.lang.Object[] obj_array3 = arrayList1.toArray();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList4, (java.lang.Object)(byte)0);
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList1, (java2.util2.List)linkedList4);
    java.lang.Object[] obj_array8 = arrayList1.toArray();
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList();
    int i11 = linkedList9.indexOf((java.lang.Object)(short)10);
    linkedList9.addLast((java.lang.Object)(short)1);
    java2.util2.Collections.fill((java2.util2.List)linkedList9, (java.lang.Object)10.0f);
    boolean b16 = linkedList9.isEmpty();
    boolean b17 = arrayList1.contains((java.lang.Object)b16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test27() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test27"); }


    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList2 = new java2.util2.ArrayList();
    boolean b3 = arrayList1.removeAll((java2.util2.Collection)arrayList2);
    java2.util2.Map map4 = java2.util2.Collections.singletonMap((java.lang.Object)(short)100, (java.lang.Object)b3);
    java2.util2.Map map5 = java2.util2.Collections.synchronizedMap(map4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);

  }

  @Test
  public void test28() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test28"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.LinkedList linkedList3 = new java2.util2.LinkedList();
    int i5 = linkedList3.indexOf((java.lang.Object)(short)10);
    linkedList3.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList8 = new java2.util2.ArrayList((java2.util2.Collection)linkedList3);
    java2.util2.LinkedList linkedList9 = new java2.util2.LinkedList();
    int i11 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList9, (java.lang.Object)(byte)0);
    int i12 = linkedList3.indexOf((java.lang.Object)linkedList9);
    java2.util2.LinkedList linkedList13 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList14 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array15 = new java.lang.Object[] { arrayList14 };
    java.lang.Object[] obj_array16 = linkedList13.toArray(obj_array15);
    java.lang.Object[] obj_array17 = linkedList3.toArray(obj_array16);
    boolean b18 = linkedList0.retainAll((java2.util2.Collection)linkedList3);
    boolean b20 = linkedList3.contains((java.lang.Object)10);
    java2.util2.Random random21 = null;
    java2.util2.Collections.shuffle((java2.util2.List)linkedList3, random21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test29() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test29"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i8 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList6, (java.lang.Object)(byte)0);
    int i9 = linkedList0.indexOf((java.lang.Object)linkedList6);
    java2.util2.LinkedList linkedList10 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList11 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array12 = new java.lang.Object[] { arrayList11 };
    java.lang.Object[] obj_array13 = linkedList10.toArray(obj_array12);
    java.lang.Object[] obj_array14 = linkedList0.toArray(obj_array13);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    int i17 = linkedList15.indexOf((java.lang.Object)(short)10);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    int i20 = linkedList18.indexOf((java.lang.Object)(short)10);
    linkedList18.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList23 = new java2.util2.ArrayList((java2.util2.Collection)linkedList18);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    int i26 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList24, (java.lang.Object)(byte)0);
    int i27 = linkedList18.indexOf((java.lang.Object)linkedList24);
    java2.util2.LinkedList linkedList28 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList29 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array30 = new java.lang.Object[] { arrayList29 };
    java.lang.Object[] obj_array31 = linkedList28.toArray(obj_array30);
    java.lang.Object[] obj_array32 = linkedList18.toArray(obj_array31);
    boolean b33 = linkedList15.retainAll((java2.util2.Collection)linkedList18);
    boolean b35 = linkedList18.contains((java.lang.Object)10);
    int i37 = linkedList18.lastIndexOf((java.lang.Object)100.0f);
    java2.util2.Map map38 = java2.util2.Collections.singletonMap((java.lang.Object)obj_array14, (java.lang.Object)i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map38);

  }

  @Test
  public void test30() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test30"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Set set5 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set5);

  }

  @Test
  public void test31() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test31"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList6 = new java2.util2.ArrayList();
    boolean b7 = arrayList5.removeAll((java2.util2.Collection)arrayList6);
    java.lang.Object[] obj_array8 = arrayList6.toArray();
    int i9 = arrayList6.size();
    boolean b10 = treeSet3.removeAll((java2.util2.Collection)arrayList6);
    arrayList6.ensureCapacity(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test32() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test32"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java.lang.Object obj5 = linkedList0.getLast();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + (short)1+ "'", obj5.equals((short)1));

  }

  @Test
  public void test33() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test33"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.Enumeration enumeration1 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList0);
    boolean b2 = arrayList0.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = arrayList0.remove(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test34() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test34"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList0, (java.lang.Object)(byte)0);
    java2.util2.Comparator comparator3 = null;
    java2.util2.Collections.sort((java2.util2.List)linkedList0, comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test35() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test35"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList6 = new java2.util2.ArrayList();
    boolean b7 = arrayList5.removeAll((java2.util2.Collection)arrayList6);
    java.lang.Object[] obj_array8 = arrayList6.toArray();
    int i9 = arrayList6.size();
    java2.util2.LinkedList linkedList10 = new java2.util2.LinkedList();
    int i12 = linkedList10.indexOf((java.lang.Object)(short)10);
    linkedList10.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList15 = new java2.util2.ArrayList((java2.util2.Collection)linkedList10);
    java2.util2.LinkedList linkedList16 = new java2.util2.LinkedList();
    int i18 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList16, (java.lang.Object)(byte)0);
    int i19 = linkedList10.indexOf((java.lang.Object)linkedList16);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList21 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array22 = new java.lang.Object[] { arrayList21 };
    java.lang.Object[] obj_array23 = linkedList20.toArray(obj_array22);
    java.lang.Object[] obj_array24 = linkedList10.toArray(obj_array23);
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList();
    int i27 = linkedList25.indexOf((java.lang.Object)(short)10);
    linkedList25.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList30 = new java2.util2.ArrayList((java2.util2.Collection)linkedList25);
    java2.util2.LinkedList linkedList31 = new java2.util2.LinkedList();
    int i33 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList31, (java.lang.Object)(byte)0);
    int i34 = linkedList25.indexOf((java.lang.Object)linkedList31);
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList36 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array37 = new java.lang.Object[] { arrayList36 };
    java.lang.Object[] obj_array38 = linkedList35.toArray(obj_array37);
    java.lang.Object[] obj_array39 = linkedList25.toArray(obj_array38);
    int i40 = linkedList10.indexOf((java.lang.Object)obj_array39);
    int i41 = arrayList6.indexOf((java.lang.Object)linkedList10);
    java2.util2.Comparator comparator43 = null;
    int i44 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList6, (java.lang.Object)(byte)0, comparator43);
    java2.util2.Collections.fill((java2.util2.List)linkedList0, (java.lang.Object)comparator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == (-1));

  }

  @Test
  public void test36() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test36"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    java.lang.Object[] obj_array3 = arrayList1.toArray();
    java2.util2.LinkedList linkedList4 = new java2.util2.LinkedList();
    int i6 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList4, (java.lang.Object)(byte)0);
    int i7 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList1, (java2.util2.List)linkedList4);
    java2.util2.ArrayList arrayList9 = new java2.util2.ArrayList();
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList9);
    boolean b11 = arrayList9.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      boolean b12 = arrayList1.addAll(1, (java2.util2.Collection)arrayList9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test37() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test37"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    java.lang.Object[] obj_array3 = arrayList1.toArray();
    int i4 = arrayList1.size();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i7 = linkedList5.indexOf((java.lang.Object)(short)10);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    int i10 = linkedList8.indexOf((java.lang.Object)(short)10);
    linkedList8.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList13 = new java2.util2.ArrayList((java2.util2.Collection)linkedList8);
    java2.util2.LinkedList linkedList14 = new java2.util2.LinkedList();
    int i16 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList14, (java.lang.Object)(byte)0);
    int i17 = linkedList8.indexOf((java.lang.Object)linkedList14);
    java2.util2.LinkedList linkedList18 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList19 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array20 = new java.lang.Object[] { arrayList19 };
    java.lang.Object[] obj_array21 = linkedList18.toArray(obj_array20);
    java.lang.Object[] obj_array22 = linkedList8.toArray(obj_array21);
    boolean b23 = linkedList5.retainAll((java2.util2.Collection)linkedList8);
    boolean b25 = linkedList8.contains((java.lang.Object)10);
    java2.util2.Collections.fill((java2.util2.List)arrayList1, (java.lang.Object)linkedList8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test38() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test38"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    boolean b6 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.SortedSet sortedSet7 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.ArrayList arrayList8 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList9 = new java2.util2.ArrayList();
    boolean b10 = arrayList8.removeAll((java2.util2.Collection)arrayList9);
    java.lang.Object[] obj_array11 = arrayList9.toArray();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    int i14 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList12, (java.lang.Object)(byte)0);
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)linkedList12);
    java2.util2.ArrayList arrayList17 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList18 = new java2.util2.ArrayList();
    boolean b19 = arrayList17.removeAll((java2.util2.Collection)arrayList18);
    java.lang.Object[] obj_array20 = arrayList18.toArray();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList();
    int i23 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList21, (java.lang.Object)(byte)0);
    int i24 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList18, (java2.util2.List)linkedList21);
    boolean b25 = linkedList12.addAll(1, (java2.util2.Collection)arrayList18);
    boolean b26 = treeSet3.removeAll((java2.util2.Collection)linkedList12);
    treeSet3.clear();
    java2.util2.LinkedList linkedList28 = new java2.util2.LinkedList();
    int i30 = linkedList28.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet((java2.util2.Collection)linkedList28);
    java2.util2.SortedSet sortedSet32 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    boolean b34 = treeSet31.add((java.lang.Object)0.0f);
    boolean b35 = treeSet31.isEmpty();
    boolean b36 = treeSet3.addAll((java2.util2.Collection)treeSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test39() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test39"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.Collections.fill((java2.util2.List)linkedList0, (java.lang.Object)10.0f);
    boolean b7 = linkedList0.isEmpty();
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)linkedList0);
    boolean b10 = linkedList0.remove((java.lang.Object)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test40() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test40"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList6 = new java2.util2.ArrayList();
    boolean b7 = arrayList5.removeAll((java2.util2.Collection)arrayList6);
    java.lang.Object[] obj_array8 = arrayList6.toArray();
    int i9 = arrayList6.size();
    boolean b10 = treeSet3.removeAll((java2.util2.Collection)arrayList6);
    java2.util2.Comparator comparator11 = treeSet3.comparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator11);

  }

  @Test
  public void test41() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test41"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.Collections.shuffle((java2.util2.List)linkedList0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));

  }

  @Test
  public void test42() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test42"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i8 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList6, (java.lang.Object)(byte)0);
    int i9 = linkedList0.indexOf((java.lang.Object)linkedList6);
    java2.util2.LinkedList linkedList10 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList11 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array12 = new java.lang.Object[] { arrayList11 };
    java.lang.Object[] obj_array13 = linkedList10.toArray(obj_array12);
    java.lang.Object[] obj_array14 = linkedList0.toArray(obj_array13);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    int i17 = linkedList15.indexOf((java.lang.Object)(short)10);
    linkedList15.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList20 = new java2.util2.ArrayList((java2.util2.Collection)linkedList15);
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList();
    int i23 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList21, (java.lang.Object)(byte)0);
    int i24 = linkedList15.indexOf((java.lang.Object)linkedList21);
    java2.util2.LinkedList linkedList25 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList26 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array27 = new java.lang.Object[] { arrayList26 };
    java.lang.Object[] obj_array28 = linkedList25.toArray(obj_array27);
    java.lang.Object[] obj_array29 = linkedList15.toArray(obj_array28);
    int i30 = linkedList0.indexOf((java.lang.Object)obj_array29);
    java2.util2.ArrayList arrayList31 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList32 = new java2.util2.ArrayList();
    boolean b33 = arrayList31.removeAll((java2.util2.Collection)arrayList32);
    java.lang.Object[] obj_array34 = arrayList32.toArray();
    java2.util2.LinkedList linkedList35 = new java2.util2.LinkedList();
    int i37 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList35, (java.lang.Object)(byte)0);
    int i38 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList32, (java2.util2.List)linkedList35);
    boolean b39 = linkedList0.equals((java.lang.Object)linkedList35);
    java2.util2.ArrayList arrayList40 = new java2.util2.ArrayList();
    java2.util2.Enumeration enumeration41 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList40);
    boolean b42 = arrayList40.isEmpty();
    java2.util2.LinkedList linkedList43 = new java2.util2.LinkedList();
    int i45 = linkedList43.indexOf((java.lang.Object)(short)10);
    linkedList43.addLast((java.lang.Object)(short)1);
    java2.util2.Collections.fill((java2.util2.List)linkedList43, (java.lang.Object)10.0f);
    boolean b50 = arrayList40.containsAll((java2.util2.Collection)linkedList43);
    boolean b51 = linkedList0.addAll((java2.util2.Collection)arrayList40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test43() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test43"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    linkedList0.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList((java2.util2.Collection)linkedList0);
    java2.util2.LinkedList linkedList6 = new java2.util2.LinkedList();
    int i8 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList6, (java.lang.Object)(byte)0);
    int i9 = linkedList0.indexOf((java.lang.Object)linkedList6);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList((java2.util2.List)linkedList0);
    java2.util2.Comparator comparator11 = null;
    java.lang.Object obj12 = java2.util2.Collections.min((java2.util2.Collection)linkedList0, comparator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (short)1+ "'", obj12.equals((short)1));

  }

  @Test
  public void test44() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test44"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList6 = new java2.util2.ArrayList();
    boolean b7 = arrayList5.removeAll((java2.util2.Collection)arrayList6);
    java.lang.Object[] obj_array8 = arrayList6.toArray();
    int i9 = arrayList6.size();
    boolean b10 = treeSet3.removeAll((java2.util2.Collection)arrayList6);
    java2.util2.Set set11 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet3);
    java.lang.Object obj12 = treeSet3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);

  }

  @Test
  public void test45() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test45"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    arrayList0.trimToSize();
    boolean b2 = arrayList0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test46() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test46"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array2 = new java.lang.Object[] { arrayList1 };
    java.lang.Object[] obj_array3 = linkedList0.toArray(obj_array2);
    java.lang.Object obj4 = null;
    boolean b5 = linkedList0.remove(obj4);
    java2.util2.List list6 = java2.util2.Collections.synchronizedList((java2.util2.List)linkedList0);
    java2.util2.LinkedList linkedList8 = new java2.util2.LinkedList();
    int i10 = linkedList8.indexOf((java.lang.Object)(short)10);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    int i13 = linkedList11.indexOf((java.lang.Object)(short)10);
    linkedList11.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList16 = new java2.util2.ArrayList((java2.util2.Collection)linkedList11);
    java2.util2.LinkedList linkedList17 = new java2.util2.LinkedList();
    int i19 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList17, (java.lang.Object)(byte)0);
    int i20 = linkedList11.indexOf((java.lang.Object)linkedList17);
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList22 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array23 = new java.lang.Object[] { arrayList22 };
    java.lang.Object[] obj_array24 = linkedList21.toArray(obj_array23);
    java.lang.Object[] obj_array25 = linkedList11.toArray(obj_array24);
    boolean b26 = linkedList8.retainAll((java2.util2.Collection)linkedList11);
    boolean b27 = linkedList8.isEmpty();
    boolean b28 = linkedList0.addAll((-1), (java2.util2.Collection)linkedList8);
    java2.util2.Collections.sort((java2.util2.List)linkedList0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test47() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test47"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.ArrayList arrayList5 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList6 = new java2.util2.ArrayList();
    boolean b7 = arrayList5.removeAll((java2.util2.Collection)arrayList6);
    java.lang.Object[] obj_array8 = arrayList6.toArray();
    int i9 = arrayList6.size();
    boolean b10 = treeSet3.removeAll((java2.util2.Collection)arrayList6);
    arrayList6.clear();
    java2.util2.ArrayList arrayList12 = new java2.util2.ArrayList();
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList12);
    boolean b14 = arrayList12.isEmpty();
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    int i17 = linkedList15.indexOf((java.lang.Object)(short)10);
    linkedList15.addLast((java.lang.Object)(short)1);
    java2.util2.Collections.fill((java2.util2.List)linkedList15, (java.lang.Object)10.0f);
    boolean b22 = arrayList12.containsAll((java2.util2.Collection)linkedList15);
    java2.util2.Collection collection23 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)linkedList15);
    java2.util2.LinkedList linkedList24 = new java2.util2.LinkedList();
    int i26 = linkedList24.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet((java2.util2.Collection)linkedList24);
    boolean b28 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList6, (java.lang.Object)linkedList15, (java.lang.Object)linkedList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test48() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test48"); }


    java2.util2.ArrayList arrayList0 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList1 = new java2.util2.ArrayList();
    boolean b2 = arrayList0.removeAll((java2.util2.Collection)arrayList1);
    java.lang.Object[] obj_array3 = arrayList1.toArray();
    int i4 = arrayList1.size();
    java2.util2.LinkedList linkedList5 = new java2.util2.LinkedList();
    int i7 = linkedList5.indexOf((java.lang.Object)(short)10);
    linkedList5.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList10 = new java2.util2.ArrayList((java2.util2.Collection)linkedList5);
    java2.util2.LinkedList linkedList11 = new java2.util2.LinkedList();
    int i13 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList11, (java.lang.Object)(byte)0);
    int i14 = linkedList5.indexOf((java.lang.Object)linkedList11);
    java2.util2.LinkedList linkedList15 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList16 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array17 = new java.lang.Object[] { arrayList16 };
    java.lang.Object[] obj_array18 = linkedList15.toArray(obj_array17);
    java.lang.Object[] obj_array19 = linkedList5.toArray(obj_array18);
    java2.util2.LinkedList linkedList20 = new java2.util2.LinkedList();
    int i22 = linkedList20.indexOf((java.lang.Object)(short)10);
    linkedList20.addLast((java.lang.Object)(short)1);
    java2.util2.ArrayList arrayList25 = new java2.util2.ArrayList((java2.util2.Collection)linkedList20);
    java2.util2.LinkedList linkedList26 = new java2.util2.LinkedList();
    int i28 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList26, (java.lang.Object)(byte)0);
    int i29 = linkedList20.indexOf((java.lang.Object)linkedList26);
    java2.util2.LinkedList linkedList30 = new java2.util2.LinkedList();
    java2.util2.ArrayList arrayList31 = new java2.util2.ArrayList();
    java.lang.Object[] obj_array32 = new java.lang.Object[] { arrayList31 };
    java.lang.Object[] obj_array33 = linkedList30.toArray(obj_array32);
    java.lang.Object[] obj_array34 = linkedList20.toArray(obj_array33);
    int i35 = linkedList5.indexOf((java.lang.Object)obj_array34);
    int i36 = arrayList1.indexOf((java.lang.Object)linkedList5);
    java2.util2.List list37 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test49() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test49"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);

  }

  @Test
  public void test50() throws Throwable {

    if (debug) { System.out.format("%n%s%n","NaiveRegression0.test50"); }


    java2.util2.LinkedList linkedList0 = new java2.util2.LinkedList();
    int i2 = linkedList0.indexOf((java.lang.Object)(short)10);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)linkedList0);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    boolean b6 = treeSet3.add((java.lang.Object)0.0f);
    java2.util2.SortedSet sortedSet7 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.ArrayList arrayList8 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList9 = new java2.util2.ArrayList();
    boolean b10 = arrayList8.removeAll((java2.util2.Collection)arrayList9);
    java.lang.Object[] obj_array11 = arrayList9.toArray();
    java2.util2.LinkedList linkedList12 = new java2.util2.LinkedList();
    int i14 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList12, (java.lang.Object)(byte)0);
    int i15 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList9, (java2.util2.List)linkedList12);
    java2.util2.ArrayList arrayList17 = new java2.util2.ArrayList();
    java2.util2.ArrayList arrayList18 = new java2.util2.ArrayList();
    boolean b19 = arrayList17.removeAll((java2.util2.Collection)arrayList18);
    java.lang.Object[] obj_array20 = arrayList18.toArray();
    java2.util2.LinkedList linkedList21 = new java2.util2.LinkedList();
    int i23 = java2.util2.Collections.binarySearch((java2.util2.List)linkedList21, (java.lang.Object)(byte)0);
    int i24 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList18, (java2.util2.List)linkedList21);
    boolean b25 = linkedList12.addAll(1, (java2.util2.Collection)arrayList18);
    boolean b26 = treeSet3.removeAll((java2.util2.Collection)linkedList12);
    java2.util2.Iterator iterator27 = linkedList12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);

  }

}
