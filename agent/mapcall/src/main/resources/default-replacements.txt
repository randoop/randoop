// Default replacement file
//
// Note:
// We don't include any blanket package/class replacements here to avoid changing
// behavior so drastically that methods are affected, and creates uninteresting or
// failing tests b/c of use of null or zero values.

// Replacement for System.exit using method that throws randoop.SystemExitCalledError.
// Note: this means that mapcall.jar needs to be in classpath of generated tests.
java.lang.System.exit(int) randoop.mock.System.exit(int)

// Also want to prevent issues from AWT/Swing:
// - having dialogs (and other components/containers) display themselves,
// - having windowing system focus taken,
// - having windowing system threads run a long time and cause a timeout
//   which makes generation very slow.
// The last of these is probably the more critical, but requires more work than has been done.
// See the placeholder below for more detail.

// Prevent AWT/Swing components/containers from displaying themselves.
//
java.awt.Component.setVisible(boolean) randoop.mock.Component.setVisible(java.awt.Component,boolean)
java.awt.Dialog.setVisible(boolean) randoop.mock.Dialog.setVisible(java.awt.Dialog,boolean)
java.awt.Frame.setVisible(boolean) randoop.mock.Frame.setVisible(java.awt.Frame,boolean)
java.awt.Window.setVisible(boolean) randoop.mock.Window.setVisible(java.awt.Window,boolean)
javax.swing.JComponent.setVisible(boolean) randoop.mock.JComponent.setVisible(javax.swing.JComponent,boolean)
javax.swing.JDialog.setVisible(boolean) randoop.mock.JDialog.setVisible(javax.swing.JDialog,boolean)
javax.swing.JFrame.setVisible(boolean) randoop.mock.JFrame.setVisible(javax.swing.JFrame,boolean)
//javax.swing.JPanel.setVisible(boolean) randoop.mock.JPanel.setVisible(javax.swing.JPanel,boolean)
javax.swing.JWindow.setVisible(boolean) randoop.mock.JWindow.setVisible(javax.swing.JWindow,boolean)

java.awt.Component.show(boolean) randoop.mock.Component.show(java.awt.Component,boolean)
java.awt.Dialog.show(boolean) randoop.mock.Dialog.show(java.awt.Dialog,boolean)
java.awt.Frame.show(boolean) randoop.mock.Frame.show(java.awt.Frame,boolean)
java.awt.Window.show(boolean) randoop.mock.Window.show(java.awt.Window,boolean)
javax.swing.JComponent.show(boolean) randoop.mock.JComponent.show(javax.swing.JComponent,boolean)
javax.swing.JDialog.show(boolean) randoop.mock.JDialog.show(javax.swing.JDialog,boolean)
javax.swing.JFrame.show(boolean) randoop.mock.JFrame.show(javax.swing.JFrame,boolean)
//javax.swing.JPanel.show(boolean) randoop.mock.JPanel.show(javax.swing.JPanel,boolean)
javax.swing.JWindow.show(boolean) randoop.mock.JWindow.show(javax.swing.JWindow,boolean)

java.awt.Component.show() randoop.mock.Component.show(java.awt.Component)
javax.swing.JComponent.show() randoop.mock.JComponent.show(javax.swing.JComponent)
//javax.swing.JPanel.show() randoop.mock.JPanel.show(javax.swing.JPanel)
java.awt.Window.show() randoop.mock.Window.show(java.awt.Window)
java.awt.Dialog.show() randoop.mock.Dialog.show(java.awt.Dialog)
java.awt.Frame.show() randoop.mock.Frame.show(java.awt.Frame)
javax.swing.JDialog.show() randoop.mock.JDialog.show(javax.swing.JDialog)
javax.swing.JFrame.show() randoop.mock.JFrame.show(javax.swing.JFrame)
javax.swing.JWindow.show() randoop.mock.JWindow.show(javax.swing.JWindow)

java.awt.Dialog.pack() randoop.mock.Dialog.pack(java.awt.Dialog)
java.awt.Frame.pack() randoop.mock.Frame.pack(java.awt.Frame)
java.awt.Window.pack() randoop.mock.Window.pack(java.awt.Window)
javax.swing.JDialog.pack() randoop.mock.JDialog.pack(javax.swing.JDialog)
javax.swing.JFrame.pack() randoop.mock.JFrame.pack(javax.swing.JFrame)
javax.swing.JWindow.pack() randoop.mock.JWindow.pack(javax.swing.JWindow)

// Try to Prevent AWT/Swing components from stealing focus, though apparently not sufficient.
// NOTE: these replacements require modifying bootloaded classes

// On some systems, moving a window to the front will take focus
java.awt.Window.toFront() randoop.mock.Window.toFront(java.awt.Window)
java.awt.Dialog.toFront() randoop.mock.Dialog.toFront(java.awt.Dialog)
javax.swing.JDialog.toFront() randoop.mock.JDialog.toFront(javax.swing.JDialog)
java.awt.Frame.toFront() randoop.mock.Frame.toFront(java.awt.Frame)
javax.swing.JFrame.toFront() randoop.mock.JFrame.toFront(javax.swing.JFrame)
javax.swing.JWindow.toFront() randoop.mock.JWindow.toFront(javax.swing.JWindow)

// A component can request focus
java.awt.Component.requestFocus() randoop.mock.Component.requestFocus(java.awt.Component)
java.awt.Window.requestFocus() randoop.mock.Window.requestFocus(java.awt.Window)
java.awt.Dialog.requestFocus() randoop.mock.Dialog.requestFocus(java.awt.Dialog)
java.awt.Frame.requestFocus() randoop.mock.Frame.requestFocus(java.awt.Frame)
javax.swing.JComponent.requestFocus() randoop.mock.JComponent.requestFocus(javax.swing.JComponent)
javax.swing.JDialog.requestFocus() randoop.mock.JDialog.requestFocus(javax.swing.JDialog)
javax.swing.JFrame.requestFocus() randoop.mock.JFrame.requestFocus(javax.swing.JFrame)
javax.swing.JWindow.requestFocus() randoop.mock.JWindow.requestFocus(javax.swing.JWindow)

java.awt.Component.requestFocus(boolean) randoop.mock.Component.requestFocus(java.awt.Component,boolean)
java.awt.Window.requestFocus(boolean) randoop.mock.Window.requestFocus(java.awt.Window,boolean)
java.awt.Dialog.requestFocus(boolean) randoop.mock.Dialog.requestFocus(java.awt.Dialog,boolean)
java.awt.Frame.requestFocus(boolean) randoop.mock.Frame.requestFocus(java.awt.Frame,boolean)
javax.swing.JComponent.requestFocus(boolean) randoop.mock.JComponent.requestFocus(javax.swing.JComponent,boolean)
javax.swing.JDialog.requestFocus(boolean) randoop.mock.JDialog.requestFocus(javax.swing.JDialog,boolean)
javax.swing.JFrame.requestFocus(boolean) randoop.mock.JFrame.requestFocus(javax.swing.JFrame,boolean)
javax.swing.JWindow.requestFocus(boolean) randoop.mock.JWindow.requestFocus(javax.swing.JWindow,boolean)

// Also want to
// Prevent AWT/Swing components from starting threads. It appears that the threads are managed by
// an AppContext in java.awt.Component. So, we want to replace calls to sun.awt.AppContext.getAppContext().
// However, having the replacement method return null will result in NPEs.
//sun.awt.AppContext.getAppContext() randoop.mock.AppContext.getAppContext()
// Need to make sure that the call in java.awt.Component is not masked in CallReplacementTransformer

// The following don't seem to work, but want to be able to create certain AWT/Swing objects in
// headless mode, which ordinarily results in a HeadlessException being thrown. These are handled by
// java.awt.GraphicsEnvironment.
java.awt.GraphicsEnvironment.isHeadless() randoop.mock.GraphicsEnvironment.isHeadless()
java.awt.GraphicsEnvironment.isHeadlessInstance() randoop.mock.GraphicsEnvironment.isHeadlessInstance(java.awt.GraphicsEnvironment)
java.awt.GraphicsEnvironment.checkHeadless() randoop.mock.GraphicsEnvironment.checkHeadless()

// Avoid calls to JOptionPane methods.
// It is not clear why these are necessary after suppressing show() methods, but dialogs are still shown
javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object) randoop.mock.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object)
javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int) randoop.mock.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)
javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int) randoop.mock.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)
javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon) randoop.mock.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon)
javax.swing.JOptionPane.showInputDialog(java.lang.Object) randoop.mock.JOptionPane.showInputDialog(java.lang.Object)
javax.swing.JOptionPane.showInputDialog(java.lang.Object,java.lang.Object) randoop.mock.JOptionPane.showInputDialog(java.lang.Object,java.lang.Object)
javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object) randoop.mock.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object)
javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object) randoop.mock.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)
javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int) randoop.mock.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)
javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object) randoop.mock.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)
javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object) randoop.mock.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)
javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int) randoop.mock.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)
javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon) randoop.mock.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon)
javax.swing.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object) randoop.mock.JOptionPane.showOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)
javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object) randoop.mock.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object)
javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int) randoop.mock.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)
javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon) randoop.mock.JOptionPane.showInternalMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon)
javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object) randoop.mock.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object)
javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int) randoop.mock.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)
javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int) randoop.mock.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)
javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon) randoop.mock.JOptionPane.showInternalConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon)
javax.swing.JOptionPane.showInternalOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object) randoop.mock.JOptionPane.showInternalOptionDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)
javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object) randoop.mock.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object)
javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int) randoop.mock.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int)
javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object) randoop.mock.JOptionPane.showInternalInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)
