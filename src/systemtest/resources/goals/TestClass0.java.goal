package foo.bar;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestClass0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test001"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.List list1 = java2.util2.Collections.unmodifiableList(list0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test002"); }


    java2.util2.Enumeration enumeration0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.ArrayList arrayList1 = java2.util2.Collections.list(enumeration0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test003"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list0, (-1), 1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test004"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b3 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test005"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.shuffle(list0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test006"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b3 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test007"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Comparator comparator3 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list2, comparator3);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test008"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list2, list5);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test009"); }


    java2.util2.Map map0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Map map1 = java2.util2.Collections.synchronizedMap(map0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test010"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list0, 0, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test011"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)sortedSet5);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.SortedSet sortedSet9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet8);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet10 = treeSet1.tailSet((java.lang.Object)sortedSet9);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test012"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj7 = java2.util2.Collections.max((java2.util2.Collection)treeSet4);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test013"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b6 = treeSet4.contains((java.lang.Object)(-1.0f));
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.fill(list2, (java.lang.Object)(-1.0f));
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test014"); }


    java2.util2.SortedMap sortedMap0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedMap sortedMap1 = java2.util2.Collections.synchronizedSortedMap(sortedMap0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test015"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Comparator comparator4 = null;
    java.lang.Object obj5 = java2.util2.Collections.max((java2.util2.Collection)list3, comparator4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Map map9 = java2.util2.Collections.singletonMap((java.lang.Object)comparator6, (java.lang.Object)1L);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.fill(list3, (java.lang.Object)comparator6);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 0.0f+ "'", obj5.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test016"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)sortedSet5);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test017"); }


    java2.util2.SortedMap sortedMap0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedMap sortedMap1 = java2.util2.Collections.unmodifiableSortedMap(sortedMap0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test018"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b5 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test019"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    java2.util2.List list5 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list5);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list2, list6);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test020"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.shuffle(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test021"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    int i7 = treeSet1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test022"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list6, 1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list11, 1);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list6, list11);
    // The following exception was thrown during execution in test generation
    try {
      int i15 = java2.util2.Collections.binarySearch(list3, (java.lang.Object)list11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test023"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Collection collection8 = null;
    boolean b9 = treeSet7.retainAll(collection8);
    // The following exception was thrown during execution in test generation
    try {
      boolean b10 = treeSet1.addAll(collection8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test024"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list2, (-1), (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test025"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Comparator comparator4 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list3, comparator4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator4);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test026"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.Comparator comparator11 = null;
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet(comparator11);
    java2.util2.Map map14 = java2.util2.Collections.singletonMap((java.lang.Object)comparator11, (java.lang.Object)1L);
    java2.util2.Map map15 = java2.util2.Collections.synchronizedMap(map14);
    java2.util2.Comparator comparator16 = null;
    // The following exception was thrown during execution in test generation
    try {
      int i17 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)map14, comparator16);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map15);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test027"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)collection5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list9);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list9, random11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.SortedSet sortedSet18 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet17);
    boolean b19 = treeSet14.removeAll((java2.util2.Collection)sortedSet18);
    boolean b21 = java2.util2.Collections.replaceAll(list9, (java.lang.Object)treeSet14, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator22 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj23 = java2.util2.Collections.min((java2.util2.Collection)list9, comparator22);
    java.lang.Object obj24 = java2.util2.Collections.min((java2.util2.Collection)list6, comparator22);
    java2.util2.Comparator comparator25 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list6, comparator25);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 0.0f+ "'", obj23.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator25);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test028"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)collection5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list9);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list6, list10);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test029"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet4);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test030"); }


    java2.util2.List list0 = null;
    java2.util2.Random random1 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.shuffle(list0, random1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test031"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj2 = java2.util2.Collections.max((java2.util2.Collection)treeSet1);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test032"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.Comparator comparator7 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)treeSet1, comparator7);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator7);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test033"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.SortedSet sortedSet20 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    boolean b22 = treeSet19.add((java.lang.Object)false);
    boolean b23 = treeSet1.retainAll((java2.util2.Collection)treeSet19);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    java2.util2.SortedSet sortedSet27 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet26);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)treeSet26);
    treeSet26.clear();
    java2.util2.Comparator comparator30 = null;
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet(comparator30);
    java2.util2.Collection collection32 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet31);
    boolean b34 = treeSet31.equals((java.lang.Object)1L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet31);
    boolean b36 = treeSet26.removeAll(collection35);
    java2.util2.Comparator comparator37 = null;
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet(comparator37);
    java2.util2.Collection collection39 = null;
    boolean b40 = treeSet38.retainAll(collection39);
    java2.util2.SortedSet sortedSet41 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet38);
    java2.util2.Collection collection42 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet41);
    boolean b43 = treeSet26.remove((java.lang.Object)sortedSet41);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet44 = treeSet19.subSet((java.lang.Object)(byte)100, (java.lang.Object)sortedSet41);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test034"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list7);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test035"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.Collections.reverse(list2);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test036"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list3, random4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test037"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)treeSet14);
    boolean b17 = treeSet1.containsAll((java2.util2.Collection)treeSet14);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj18 = treeSet14.last();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test038"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet5 = treeSet1.headSet(obj4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test039"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list9, 1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list14, 1);
    int i17 = java2.util2.Collections.lastIndexOfSubList(list9, list14);
    boolean b18 = treeSet1.containsAll((java2.util2.Collection)list9);
    java2.util2.Collections.reverse(list9);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list9);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test040"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList(list13);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list2, list14);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test041"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Comparator comparator1 = null;
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet(comparator1);
    java2.util2.Collection collection3 = null;
    boolean b4 = treeSet2.retainAll(collection3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet2);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet5);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection6);
    boolean b8 = treeSet0.add((java.lang.Object)list7);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)treeSet10);
    java2.util2.Comparator comparator13 = treeSet10.comparator();
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet14 = treeSet0.tailSet((java.lang.Object)treeSet10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[[[]]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator13);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test042"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    boolean b6 = treeSet1.equals((java.lang.Object)(short)100);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Comparator comparator9 = treeSet8.comparator();
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Collections.fill((java2.util2.List)arrayList12, (java.lang.Object)0L);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList12);
    java2.util2.Collections.reverse((java2.util2.List)arrayList12);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet17 = treeSet1.tailSet((java.lang.Object)arrayList12);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test043"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list8, 100, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test044"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    treeSet6.clear();
    java2.util2.Comparator comparator11 = null;
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet(comparator11);
    boolean b14 = treeSet12.contains((java.lang.Object)(-1.0f));
    java2.util2.Collection collection15 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet12);
    boolean b16 = treeSet6.containsAll(collection15);
    // The following exception was thrown during execution in test generation
    try {
      int i17 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)collection15);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test045"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    boolean b6 = treeSet1.equals((java.lang.Object)(short)100);
    int i7 = treeSet1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test046"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)sortedSet5);
    java.lang.Object obj7 = treeSet1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test047"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java.lang.Object obj10 = null;
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet7, obj10);
    boolean b12 = treeSet1.contains((java.lang.Object)map11);
    java2.util2.Collection collection13 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test048"); }


    java2.util2.List list0 = null;
    java2.util2.Comparator comparator1 = null;
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet(comparator1);
    java2.util2.Comparator comparator3 = treeSet2.comparator();
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet2);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet2);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.Collections.fill((java2.util2.List)arrayList6, (java.lang.Object)0L);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList6);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list0, (java2.util2.List)arrayList6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test049"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    boolean b12 = treeSet10.contains((java.lang.Object)(-1.0f));
    boolean b14 = treeSet10.equals((java.lang.Object)100.0f);
    java2.util2.List list17 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list17, 1);
    java2.util2.List list22 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list22, 1);
    int i25 = java2.util2.Collections.lastIndexOfSubList(list17, list22);
    boolean b26 = treeSet10.retainAll((java2.util2.Collection)list17);
    java2.util2.Comparator comparator27 = null;
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet(comparator27);
    java2.util2.Collection collection29 = null;
    boolean b30 = treeSet28.retainAll(collection29);
    java2.util2.SortedSet sortedSet31 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet28);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet31);
    java2.util2.List list33 = java2.util2.Collections.singletonList((java.lang.Object)collection32);
    int i34 = java2.util2.Collections.indexOfSubList(list17, list33);
    int i35 = java2.util2.Collections.lastIndexOfSubList(list8, list17);
    java2.util2.Collections.reverse(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == (-1));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test050"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Comparator comparator4 = null;
    java.lang.Object obj5 = java2.util2.Collections.max((java2.util2.Collection)list3, comparator4);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list9);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list9, random11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.SortedSet sortedSet18 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet17);
    boolean b19 = treeSet14.removeAll((java2.util2.Collection)sortedSet18);
    boolean b21 = java2.util2.Collections.replaceAll(list9, (java.lang.Object)treeSet14, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator22 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj23 = java2.util2.Collections.min((java2.util2.Collection)list9, comparator22);
    // The following exception was thrown during execution in test generation
    try {
      int i24 = java2.util2.Collections.binarySearch(list3, (java.lang.Object)'4', comparator22);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 0.0f+ "'", obj5.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 0.0f+ "'", obj23.equals(0.0f));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test051"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.SortedSet sortedSet19 = treeSet1.headSet((java.lang.Object)(short)1);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Map map23 = java2.util2.Collections.singletonMap((java.lang.Object)comparator20, (java.lang.Object)1L);
    boolean b24 = treeSet1.remove((java.lang.Object)1L);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    boolean b28 = treeSet26.contains((java.lang.Object)(-1.0f));
    boolean b30 = treeSet26.equals((java.lang.Object)100.0f);
    java2.util2.List list33 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list33, 1);
    java2.util2.List list38 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list38, 1);
    int i41 = java2.util2.Collections.lastIndexOfSubList(list33, list38);
    boolean b42 = treeSet26.retainAll((java2.util2.Collection)list33);
    java2.util2.SortedSet sortedSet44 = treeSet26.headSet((java.lang.Object)(short)1);
    boolean b45 = treeSet1.equals((java.lang.Object)treeSet26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test052"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    boolean b6 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test053"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet10);
    boolean b12 = treeSet7.removeAll((java2.util2.Collection)sortedSet11);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)treeSet7, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator15 = null;
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet(comparator15);
    java2.util2.SortedSet sortedSet17 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet16);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)treeSet16);
    java2.util2.List list21 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.SortedSet sortedSet22 = treeSet16.headSet((java.lang.Object)1);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.fill(list2, (java.lang.Object)treeSet16);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test054"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = null;
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet1, obj4);
    java2.util2.Map map6 = java2.util2.Collections.synchronizedMap(map5);
    java2.util2.Map map7 = java2.util2.Collections.synchronizedMap(map6);
    java2.util2.Map map8 = java2.util2.Collections.unmodifiableMap(map7);
    java2.util2.List list9 = java2.util2.Collections.singletonList((java.lang.Object)map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test055"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collections.shuffle(list8);
    java2.util2.Collections.rotate(list8, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test056"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet6);
    java.lang.Object[] obj_array12 = treeSet6.toArray();
    java.lang.Object[] obj_array13 = treeSet1.toArray(obj_array12);
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.Comparator comparator16 = treeSet15.comparator();
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.Collection collection19 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet18);
    boolean b20 = treeSet15.removeAll((java2.util2.Collection)treeSet18);
    java2.util2.List list23 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list23, 1);
    java2.util2.List list28 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list28, 1);
    int i31 = java2.util2.Collections.lastIndexOfSubList(list23, list28);
    boolean b32 = treeSet15.containsAll((java2.util2.Collection)list23);
    java2.util2.Collections.reverse(list23);
    // The following exception was thrown during execution in test generation
    try {
      boolean b34 = treeSet1.add((java.lang.Object)list23);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test057"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.Enumeration enumeration6 = java2.util2.Collections.enumeration((java2.util2.Collection)sortedSet4);
    java2.util2.ArrayList arrayList7 = java2.util2.Collections.list(enumeration6);
    java.lang.Object[] obj_array8 = arrayList7.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array8);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test058"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.SortedSet sortedSet7 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test059"); }


    java2.util2.List list0 = null;
    java2.util2.Comparator comparator1 = null;
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet(comparator1);
    java2.util2.SortedSet sortedSet3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet2);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.Collection)treeSet2);
    treeSet2.clear();
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet7);
    boolean b10 = treeSet7.equals((java.lang.Object)1L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    boolean b12 = treeSet2.removeAll(collection11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Comparator comparator15 = treeSet14.comparator();
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)0L);
    java2.util2.List list21 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList18);
    java2.util2.Collections.reverse((java2.util2.List)arrayList18);
    // The following exception was thrown during execution in test generation
    try {
      boolean b23 = java2.util2.Collections.replaceAll(list0, (java.lang.Object)collection11, (java.lang.Object)arrayList18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list21);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test060"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)collection23);
    int i25 = java2.util2.Collections.indexOfSubList(list8, list24);
    java.lang.Object obj26 = new java.lang.Object();
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.fill(list24, obj26);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test061"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java.lang.Object obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet8 = treeSet1.headSet(obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test062"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Collection collection15 = null;
    boolean b16 = treeSet14.retainAll(collection15);
    java2.util2.SortedSet sortedSet17 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet17);
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet17);
    boolean b20 = treeSet1.remove((java.lang.Object)set19);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj22 = treeSet1.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test063"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.Collection collection14 = null;
    boolean b15 = treeSet13.retainAll(collection14);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet13);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet16);
    boolean b18 = treeSet1.remove((java.lang.Object)sortedSet16);
    boolean b19 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test064"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)collection5);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Comparator comparator9 = treeSet8.comparator();
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Collections.fill((java2.util2.List)arrayList12, (java.lang.Object)0L);
    java2.util2.List list15 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList12);
    java2.util2.Comparator comparator16 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list15, comparator16);
    java2.util2.Collections.rotate(list15, 1);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.fill(list6, (java.lang.Object)1);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator16);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test065"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)treeSet3);
    boolean b6 = treeSet1.retainAll((java2.util2.Collection)treeSet5);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    boolean b10 = treeSet8.contains((java.lang.Object)(-1.0f));
    boolean b12 = treeSet8.equals((java.lang.Object)100.0f);
    java2.util2.List list15 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list15, 1);
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list20, 1);
    int i23 = java2.util2.Collections.lastIndexOfSubList(list15, list20);
    boolean b24 = treeSet8.retainAll((java2.util2.Collection)list15);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    java2.util2.Collection collection27 = null;
    boolean b28 = treeSet26.retainAll(collection27);
    java2.util2.SortedSet sortedSet29 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet26);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet29);
    java2.util2.List list31 = java2.util2.Collections.singletonList((java.lang.Object)collection30);
    int i32 = java2.util2.Collections.indexOfSubList(list15, list31);
    java2.util2.Collection collection33 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list31);
    boolean b34 = treeSet1.add((java.lang.Object)collection33);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj35 = java2.util2.Collections.max(collection33);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[[[]]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test066"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    boolean b5 = treeSet1.add((java.lang.Object)(byte)10);
    java.lang.Object[] obj_array6 = treeSet1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[10]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test067"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collections.shuffle(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test068"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator6);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list2);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 0.0f+ "'", obj7.equals(0.0f));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test069"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.Random random10 = null;
    java2.util2.Collections.shuffle(list8, random10);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet13);
    java2.util2.Comparator comparator15 = null;
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet(comparator15);
    java2.util2.SortedSet sortedSet17 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet16);
    boolean b18 = treeSet13.removeAll((java2.util2.Collection)sortedSet17);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)treeSet13, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator21 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj22 = java2.util2.Collections.min((java2.util2.Collection)list8, comparator21);
    java2.util2.Comparator comparator23 = null;
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(comparator23);
    java2.util2.Collection collection25 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet24);
    boolean b27 = treeSet24.equals((java.lang.Object)1L);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet24);
    // The following exception was thrown during execution in test generation
    try {
      boolean b29 = java2.util2.Collections.replaceAll(list2, obj22, (java.lang.Object)collection28);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 0.0f+ "'", obj22.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test070"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test071"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Collection collection15 = null;
    boolean b16 = treeSet14.retainAll(collection15);
    java2.util2.SortedSet sortedSet17 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet17);
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet17);
    boolean b20 = treeSet1.remove((java.lang.Object)set19);
    java2.util2.Set set21 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    java.lang.Object obj22 = treeSet1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj22);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test072"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)str12);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list13);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test073"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)treeSet3);
    boolean b6 = treeSet1.retainAll((java2.util2.Collection)treeSet5);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    boolean b9 = treeSet5.remove((java.lang.Object)treeSet8);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    boolean b13 = treeSet11.contains((java.lang.Object)(-1.0f));
    boolean b15 = treeSet11.equals((java.lang.Object)100.0f);
    java2.util2.List list18 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list18, 1);
    java2.util2.List list23 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list23, 1);
    int i26 = java2.util2.Collections.lastIndexOfSubList(list18, list23);
    boolean b27 = treeSet11.retainAll((java2.util2.Collection)list18);
    java2.util2.SortedSet sortedSet29 = treeSet11.headSet((java.lang.Object)(short)1);
    boolean b31 = treeSet11.contains((java.lang.Object)1.0f);
    boolean b32 = treeSet8.remove((java.lang.Object)1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test074"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet1);
    boolean b7 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test075"); }


    java2.util2.List list0 = null;
    java2.util2.List list3 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list4 = java2.util2.Collections.unmodifiableList(list3);
    java2.util2.List list5 = java2.util2.Collections.synchronizedList(list3);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet7);
    // The following exception was thrown during execution in test generation
    try {
      boolean b9 = java2.util2.Collections.replaceAll(list0, (java.lang.Object)list3, (java.lang.Object)collection8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test076"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Map map6 = java2.util2.Collections.singletonMap((java.lang.Object)comparator3, (java.lang.Object)1L);
    java2.util2.Map map7 = java2.util2.Collections.synchronizedMap(map6);
    java2.util2.Map map8 = java2.util2.Collections.synchronizedMap(map6);
    boolean b9 = treeSet1.remove((java.lang.Object)map6);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)treeSet14);
    treeSet14.clear();
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet19);
    boolean b22 = treeSet19.equals((java.lang.Object)1L);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet19);
    boolean b24 = treeSet14.removeAll(collection23);
    java.lang.String str25 = treeSet14.toString();
    java2.util2.Comparator comparator26 = null;
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet(comparator26);
    java2.util2.Collection collection28 = null;
    boolean b29 = treeSet27.retainAll(collection28);
    java2.util2.SortedSet sortedSet30 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet27);
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet30);
    java2.util2.Set set32 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet30);
    boolean b33 = treeSet14.remove((java.lang.Object)set32);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet34 = treeSet1.subSet((java.lang.Object)treeSet11, (java.lang.Object)b33);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test077"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list2, random11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list15, 1);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.shuffle(list18);
    int i20 = java2.util2.Collections.indexOfSubList(list2, list18);
    java2.util2.Comparator comparator21 = null;
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet(comparator21);
    java2.util2.Comparator comparator23 = treeSet22.comparator();
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet22);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet22);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.Collections.fill((java2.util2.List)arrayList26, (java.lang.Object)0L);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList26);
    java2.util2.Comparator comparator30 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list29, comparator30);
    java2.util2.Collections.shuffle(list29);
    java2.util2.Collections.reverse(list29);
    java2.util2.Comparator comparator34 = null;
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet(comparator34);
    java2.util2.Comparator comparator36 = treeSet35.comparator();
    java2.util2.Collection collection37 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet35);
    java2.util2.Enumeration enumeration38 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet35);
    java2.util2.ArrayList arrayList39 = java2.util2.Collections.list(enumeration38);
    java2.util2.Collections.fill((java2.util2.List)arrayList39, (java.lang.Object)0L);
    java.lang.String str42 = arrayList39.toString();
    java2.util2.Comparator comparator43 = null;
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet(comparator43);
    java2.util2.Comparator comparator45 = treeSet44.comparator();
    java2.util2.Collection collection46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet44);
    java2.util2.Enumeration enumeration47 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet44);
    java2.util2.ArrayList arrayList48 = java2.util2.Collections.list(enumeration47);
    java2.util2.Collections.fill((java2.util2.List)arrayList39, (java.lang.Object)arrayList48);
    java2.util2.List list52 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list53 = java2.util2.Collections.unmodifiableList(list52);
    java2.util2.Random random54 = null;
    java2.util2.Collections.shuffle(list52, random54);
    java2.util2.Comparator comparator56 = null;
    java2.util2.TreeSet treeSet57 = new java2.util2.TreeSet(comparator56);
    java2.util2.SortedSet sortedSet58 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet57);
    java2.util2.Comparator comparator59 = null;
    java2.util2.TreeSet treeSet60 = new java2.util2.TreeSet(comparator59);
    java2.util2.SortedSet sortedSet61 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet60);
    boolean b62 = treeSet57.removeAll((java2.util2.Collection)sortedSet61);
    boolean b64 = java2.util2.Collections.replaceAll(list52, (java.lang.Object)treeSet57, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator65 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj66 = java2.util2.Collections.min((java2.util2.Collection)list52, comparator65);
    int i67 = java2.util2.Collections.binarySearch(list29, (java.lang.Object)arrayList48, comparator65);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list2, comparator65);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[]"+ "'", str42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet57.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet57.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet60.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet60.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj66 + "' != '" + 0.0f+ "'", obj66.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test078"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Comparator comparator20 = treeSet19.comparator();
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet19);
    java2.util2.Enumeration enumeration22 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet19);
    java2.util2.ArrayList arrayList23 = java2.util2.Collections.list(enumeration22);
    java2.util2.Collections.fill((java2.util2.List)arrayList23, (java.lang.Object)0L);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList23);
    java2.util2.Comparator comparator27 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list26, comparator27);
    java2.util2.Collections.shuffle(list26);
    int i30 = java2.util2.Collections.indexOfSubList(list8, list26);
    // The following exception was thrown during execution in test generation
    try {
      int i32 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test079"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.rotate(list0, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test080"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    treeSet1.clear();
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)treeSet7);
    treeSet7.clear();
    java2.util2.Comparator comparator11 = null;
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet(comparator11);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet12);
    boolean b15 = treeSet12.equals((java.lang.Object)1L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet12);
    boolean b17 = treeSet7.removeAll(collection16);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    boolean b24 = treeSet7.remove((java.lang.Object)sortedSet22);
    boolean b25 = treeSet1.removeAll((java2.util2.Collection)sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test081"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test082"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list2, random11);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)1);
    // The following exception was thrown during execution in test generation
    try {
      int i15 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)1);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test083"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList5);
    java2.util2.Random random9 = null;
    java2.util2.Collections.shuffle((java2.util2.List)arrayList5, random9);
    java2.util2.Collections.reverse((java2.util2.List)arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test084"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)collection23);
    int i25 = java2.util2.Collections.indexOfSubList(list8, list24);
    java2.util2.Collection collection26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list24);
    java2.util2.Random random27 = null;
    java2.util2.Collections.shuffle(list24, random27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test085"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test086"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java.lang.Object obj5 = treeSet1.first();
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Collection collection8 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet7);
    boolean b10 = treeSet7.equals((java.lang.Object)1L);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.SortedSet sortedSet12 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet7);
    java.lang.Object[] obj_array13 = treeSet7.toArray();
    java.lang.Object[] obj_array14 = treeSet1.toArray(obj_array13);
    java2.util2.Comparator comparator15 = null;
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet(comparator15);
    java2.util2.Comparator comparator17 = treeSet16.comparator();
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet16);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet16);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Collections.fill((java2.util2.List)arrayList20, (java.lang.Object)0L);
    java2.util2.List list23 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList20);
    java2.util2.Comparator comparator24 = null;
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet(comparator24);
    boolean b27 = treeSet25.contains((java.lang.Object)(-1.0f));
    boolean b29 = treeSet25.equals((java.lang.Object)100.0f);
    java2.util2.List list32 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list32, 1);
    java2.util2.List list37 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list37, 1);
    int i40 = java2.util2.Collections.lastIndexOfSubList(list32, list37);
    boolean b41 = treeSet25.retainAll((java2.util2.Collection)list32);
    java2.util2.Comparator comparator42 = null;
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet(comparator42);
    java2.util2.Collection collection44 = null;
    boolean b45 = treeSet43.retainAll(collection44);
    java2.util2.SortedSet sortedSet46 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet43);
    java2.util2.Collection collection47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet46);
    java2.util2.List list48 = java2.util2.Collections.singletonList((java.lang.Object)collection47);
    int i49 = java2.util2.Collections.indexOfSubList(list32, list48);
    int i50 = java2.util2.Collections.lastIndexOfSubList(list23, list32);
    java2.util2.Map map51 = java2.util2.Collections.singletonMap((java.lang.Object)obj_array13, (java.lang.Object)list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + false+ "'", obj5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map51);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test087"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)collection23);
    int i25 = java2.util2.Collections.indexOfSubList(list8, list24);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj26 = java2.util2.Collections.max((java2.util2.Collection)list24);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test088"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet7);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)0L);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java2.util2.Collections.copy((java2.util2.List)arrayList5, (java2.util2.List)arrayList11);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    boolean b19 = treeSet17.contains((java.lang.Object)(-1.0f));
    boolean b21 = treeSet17.equals((java.lang.Object)100.0f);
    java2.util2.List list24 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list24, 1);
    java2.util2.List list29 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list29, 1);
    int i32 = java2.util2.Collections.lastIndexOfSubList(list24, list29);
    boolean b33 = treeSet17.retainAll((java2.util2.Collection)list24);
    java2.util2.Comparator comparator34 = null;
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet(comparator34);
    java2.util2.Collection collection36 = null;
    boolean b37 = treeSet35.retainAll(collection36);
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet35);
    java2.util2.Collection collection39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet38);
    java2.util2.List list40 = java2.util2.Collections.singletonList((java.lang.Object)collection39);
    int i41 = java2.util2.Collections.indexOfSubList(list24, list40);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy((java2.util2.List)arrayList11, list40);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == (-1));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test089"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Iterator iterator4 = treeSet1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test090"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet7);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)0L);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java2.util2.Collections.copy((java2.util2.List)arrayList5, (java2.util2.List)arrayList11);
    java2.util2.List list18 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list18, 1);
    java2.util2.List list23 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list23, 1);
    int i26 = java2.util2.Collections.lastIndexOfSubList(list18, list23);
    java2.util2.Comparator comparator27 = null;
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet(comparator27);
    java2.util2.Comparator comparator29 = treeSet28.comparator();
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet28);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet28);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Collections.fill((java2.util2.List)arrayList32, (java.lang.Object)0L);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList32);
    java2.util2.Comparator comparator36 = null;
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet(comparator36);
    boolean b39 = treeSet37.contains((java.lang.Object)(-1.0f));
    boolean b41 = treeSet37.equals((java.lang.Object)100.0f);
    java2.util2.List list44 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list44, 1);
    java2.util2.List list49 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list49, 1);
    int i52 = java2.util2.Collections.lastIndexOfSubList(list44, list49);
    boolean b53 = treeSet37.retainAll((java2.util2.Collection)list44);
    java2.util2.Comparator comparator54 = null;
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet(comparator54);
    java2.util2.Collection collection56 = null;
    boolean b57 = treeSet55.retainAll(collection56);
    java2.util2.SortedSet sortedSet58 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet55);
    java2.util2.Collection collection59 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet58);
    java2.util2.List list60 = java2.util2.Collections.singletonList((java.lang.Object)collection59);
    int i61 = java2.util2.Collections.indexOfSubList(list44, list60);
    int i62 = java2.util2.Collections.lastIndexOfSubList(list35, list44);
    int i63 = java2.util2.Collections.indexOfSubList(list18, list35);
    int i64 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList5, (java.lang.Object)i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test091"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet7);
    boolean b11 = treeSet4.retainAll((java2.util2.Collection)treeSet7);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.Comparator comparator14 = treeSet13.comparator();
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet13);
    java.lang.Object[] obj_array17 = new java.lang.Object[] { treeSet13 };
    java.lang.Object[] obj_array18 = treeSet7.toArray(obj_array17);
    boolean b19 = treeSet1.contains((java.lang.Object)obj_array17);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Comparator comparator22 = treeSet21.comparator();
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)treeSet21);
    java2.util2.Comparator comparator24 = null;
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet(comparator24);
    java2.util2.Collection collection26 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet25);
    boolean b27 = treeSet21.remove((java.lang.Object)treeSet25);
    java.lang.Object obj28 = treeSet25.clone();
    java2.util2.Map map29 = java2.util2.Collections.singletonMap((java.lang.Object)b19, (java.lang.Object)treeSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map29);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test092"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b5 = treeSet1.equals((java.lang.Object)treeSet4);
    java.lang.Object[] obj_array6 = treeSet1.toArray();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)treeSet1);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test093"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet7);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)0L);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java2.util2.Collections.copy((java2.util2.List)arrayList5, (java2.util2.List)arrayList11);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    boolean b19 = treeSet17.contains((java.lang.Object)(-1.0f));
    boolean b21 = treeSet17.equals((java.lang.Object)100.0f);
    java2.util2.List list24 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list24, 1);
    java2.util2.List list29 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list29, 1);
    int i32 = java2.util2.Collections.lastIndexOfSubList(list24, list29);
    boolean b33 = treeSet17.retainAll((java2.util2.Collection)list24);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)b33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test094"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Comparator comparator5 = treeSet4.comparator();
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet4);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    boolean b8 = treeSet1.retainAll((java2.util2.Collection)treeSet4);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.Comparator comparator11 = treeSet10.comparator();
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet10);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet10);
    java.lang.Object[] obj_array14 = new java.lang.Object[] { treeSet10 };
    java.lang.Object[] obj_array15 = treeSet4.toArray(obj_array14);
    treeSet4.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array15);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test095"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Map map6 = java2.util2.Collections.singletonMap((java.lang.Object)comparator3, (java.lang.Object)1L);
    java2.util2.Map map7 = java2.util2.Collections.synchronizedMap(map6);
    java2.util2.Map map8 = java2.util2.Collections.synchronizedMap(map6);
    boolean b9 = treeSet1.remove((java.lang.Object)map6);
    treeSet1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test096"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.Collection collection4 = null;
    boolean b5 = treeSet3.retainAll(collection4);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet6);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)collection7);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection7);
    boolean b10 = treeSet1.equals((java.lang.Object)collection7);
    java.lang.Object obj12 = null;
    java2.util2.Map map13 = java2.util2.Collections.singletonMap((java.lang.Object)"hi!", obj12);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet14 = treeSet1.tailSet((java.lang.Object)map13);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map13);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test097"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj18 = treeSet1.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test098"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list2, random11);
    java.lang.Object obj13 = java2.util2.Collections.min((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 0.0f+ "'", obj13.equals(0.0f));

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test099"); }


    java2.util2.Collection collection0 = null;
    java2.util2.Comparator comparator1 = null;
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet(comparator1);
    java2.util2.Collection collection3 = null;
    boolean b4 = treeSet2.retainAll(collection3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet2);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet5);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection6);
    java2.util2.List list10 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.Random random12 = null;
    java2.util2.Collections.shuffle(list10, random12);
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet15);
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.SortedSet sortedSet19 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet18);
    boolean b20 = treeSet15.removeAll((java2.util2.Collection)sortedSet19);
    boolean b22 = java2.util2.Collections.replaceAll(list10, (java.lang.Object)treeSet15, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator23 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj24 = java2.util2.Collections.min((java2.util2.Collection)list10, comparator23);
    java.lang.Object obj25 = java2.util2.Collections.min((java2.util2.Collection)list7, comparator23);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj26 = java2.util2.Collections.min(collection0, comparator23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 0.0f+ "'", obj24.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test100"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java.lang.String str5 = treeSet1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test101"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java.lang.Object obj10 = null;
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet7, obj10);
    boolean b12 = treeSet1.contains((java.lang.Object)map11);
    int i13 = treeSet1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test102"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b6 = treeSet4.contains((java.lang.Object)(-1.0f));
    boolean b8 = treeSet4.equals((java.lang.Object)100.0f);
    java2.util2.List list11 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list11, 1);
    java2.util2.List list16 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list16, 1);
    int i19 = java2.util2.Collections.lastIndexOfSubList(list11, list16);
    boolean b20 = treeSet4.retainAll((java2.util2.Collection)list11);
    java2.util2.Comparator comparator21 = null;
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet(comparator21);
    java2.util2.SortedSet sortedSet23 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet22);
    boolean b25 = treeSet22.add((java.lang.Object)false);
    boolean b26 = treeSet4.retainAll((java2.util2.Collection)treeSet22);
    java2.util2.List list29 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list30 = java2.util2.Collections.unmodifiableList(list29);
    java2.util2.Random random31 = null;
    java2.util2.Collections.shuffle(list29, random31);
    java2.util2.Collections.reverse(list29);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet34 = treeSet1.subSet((java.lang.Object)treeSet4, (java.lang.Object)list29);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test103"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    boolean b7 = treeSet1.remove((java.lang.Object)treeSet5);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.Collection collection11 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet10);
    boolean b13 = treeSet10.equals((java.lang.Object)1L);
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet10);
    java2.util2.Comparator comparator15 = null;
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet(comparator15);
    java2.util2.Comparator comparator17 = treeSet16.comparator();
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet16);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet16);
    java2.util2.ArrayList arrayList20 = java2.util2.Collections.list(enumeration19);
    java2.util2.Comparator comparator21 = null;
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet(comparator21);
    java2.util2.Comparator comparator23 = treeSet22.comparator();
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet22);
    java2.util2.Enumeration enumeration25 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet22);
    java2.util2.ArrayList arrayList26 = java2.util2.Collections.list(enumeration25);
    java2.util2.Collections.fill((java2.util2.List)arrayList26, (java.lang.Object)0L);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList26);
    java2.util2.Collections.copy((java2.util2.List)arrayList20, (java2.util2.List)arrayList26);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet31 = treeSet1.subSet((java.lang.Object)treeSet10, (java.lang.Object)arrayList26);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test104"); }


    java2.util2.List list1 = java2.util2.Collections.singletonList((java.lang.Object)"[]");
    java2.util2.List list4 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list4, 1);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list9, 1);
    int i12 = java2.util2.Collections.lastIndexOfSubList(list4, list9);
    java2.util2.Random random13 = null;
    java2.util2.Collections.shuffle(list4, random13);
    java2.util2.Random random15 = null;
    java2.util2.Collections.shuffle(list4, random15);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list1, list4);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test105"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list9, 1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list14, 1);
    int i17 = java2.util2.Collections.lastIndexOfSubList(list9, list14);
    boolean b18 = treeSet1.containsAll((java2.util2.Collection)list9);
    java2.util2.Comparator comparator19 = null;
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet(comparator19);
    java2.util2.Comparator comparator21 = treeSet20.comparator();
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet20);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet20);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.Collections.fill((java2.util2.List)arrayList24, (java.lang.Object)0L);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList24);
    java2.util2.List list30 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i31 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList24, list30);
    java2.util2.Comparator comparator32 = null;
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet(comparator32);
    java2.util2.Comparator comparator34 = treeSet33.comparator();
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet33);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet33);
    java2.util2.ArrayList arrayList37 = java2.util2.Collections.list(enumeration36);
    java2.util2.Collections.fill((java2.util2.List)arrayList37, (java.lang.Object)0L);
    java2.util2.List list40 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList37);
    java2.util2.Comparator comparator41 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list40, comparator41);
    java2.util2.Collections.shuffle(list40);
    java2.util2.Collections.reverse(list40);
    java2.util2.Comparator comparator45 = null;
    java2.util2.TreeSet treeSet46 = new java2.util2.TreeSet(comparator45);
    java2.util2.Comparator comparator47 = treeSet46.comparator();
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet46);
    java2.util2.Enumeration enumeration49 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet46);
    java2.util2.ArrayList arrayList50 = java2.util2.Collections.list(enumeration49);
    java2.util2.Collections.fill((java2.util2.List)arrayList50, (java.lang.Object)0L);
    java.lang.String str53 = arrayList50.toString();
    java2.util2.Comparator comparator54 = null;
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet(comparator54);
    java2.util2.Comparator comparator56 = treeSet55.comparator();
    java2.util2.Collection collection57 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet55);
    java2.util2.Enumeration enumeration58 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet55);
    java2.util2.ArrayList arrayList59 = java2.util2.Collections.list(enumeration58);
    java2.util2.Collections.fill((java2.util2.List)arrayList50, (java.lang.Object)arrayList59);
    java2.util2.List list63 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list64 = java2.util2.Collections.unmodifiableList(list63);
    java2.util2.Random random65 = null;
    java2.util2.Collections.shuffle(list63, random65);
    java2.util2.Comparator comparator67 = null;
    java2.util2.TreeSet treeSet68 = new java2.util2.TreeSet(comparator67);
    java2.util2.SortedSet sortedSet69 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet68);
    java2.util2.Comparator comparator70 = null;
    java2.util2.TreeSet treeSet71 = new java2.util2.TreeSet(comparator70);
    java2.util2.SortedSet sortedSet72 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet71);
    boolean b73 = treeSet68.removeAll((java2.util2.Collection)sortedSet72);
    boolean b75 = java2.util2.Collections.replaceAll(list63, (java.lang.Object)treeSet68, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator76 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj77 = java2.util2.Collections.min((java2.util2.Collection)list63, comparator76);
    int i78 = java2.util2.Collections.binarySearch(list40, (java.lang.Object)arrayList59, comparator76);
    java2.util2.TreeSet treeSet79 = new java2.util2.TreeSet(comparator76);
    // The following exception was thrown during execution in test generation
    try {
      int i80 = java2.util2.Collections.binarySearch(list9, (java.lang.Object)arrayList24, comparator76);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet46.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet46.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet46.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[]"+ "'", str53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet68.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet71.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet71.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet71.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 0.0f+ "'", obj77.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet79.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet79.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet79.toString(), "[]");

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test106"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Comparator comparator6 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj7 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator6);
    java2.util2.Comparator comparator8 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet(comparator8);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.fill(list2, (java.lang.Object)treeSet9);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 0.0f+ "'", obj7.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test107"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collections.shuffle(list8);
    java2.util2.Collections.reverse(list8);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Comparator comparator15 = treeSet14.comparator();
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)0L);
    java.lang.String str21 = arrayList18.toString();
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.Comparator comparator24 = treeSet23.comparator();
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet23);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet23);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)arrayList27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Random random33 = null;
    java2.util2.Collections.shuffle(list31, random33);
    java2.util2.Comparator comparator35 = null;
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet(comparator35);
    java2.util2.SortedSet sortedSet37 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet36);
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.SortedSet sortedSet40 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet39);
    boolean b41 = treeSet36.removeAll((java2.util2.Collection)sortedSet40);
    boolean b43 = java2.util2.Collections.replaceAll(list31, (java.lang.Object)treeSet36, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator44 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj45 = java2.util2.Collections.min((java2.util2.Collection)list31, comparator44);
    int i46 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)arrayList27, comparator44);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list8, (-1), 0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 0.0f+ "'", obj45.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test108"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet10);
    boolean b12 = treeSet7.removeAll((java2.util2.Collection)sortedSet11);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)treeSet7, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj16 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator15);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0.0f+ "'", obj16.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test109"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Comparator comparator1 = null;
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet(comparator1);
    java2.util2.Collection collection3 = null;
    boolean b4 = treeSet2.retainAll(collection3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet2);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet5);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection6);
    boolean b8 = treeSet0.add((java.lang.Object)list7);
    java.lang.String str9 = treeSet0.toString();
    java2.util2.Iterator iterator10 = treeSet0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[[[]]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[[[]]]"+ "'", str9.equals("[[[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test110"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet1);
    java2.util2.SortedSet sortedSet8 = treeSet1.tailSet((java.lang.Object)"hi!");
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Set set10 = java2.util2.Collections.singleton((java.lang.Object)collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test111"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet7);
    boolean b11 = treeSet4.retainAll((java2.util2.Collection)treeSet7);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.Comparator comparator14 = treeSet13.comparator();
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet13);
    java.lang.Object[] obj_array17 = new java.lang.Object[] { treeSet13 };
    java.lang.Object[] obj_array18 = treeSet7.toArray(obj_array17);
    boolean b19 = treeSet1.contains((java.lang.Object)obj_array17);
    java.lang.Object[] obj_array20 = treeSet1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array20);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test112"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = treeSet1.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test113"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Collection collection9 = null;
    boolean b10 = treeSet8.retainAll(collection9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet8);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet11);
    boolean b13 = java2.util2.Collections.replaceAll(list5, (java.lang.Object)"", (java.lang.Object)sortedSet11);
    java2.util2.Random random14 = null;
    java2.util2.Collections.shuffle(list5, random14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test114"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Collection collection18 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test115"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)treeSet3);
    boolean b6 = treeSet1.retainAll((java2.util2.Collection)treeSet5);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    boolean b9 = treeSet5.remove((java.lang.Object)treeSet8);
    java.lang.Object obj10 = treeSet5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test116"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    boolean b7 = treeSet1.remove((java.lang.Object)treeSet5);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj8 = treeSet1.last();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test117"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    java2.util2.Collection collection6 = null;
    boolean b7 = treeSet5.retainAll(collection6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet5);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet8);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)sortedSet8);
    boolean b11 = treeSet1.containsAll((java2.util2.Collection)sortedSet8);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet13);
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet((java2.util2.Collection)treeSet13);
    treeSet13.clear();
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.Collection collection19 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet18);
    boolean b21 = treeSet18.equals((java.lang.Object)1L);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    boolean b23 = treeSet13.removeAll(collection22);
    java.lang.String str24 = treeSet13.toString();
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    java2.util2.SortedSet sortedSet27 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet26);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)treeSet26);
    boolean b29 = treeSet13.containsAll((java2.util2.Collection)treeSet26);
    java2.util2.List list30 = java2.util2.Collections.singletonList((java.lang.Object)treeSet26);
    java2.util2.List list33 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list34 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Random random35 = null;
    java2.util2.Collections.shuffle(list33, random35);
    java2.util2.Comparator comparator37 = null;
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet(comparator37);
    java2.util2.SortedSet sortedSet39 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet38);
    java2.util2.Comparator comparator40 = null;
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet(comparator40);
    java2.util2.SortedSet sortedSet42 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet41);
    boolean b43 = treeSet38.removeAll((java2.util2.Collection)sortedSet42);
    boolean b45 = java2.util2.Collections.replaceAll(list33, (java.lang.Object)treeSet38, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator46 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj47 = java2.util2.Collections.min((java2.util2.Collection)list33, comparator46);
    java.lang.Object obj48 = java2.util2.Collections.min((java2.util2.Collection)list30, comparator46);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj49 = java2.util2.Collections.min((java2.util2.Collection)treeSet1, comparator46);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 0.0f+ "'", obj47.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj48);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test118"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)collection23);
    int i25 = java2.util2.Collections.indexOfSubList(list8, list24);
    java2.util2.Comparator comparator27 = null;
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet(comparator27);
    java2.util2.Collection collection29 = null;
    boolean b30 = treeSet28.retainAll(collection29);
    java2.util2.SortedSet sortedSet31 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet28);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet31);
    java2.util2.List list33 = java2.util2.Collections.singletonList((java.lang.Object)collection32);
    java2.util2.List list36 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list37 = java2.util2.Collections.unmodifiableList(list36);
    java2.util2.Random random38 = null;
    java2.util2.Collections.shuffle(list36, random38);
    java2.util2.Comparator comparator40 = null;
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet(comparator40);
    java2.util2.SortedSet sortedSet42 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet41);
    java2.util2.Comparator comparator43 = null;
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet(comparator43);
    java2.util2.SortedSet sortedSet45 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet44);
    boolean b46 = treeSet41.removeAll((java2.util2.Collection)sortedSet45);
    boolean b48 = java2.util2.Collections.replaceAll(list36, (java.lang.Object)treeSet41, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator49 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj50 = java2.util2.Collections.min((java2.util2.Collection)list36, comparator49);
    java.lang.Object obj51 = java2.util2.Collections.min((java2.util2.Collection)list33, comparator49);
    // The following exception was thrown during execution in test generation
    try {
      int i52 = java2.util2.Collections.binarySearch(list24, (java.lang.Object)'4', comparator49);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 0.0f+ "'", obj50.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj51);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test119"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    int i10 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList5, (java.lang.Object)(short)(-1));
    java2.util2.List list11 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test120"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj5 = java2.util2.Collections.min((java2.util2.Collection)treeSet1);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test121"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.SortedSet sortedSet19 = treeSet1.headSet((java.lang.Object)(short)1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj20 = treeSet1.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test122"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    boolean b6 = treeSet1.equals((java.lang.Object)(short)100);
    boolean b7 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test123"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.Enumeration enumeration10 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet7);
    java2.util2.ArrayList arrayList11 = java2.util2.Collections.list(enumeration10);
    java2.util2.Collections.fill((java2.util2.List)arrayList11, (java.lang.Object)0L);
    java2.util2.List list14 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList11);
    java2.util2.Collections.copy((java2.util2.List)arrayList5, (java2.util2.List)arrayList11);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.Comparator comparator18 = treeSet17.comparator();
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet17);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.Collections.fill((java2.util2.List)arrayList21, (java.lang.Object)0L);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList21);
    java2.util2.Comparator comparator25 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list24, comparator25);
    java2.util2.Collections.shuffle(list24);
    java2.util2.Collections.reverse(list24);
    java2.util2.Comparator comparator29 = null;
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet(comparator29);
    java2.util2.Comparator comparator31 = treeSet30.comparator();
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet30);
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet30);
    java2.util2.ArrayList arrayList34 = java2.util2.Collections.list(enumeration33);
    java2.util2.Collections.fill((java2.util2.List)arrayList34, (java.lang.Object)0L);
    java.lang.String str37 = arrayList34.toString();
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.Comparator comparator40 = treeSet39.comparator();
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet39);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet39);
    java2.util2.ArrayList arrayList43 = java2.util2.Collections.list(enumeration42);
    java2.util2.Collections.fill((java2.util2.List)arrayList34, (java.lang.Object)arrayList43);
    java2.util2.List list47 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list47);
    java2.util2.Random random49 = null;
    java2.util2.Collections.shuffle(list47, random49);
    java2.util2.Comparator comparator51 = null;
    java2.util2.TreeSet treeSet52 = new java2.util2.TreeSet(comparator51);
    java2.util2.SortedSet sortedSet53 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet52);
    java2.util2.Comparator comparator54 = null;
    java2.util2.TreeSet treeSet55 = new java2.util2.TreeSet(comparator54);
    java2.util2.SortedSet sortedSet56 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet55);
    boolean b57 = treeSet52.removeAll((java2.util2.Collection)sortedSet56);
    boolean b59 = java2.util2.Collections.replaceAll(list47, (java.lang.Object)treeSet52, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator60 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj61 = java2.util2.Collections.min((java2.util2.Collection)list47, comparator60);
    int i62 = java2.util2.Collections.binarySearch(list24, (java.lang.Object)arrayList43, comparator60);
    java2.util2.TreeSet treeSet63 = new java2.util2.TreeSet(comparator60);
    java2.util2.Collections.sort((java2.util2.List)arrayList11, comparator60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[]"+ "'", str37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet52.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet55.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet55.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj61 + "' != '" + 0.0f+ "'", obj61.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet63.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet63.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet63.toString(), "[]");

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test124"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Map map3 = java2.util2.Collections.singletonMap((java.lang.Object)comparator0, (java.lang.Object)1L);
    java2.util2.Map map4 = java2.util2.Collections.synchronizedMap(map3);
    java2.util2.Map map5 = java2.util2.Collections.synchronizedMap(map3);
    java2.util2.Map map6 = java2.util2.Collections.unmodifiableMap(map3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test125"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java.lang.Object[] obj_array6 = treeSet3.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test126"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java.lang.Object obj5 = treeSet1.first();
    java2.util2.Iterator iterator6 = treeSet1.iterator();
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Comparator comparator9 = treeSet8.comparator();
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Collections.fill((java2.util2.List)arrayList12, (java.lang.Object)0L);
    boolean b15 = treeSet1.addAll((java2.util2.Collection)arrayList12);
    java.lang.Object obj16 = treeSet1.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + false+ "'", obj5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + false+ "'", obj16.equals(false));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test127"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.Comparator comparator11 = null;
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet(comparator11);
    java2.util2.Comparator comparator13 = treeSet12.comparator();
    java2.util2.Collection collection14 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet12);
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet12);
    java2.util2.ArrayList arrayList16 = java2.util2.Collections.list(enumeration15);
    java2.util2.Collections.fill((java2.util2.List)arrayList16, (java.lang.Object)0L);
    java2.util2.List list19 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList16);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    boolean b23 = treeSet21.contains((java.lang.Object)(-1.0f));
    boolean b25 = treeSet21.equals((java.lang.Object)100.0f);
    java2.util2.List list28 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list28, 1);
    java2.util2.List list33 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list33, 1);
    int i36 = java2.util2.Collections.lastIndexOfSubList(list28, list33);
    boolean b37 = treeSet21.retainAll((java2.util2.Collection)list28);
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.Collection collection40 = null;
    boolean b41 = treeSet39.retainAll(collection40);
    java2.util2.SortedSet sortedSet42 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet39);
    java2.util2.Collection collection43 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet42);
    java2.util2.List list44 = java2.util2.Collections.singletonList((java.lang.Object)collection43);
    int i45 = java2.util2.Collections.indexOfSubList(list28, list44);
    int i46 = java2.util2.Collections.lastIndexOfSubList(list19, list28);
    int i47 = java2.util2.Collections.indexOfSubList(list2, list19);
    java2.util2.List list48 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Comparator comparator49 = null;
    java2.util2.TreeSet treeSet50 = new java2.util2.TreeSet(comparator49);
    java2.util2.Comparator comparator51 = treeSet50.comparator();
    java2.util2.Collection collection52 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet50);
    java2.util2.Enumeration enumeration53 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet50);
    java2.util2.ArrayList arrayList54 = java2.util2.Collections.list(enumeration53);
    java2.util2.Collections.fill((java2.util2.List)arrayList54, (java.lang.Object)0L);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList54);
    java2.util2.Collections.reverse((java2.util2.List)arrayList54);
    int i59 = java2.util2.Collections.lastIndexOfSubList(list48, (java2.util2.List)arrayList54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet50.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet50.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet50.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test128"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    java2.util2.Collection collection4 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = treeSet1.headSet((java.lang.Object)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test129"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)treeSet14);
    boolean b17 = treeSet1.containsAll((java2.util2.Collection)treeSet14);
    java2.util2.List list18 = java2.util2.Collections.singletonList((java.lang.Object)treeSet14);
    java2.util2.Collections.reverse(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test130"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.Collections.reverse(list2);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list9);
    java2.util2.List list11 = java2.util2.Collections.synchronizedList(list9);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)list11);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list2, list11);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test131"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Collections.reverse(list2);
    java2.util2.Collections.reverse(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test132"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Set set2 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set2);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test133"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list2, (-1), 0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test134"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)collection5);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection(collection5);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test135"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    treeSet1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test136"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.List list11 = java2.util2.Collections.synchronizedList(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test137"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java.lang.Object obj10 = null;
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet7, obj10);
    boolean b12 = treeSet1.contains((java.lang.Object)map11);
    treeSet1.clear();
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet15);
    java2.util2.Comparator comparator17 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    boolean b19 = treeSet15.equals((java.lang.Object)treeSet18);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Map map23 = java2.util2.Collections.singletonMap((java.lang.Object)comparator20, (java.lang.Object)1L);
    java2.util2.Map map24 = java2.util2.Collections.synchronizedMap(map23);
    boolean b25 = treeSet15.contains((java.lang.Object)map24);
    java2.util2.Comparator comparator26 = treeSet15.comparator();
    boolean b27 = treeSet1.remove((java.lang.Object)comparator26);
    java2.util2.Comparator comparator28 = null;
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet(comparator28);
    java2.util2.Collection collection30 = null;
    boolean b31 = treeSet29.retainAll(collection30);
    java2.util2.SortedSet sortedSet32 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet29);
    java2.util2.Collection collection33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet32);
    java2.util2.Set set34 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet32);
    java2.util2.List list35 = java2.util2.Collections.singletonList((java.lang.Object)set34);
    boolean b36 = treeSet1.add((java.lang.Object)list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[[[]]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test138"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)treeSet14);
    boolean b17 = treeSet1.containsAll((java2.util2.Collection)treeSet14);
    int i18 = treeSet14.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test139"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet1);
    java2.util2.SortedSet sortedSet8 = treeSet1.tailSet((java.lang.Object)"hi!");
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Iterator iterator10 = treeSet1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test140"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)treeSet14);
    boolean b17 = treeSet1.containsAll((java2.util2.Collection)treeSet14);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)treeSet19);
    boolean b21 = treeSet14.equals((java.lang.Object)treeSet20);
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.SortedSet sortedSet24 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet23);
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet((java2.util2.Collection)treeSet23);
    treeSet23.clear();
    java2.util2.Comparator comparator27 = null;
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet(comparator27);
    java2.util2.Collection collection29 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet28);
    boolean b31 = treeSet28.equals((java.lang.Object)1L);
    java2.util2.Collection collection32 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet28);
    boolean b33 = treeSet23.removeAll(collection32);
    java.lang.String str34 = treeSet23.toString();
    java2.util2.Comparator comparator35 = null;
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet(comparator35);
    java2.util2.Collection collection37 = null;
    boolean b38 = treeSet36.retainAll(collection37);
    java2.util2.SortedSet sortedSet39 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet36);
    java2.util2.Collection collection40 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet39);
    java2.util2.Set set41 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet39);
    boolean b42 = treeSet23.remove((java.lang.Object)set41);
    boolean b43 = treeSet20.remove((java.lang.Object)b42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[]"+ "'", str34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test141"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.SortedSet sortedSet19 = treeSet1.headSet((java.lang.Object)(short)1);
    boolean b21 = treeSet1.contains((java.lang.Object)1.0f);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator23 = null;
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(comparator23);
    java2.util2.SortedSet sortedSet25 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet24);
    boolean b27 = treeSet24.add((java.lang.Object)false);
    java2.util2.Comparator comparator28 = null;
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet(comparator28);
    java2.util2.Collection collection30 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet29);
    boolean b32 = treeSet29.equals((java.lang.Object)1L);
    java2.util2.Collection collection33 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet29);
    java2.util2.SortedSet sortedSet34 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet29);
    java.lang.Object[] obj_array35 = treeSet29.toArray();
    java.lang.Object[] obj_array36 = treeSet24.toArray(obj_array35);
    boolean b37 = treeSet1.containsAll((java2.util2.Collection)treeSet24);
    java.lang.Object obj38 = treeSet24.first();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + false+ "'", obj38.equals(false));

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test142"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b5 = treeSet1.equals((java.lang.Object)treeSet4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Map map9 = java2.util2.Collections.singletonMap((java.lang.Object)comparator6, (java.lang.Object)1L);
    java2.util2.Map map10 = java2.util2.Collections.synchronizedMap(map9);
    boolean b11 = treeSet1.contains((java.lang.Object)map10);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.Comparator comparator14 = treeSet13.comparator();
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    java2.util2.Enumeration enumeration16 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet13);
    java2.util2.ArrayList arrayList17 = java2.util2.Collections.list(enumeration16);
    java2.util2.Collections.fill((java2.util2.List)arrayList17, (java.lang.Object)0L);
    java2.util2.List list20 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList17);
    java2.util2.Comparator comparator21 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list20, comparator21);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj23 = java2.util2.Collections.max((java2.util2.Collection)treeSet1, comparator21);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator21);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test143"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.SortedSet sortedSet9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet8);
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet((java2.util2.Collection)treeSet8);
    treeSet8.clear();
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet13);
    boolean b16 = treeSet13.equals((java.lang.Object)1L);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet13);
    boolean b18 = treeSet8.removeAll(collection17);
    java.lang.String str19 = treeSet8.toString();
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet21);
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet((java2.util2.Collection)treeSet21);
    boolean b24 = treeSet8.containsAll((java2.util2.Collection)treeSet21);
    java2.util2.List list25 = java2.util2.Collections.singletonList((java.lang.Object)treeSet21);
    java2.util2.Collections.rotate(list25, 1);
    boolean b28 = treeSet1.retainAll((java2.util2.Collection)list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[]"+ "'", str19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test144"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collections.shuffle(list8);
    java2.util2.Collections.reverse(list8);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Comparator comparator15 = treeSet14.comparator();
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)0L);
    java.lang.String str21 = arrayList18.toString();
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.Comparator comparator24 = treeSet23.comparator();
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet23);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet23);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)arrayList27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Random random33 = null;
    java2.util2.Collections.shuffle(list31, random33);
    java2.util2.Comparator comparator35 = null;
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet(comparator35);
    java2.util2.SortedSet sortedSet37 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet36);
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.SortedSet sortedSet40 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet39);
    boolean b41 = treeSet36.removeAll((java2.util2.Collection)sortedSet40);
    boolean b43 = java2.util2.Collections.replaceAll(list31, (java.lang.Object)treeSet36, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator44 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj45 = java2.util2.Collections.min((java2.util2.Collection)list31, comparator44);
    int i46 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)arrayList27, comparator44);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList27);
    java2.util2.Comparator comparator48 = null;
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet(comparator48);
    java2.util2.SortedSet sortedSet50 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet49);
    boolean b52 = treeSet49.add((java.lang.Object)false);
    java.lang.Object obj53 = treeSet49.clone();
    java2.util2.List list56 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Random random58 = null;
    java2.util2.Collections.shuffle(list56, random58);
    java2.util2.Comparator comparator60 = null;
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet(comparator60);
    java2.util2.SortedSet sortedSet62 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet61);
    java2.util2.Comparator comparator63 = null;
    java2.util2.TreeSet treeSet64 = new java2.util2.TreeSet(comparator63);
    java2.util2.SortedSet sortedSet65 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet64);
    boolean b66 = treeSet61.removeAll((java2.util2.Collection)sortedSet65);
    boolean b68 = java2.util2.Collections.replaceAll(list56, (java.lang.Object)treeSet61, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator69 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj70 = java2.util2.Collections.min((java2.util2.Collection)list56, comparator69);
    int i71 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList27, obj53, comparator69);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 0.0f+ "'", obj45.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet64.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet64.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet64.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 0.0f+ "'", obj70.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == (-1));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test145"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Set set4 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj5 = java2.util2.Collections.min((java2.util2.Collection)treeSet1);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set4);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test146"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet10);
    boolean b12 = treeSet7.removeAll((java2.util2.Collection)sortedSet11);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)treeSet7, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.Comparator comparator18 = treeSet17.comparator();
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet17);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.Collections.fill((java2.util2.List)arrayList21, (java.lang.Object)0L);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList21);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    boolean b28 = treeSet26.contains((java.lang.Object)(-1.0f));
    boolean b30 = treeSet26.equals((java.lang.Object)100.0f);
    java2.util2.List list33 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list33, 1);
    java2.util2.List list38 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list38, 1);
    int i41 = java2.util2.Collections.lastIndexOfSubList(list33, list38);
    boolean b42 = treeSet26.retainAll((java2.util2.Collection)list33);
    java2.util2.Comparator comparator43 = null;
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet(comparator43);
    java2.util2.Collection collection45 = null;
    boolean b46 = treeSet44.retainAll(collection45);
    java2.util2.SortedSet sortedSet47 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet44);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet47);
    java2.util2.List list49 = java2.util2.Collections.singletonList((java.lang.Object)collection48);
    int i50 = java2.util2.Collections.indexOfSubList(list33, list49);
    int i51 = java2.util2.Collections.lastIndexOfSubList(list24, list33);
    java2.util2.Collections.shuffle(list24);
    java2.util2.List list53 = java2.util2.Collections.nCopies(100, (java.lang.Object)list24);
    int i54 = java2.util2.Collections.indexOfSubList(list2, list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test147"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i12 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList5, list11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Comparator comparator15 = treeSet14.comparator();
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Comparator comparator19 = null;
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet(comparator19);
    java2.util2.Comparator comparator21 = treeSet20.comparator();
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet20);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet20);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.Collections.fill((java2.util2.List)arrayList24, (java.lang.Object)0L);
    java2.util2.List list27 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList24);
    java2.util2.Collections.copy((java2.util2.List)arrayList18, (java2.util2.List)arrayList24);
    java2.util2.Map map30 = java2.util2.Collections.singletonMap((java.lang.Object)arrayList18, (java.lang.Object)100L);
    int i31 = java2.util2.Collections.lastIndexOfSubList(list11, (java2.util2.List)arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test148"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.Random random10 = null;
    java2.util2.Collections.shuffle(list8, random10);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet13);
    java2.util2.Comparator comparator15 = null;
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet(comparator15);
    java2.util2.SortedSet sortedSet17 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet16);
    boolean b18 = treeSet13.removeAll((java2.util2.Collection)sortedSet17);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)treeSet13, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator21 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj22 = java2.util2.Collections.min((java2.util2.Collection)list8, comparator21);
    java2.util2.Collections.sort((java2.util2.List)arrayList5, comparator21);
    java2.util2.Collections.reverse((java2.util2.List)arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 0.0f+ "'", obj22.equals(0.0f));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test149"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test150"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b5 = treeSet1.equals((java.lang.Object)treeSet4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Map map9 = java2.util2.Collections.singletonMap((java.lang.Object)comparator6, (java.lang.Object)1L);
    java2.util2.Map map10 = java2.util2.Collections.synchronizedMap(map9);
    boolean b11 = treeSet1.contains((java.lang.Object)map10);
    java2.util2.Map map12 = java2.util2.Collections.unmodifiableMap(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map12);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test151"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Map map3 = java2.util2.Collections.singletonMap((java.lang.Object)comparator0, (java.lang.Object)1L);
    java2.util2.Map map4 = java2.util2.Collections.synchronizedMap(map3);
    java2.util2.Map map5 = java2.util2.Collections.unmodifiableMap(map4);
    java2.util2.Map map6 = java2.util2.Collections.synchronizedMap(map4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test152"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test153"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Comparator comparator5 = treeSet4.comparator();
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet4);
    java2.util2.Enumeration enumeration7 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet4);
    boolean b8 = treeSet1.retainAll((java2.util2.Collection)treeSet4);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)treeSet10);
    treeSet10.clear();
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet15);
    boolean b18 = treeSet15.equals((java.lang.Object)1L);
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    boolean b20 = treeSet10.removeAll(collection19);
    java.lang.String str21 = treeSet10.toString();
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.SortedSet sortedSet24 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet23);
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet((java2.util2.Collection)treeSet23);
    boolean b26 = treeSet10.containsAll((java2.util2.Collection)treeSet23);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)treeSet23);
    java2.util2.List list30 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list31 = java2.util2.Collections.unmodifiableList(list30);
    java2.util2.Random random32 = null;
    java2.util2.Collections.shuffle(list30, random32);
    java2.util2.Comparator comparator34 = null;
    java2.util2.TreeSet treeSet35 = new java2.util2.TreeSet(comparator34);
    java2.util2.SortedSet sortedSet36 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet35);
    java2.util2.Comparator comparator37 = null;
    java2.util2.TreeSet treeSet38 = new java2.util2.TreeSet(comparator37);
    java2.util2.SortedSet sortedSet39 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet38);
    boolean b40 = treeSet35.removeAll((java2.util2.Collection)sortedSet39);
    boolean b42 = java2.util2.Collections.replaceAll(list30, (java.lang.Object)treeSet35, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator43 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj44 = java2.util2.Collections.min((java2.util2.Collection)list30, comparator43);
    java.lang.Object obj45 = java2.util2.Collections.min((java2.util2.Collection)list27, comparator43);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj46 = java2.util2.Collections.max((java2.util2.Collection)treeSet4, comparator43);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet35.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet35.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet38.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet38.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 0.0f+ "'", obj44.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test154"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list9, 1);
    java2.util2.List list14 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list14, 1);
    int i17 = java2.util2.Collections.lastIndexOfSubList(list9, list14);
    boolean b18 = treeSet1.containsAll((java2.util2.Collection)list9);
    java2.util2.Collections.reverse(list9);
    java2.util2.Collections.rotate(list9, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test155"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java.lang.Object obj5 = treeSet1.first();
    java2.util2.Iterator iterator6 = treeSet1.iterator();
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Comparator comparator9 = treeSet8.comparator();
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Collections.fill((java2.util2.List)arrayList12, (java.lang.Object)0L);
    boolean b15 = treeSet1.addAll((java2.util2.Collection)arrayList12);
    java2.util2.Set set16 = java2.util2.Collections.singleton((java.lang.Object)arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + false+ "'", obj5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test156"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java.lang.Object[] obj_array7 = treeSet1.toArray();
    java2.util2.Comparator comparator8 = null;
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet(comparator8);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.Collection collection12 = null;
    boolean b13 = treeSet11.retainAll(collection12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet11);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)collection15);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection(collection15);
    boolean b18 = treeSet9.equals((java.lang.Object)collection15);
    boolean b19 = treeSet1.addAll(collection15);
    java2.util2.Comparator comparator20 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj22 = java2.util2.Collections.min((java2.util2.Collection)treeSet1, comparator20);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test157"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    int i12 = treeSet1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test158"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.SortedSet sortedSet19 = treeSet1.headSet((java.lang.Object)(short)1);
    boolean b21 = treeSet1.contains((java.lang.Object)1.0f);
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.SortedSet sortedSet24 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet23);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    java2.util2.SortedSet sortedSet27 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet26);
    boolean b28 = treeSet23.removeAll((java2.util2.Collection)sortedSet27);
    boolean b29 = treeSet1.retainAll((java2.util2.Collection)sortedSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test159"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    boolean b7 = treeSet1.remove((java.lang.Object)treeSet5);
    java.lang.Object obj8 = null;
    boolean b9 = treeSet5.remove(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test160"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = null;
    java2.util2.Map map5 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet1, obj4);
    java.lang.Object[] obj_array6 = treeSet1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array6);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test161"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java.lang.Object[] obj_array7 = treeSet1.toArray();
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test162"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = treeSet1.comparator();
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    boolean b9 = treeSet7.contains((java.lang.Object)(-1.0f));
    boolean b11 = treeSet7.equals((java.lang.Object)100.0f);
    java2.util2.Set set12 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet7);
    java2.util2.SortedSet sortedSet14 = treeSet7.tailSet((java.lang.Object)"hi!");
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.Comparator comparator18 = treeSet17.comparator();
    java2.util2.Collection collection19 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    java2.util2.Enumeration enumeration20 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet17);
    java2.util2.ArrayList arrayList21 = java2.util2.Collections.list(enumeration20);
    java2.util2.Collections.fill((java2.util2.List)arrayList21, (java.lang.Object)0L);
    java2.util2.List list24 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList21);
    java2.util2.Comparator comparator25 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list24, comparator25);
    boolean b27 = treeSet7.remove((java.lang.Object)comparator25);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet28 = treeSet1.headSet((java.lang.Object)treeSet7);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test163"); }


    java2.util2.Map map0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Map map1 = java2.util2.Collections.unmodifiableMap(map0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test164"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i12 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList5, list11);
    java2.util2.List list13 = java2.util2.Collections.synchronizedList(list11);
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.Comparator comparator16 = treeSet15.comparator();
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    // The following exception was thrown during execution in test generation
    try {
      int i18 = java2.util2.Collections.binarySearch(list11, (java.lang.Object)treeSet15);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test165"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    int i10 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList5, (java.lang.Object)(short)(-1));
    java2.util2.Comparator comparator11 = null;
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet(comparator11);
    java2.util2.SortedSet sortedSet13 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet12);
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet15);
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.Comparator comparator19 = treeSet18.comparator();
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet18);
    boolean b22 = treeSet15.retainAll((java2.util2.Collection)treeSet18);
    java2.util2.Comparator comparator23 = null;
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(comparator23);
    java2.util2.Comparator comparator25 = treeSet24.comparator();
    java2.util2.Collection collection26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet24);
    java2.util2.Enumeration enumeration27 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet24);
    java.lang.Object[] obj_array28 = new java.lang.Object[] { treeSet24 };
    java.lang.Object[] obj_array29 = treeSet18.toArray(obj_array28);
    boolean b30 = treeSet12.contains((java.lang.Object)obj_array28);
    java2.util2.List list31 = java2.util2.Collections.singletonList((java.lang.Object)b30);
    int i32 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList5, list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test166"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test167"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = java2.util2.Collections.max((java2.util2.Collection)treeSet3);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test168"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Set set1 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test169"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)treeSet3);
    boolean b6 = treeSet1.retainAll((java2.util2.Collection)treeSet5);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    boolean b9 = treeSet5.remove((java.lang.Object)treeSet8);
    treeSet8.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test170"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list2, random11);
    java2.util2.List list15 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list15, 1);
    java2.util2.List list18 = java2.util2.Collections.unmodifiableList(list15);
    java2.util2.Collections.shuffle(list18);
    int i20 = java2.util2.Collections.indexOfSubList(list2, list18);
    // The following exception was thrown during execution in test generation
    try {
      int i22 = java2.util2.Collections.binarySearch(list18, (java.lang.Object)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test171"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Map map6 = java2.util2.Collections.singletonMap((java.lang.Object)comparator3, (java.lang.Object)1L);
    java2.util2.Map map7 = java2.util2.Collections.synchronizedMap(map6);
    java2.util2.Map map8 = java2.util2.Collections.synchronizedMap(map6);
    boolean b9 = treeSet1.remove((java.lang.Object)map6);
    java2.util2.Map map10 = java2.util2.Collections.unmodifiableMap(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test172"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list6, 1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list11, 1);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list6, list11);
    boolean b15 = treeSet1.addAll((java2.util2.Collection)list6);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.Map map20 = java2.util2.Collections.singletonMap((java.lang.Object)comparator17, (java.lang.Object)1L);
    java2.util2.Map map21 = java2.util2.Collections.synchronizedMap(map20);
    java2.util2.Map map22 = java2.util2.Collections.unmodifiableMap(map21);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet23 = treeSet1.tailSet((java.lang.Object)map21);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map22);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test173"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collections.shuffle(list8);
    java2.util2.Collections.reverse(list8);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Comparator comparator15 = treeSet14.comparator();
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)0L);
    java.lang.String str21 = arrayList18.toString();
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.Comparator comparator24 = treeSet23.comparator();
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet23);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet23);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)arrayList27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Random random33 = null;
    java2.util2.Collections.shuffle(list31, random33);
    java2.util2.Comparator comparator35 = null;
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet(comparator35);
    java2.util2.SortedSet sortedSet37 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet36);
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.SortedSet sortedSet40 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet39);
    boolean b41 = treeSet36.removeAll((java2.util2.Collection)sortedSet40);
    boolean b43 = java2.util2.Collections.replaceAll(list31, (java.lang.Object)treeSet36, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator44 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj45 = java2.util2.Collections.min((java2.util2.Collection)list31, comparator44);
    int i46 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)arrayList27, comparator44);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList27);
    java2.util2.Comparator comparator48 = null;
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet(comparator48);
    java2.util2.SortedSet sortedSet50 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet49);
    boolean b52 = treeSet49.add((java.lang.Object)false);
    java.lang.Object obj53 = treeSet49.clone();
    java2.util2.List list56 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list57 = java2.util2.Collections.unmodifiableList(list56);
    java2.util2.Random random58 = null;
    java2.util2.Collections.shuffle(list56, random58);
    java2.util2.Comparator comparator60 = null;
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet(comparator60);
    java2.util2.SortedSet sortedSet62 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet61);
    java2.util2.Comparator comparator63 = null;
    java2.util2.TreeSet treeSet64 = new java2.util2.TreeSet(comparator63);
    java2.util2.SortedSet sortedSet65 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet64);
    boolean b66 = treeSet61.removeAll((java2.util2.Collection)sortedSet65);
    boolean b68 = java2.util2.Collections.replaceAll(list56, (java.lang.Object)treeSet61, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator69 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj70 = java2.util2.Collections.min((java2.util2.Collection)list56, comparator69);
    int i71 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList27, obj53, comparator69);
    java.lang.String str72 = arrayList27.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 0.0f+ "'", obj45.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet64.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet64.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet64.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 0.0f+ "'", obj70.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[]"+ "'", str72.equals("[]"));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test174"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test175"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.Collection collection4 = null;
    boolean b5 = treeSet3.retainAll(collection4);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Collection collection7 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet6);
    java2.util2.List list8 = java2.util2.Collections.singletonList((java.lang.Object)collection7);
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection(collection7);
    boolean b10 = treeSet1.equals((java.lang.Object)collection7);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test176"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Random random6 = null;
    java2.util2.Collections.shuffle((java2.util2.List)arrayList5, random6);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test177"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.SortedSet sortedSet20 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    boolean b22 = treeSet19.add((java.lang.Object)false);
    boolean b23 = treeSet1.retainAll((java2.util2.Collection)treeSet19);
    java2.util2.Comparator comparator24 = null;
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet(comparator24);
    java2.util2.SortedSet sortedSet26 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet25);
    boolean b28 = treeSet25.add((java.lang.Object)false);
    java.lang.Object obj29 = treeSet25.first();
    java2.util2.Comparator comparator30 = null;
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet(comparator30);
    java2.util2.Collection collection32 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet31);
    boolean b34 = treeSet31.equals((java.lang.Object)1L);
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet31);
    java2.util2.SortedSet sortedSet36 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet31);
    java.lang.Object[] obj_array37 = treeSet31.toArray();
    java.lang.Object[] obj_array38 = treeSet25.toArray(obj_array37);
    java.lang.Object[] obj_array39 = treeSet19.toArray(obj_array37);
    java.lang.Object obj40 = treeSet19.last();
    java.lang.Object obj41 = java2.util2.Collections.max((java2.util2.Collection)treeSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + false+ "'", obj29.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + false+ "'", obj40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj41 + "' != '" + false+ "'", obj41.equals(false));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test178"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = treeSet1.comparator();
    java2.util2.Iterator iterator5 = treeSet1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test179"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    boolean b10 = treeSet8.contains((java.lang.Object)(-1.0f));
    boolean b12 = treeSet8.equals((java.lang.Object)100.0f);
    java2.util2.Set set13 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet8);
    java2.util2.Comparator comparator14 = treeSet8.comparator();
    boolean b15 = treeSet1.add((java.lang.Object)comparator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[null]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test180"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)"[]");
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list8, list12);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test181"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.Collection collection9 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet7);
    java.lang.Object obj10 = null;
    java2.util2.Map map11 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet7, obj10);
    boolean b12 = treeSet1.contains((java.lang.Object)map11);
    treeSet1.clear();
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.Collection collection16 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet15);
    java2.util2.Comparator comparator17 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    boolean b19 = treeSet15.equals((java.lang.Object)treeSet18);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Map map23 = java2.util2.Collections.singletonMap((java.lang.Object)comparator20, (java.lang.Object)1L);
    java2.util2.Map map24 = java2.util2.Collections.synchronizedMap(map23);
    boolean b25 = treeSet15.contains((java.lang.Object)map24);
    java2.util2.Comparator comparator26 = treeSet15.comparator();
    boolean b27 = treeSet1.remove((java.lang.Object)comparator26);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test182"); }


    java2.util2.List list0 = null;
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.rotate(list0, 100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test183"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.SortedSet sortedSet19 = treeSet1.headSet((java.lang.Object)(short)1);
    boolean b21 = treeSet1.contains((java.lang.Object)1.0f);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator23 = null;
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(comparator23);
    java2.util2.Collection collection25 = null;
    boolean b26 = treeSet24.retainAll(collection25);
    java2.util2.SortedSet sortedSet27 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet24);
    java2.util2.Collection collection28 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet27);
    java2.util2.List list29 = java2.util2.Collections.singletonList((java.lang.Object)collection28);
    java2.util2.List list32 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list33 = java2.util2.Collections.unmodifiableList(list32);
    java2.util2.Random random34 = null;
    java2.util2.Collections.shuffle(list32, random34);
    java2.util2.Comparator comparator36 = null;
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet(comparator36);
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet37);
    java2.util2.Comparator comparator39 = null;
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet(comparator39);
    java2.util2.SortedSet sortedSet41 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet40);
    boolean b42 = treeSet37.removeAll((java2.util2.Collection)sortedSet41);
    boolean b44 = java2.util2.Collections.replaceAll(list32, (java.lang.Object)treeSet37, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator45 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj46 = java2.util2.Collections.min((java2.util2.Collection)list32, comparator45);
    java.lang.Object obj47 = java2.util2.Collections.min((java2.util2.Collection)list29, comparator45);
    boolean b48 = treeSet1.equals((java.lang.Object)comparator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 0.0f+ "'", obj46.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test184"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet1);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Collection collection9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet8);
    boolean b11 = treeSet8.equals((java.lang.Object)1L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.SortedSet sortedSet13 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet8);
    java.lang.Object[] obj_array14 = treeSet8.toArray();
    java2.util2.Comparator comparator15 = null;
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet(comparator15);
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.Collection collection19 = null;
    boolean b20 = treeSet18.retainAll(collection19);
    java2.util2.SortedSet sortedSet21 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet18);
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet21);
    java2.util2.List list23 = java2.util2.Collections.singletonList((java.lang.Object)collection22);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection(collection22);
    boolean b25 = treeSet16.equals((java.lang.Object)collection22);
    boolean b26 = treeSet8.addAll(collection22);
    boolean b27 = treeSet1.addAll(collection22);
    java2.util2.List list28 = java2.util2.Collections.singletonList((java.lang.Object)collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list28);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test185"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.SortedSet sortedSet19 = treeSet1.headSet((java.lang.Object)(short)1);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Map map23 = java2.util2.Collections.singletonMap((java.lang.Object)comparator20, (java.lang.Object)1L);
    boolean b24 = treeSet1.remove((java.lang.Object)1L);
    java2.util2.SortedSet sortedSet25 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet((java2.util2.Collection)sortedSet25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)treeSet26);
    java2.util2.Comparator comparator28 = null;
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet(comparator28);
    java2.util2.Comparator comparator30 = treeSet29.comparator();
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet29);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet29);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.Collections.fill((java2.util2.List)arrayList33, (java.lang.Object)0L);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList33);
    java2.util2.List list39 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i40 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList33, list39);
    java2.util2.Collections.reverse((java2.util2.List)arrayList33);
    int i42 = java2.util2.Collections.indexOfSubList(list27, (java2.util2.List)arrayList33);
    java2.util2.Comparator comparator43 = null;
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet(comparator43);
    boolean b46 = treeSet44.contains((java.lang.Object)(-1.0f));
    java2.util2.List list49 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list49, 1);
    java2.util2.List list54 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list54, 1);
    int i57 = java2.util2.Collections.lastIndexOfSubList(list49, list54);
    boolean b58 = treeSet44.addAll((java2.util2.Collection)list49);
    java2.util2.List list61 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list62 = java2.util2.Collections.unmodifiableList(list61);
    java2.util2.List list63 = java2.util2.Collections.synchronizedList(list61);
    java2.util2.List list64 = java2.util2.Collections.singletonList((java.lang.Object)list63);
    int i65 = java2.util2.Collections.indexOfSubList(list49, list64);
    int i66 = java2.util2.Collections.lastIndexOfSubList(list27, list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test186"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.List list6 = java2.util2.Collections.synchronizedList(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test187"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test188"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b5 = treeSet1.equals((java.lang.Object)treeSet4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)treeSet7);
    treeSet7.clear();
    java2.util2.Comparator comparator11 = null;
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet(comparator11);
    java2.util2.Collection collection13 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet12);
    boolean b15 = treeSet12.equals((java.lang.Object)1L);
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet12);
    boolean b17 = treeSet7.removeAll(collection16);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    boolean b24 = treeSet7.remove((java.lang.Object)sortedSet22);
    boolean b25 = treeSet1.equals((java.lang.Object)b24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test189"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java.lang.Object obj5 = treeSet1.first();
    java2.util2.Iterator iterator6 = treeSet1.iterator();
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.SortedSet sortedSet9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet8);
    boolean b11 = treeSet8.add((java.lang.Object)false);
    java.lang.Object obj12 = treeSet8.first();
    java2.util2.Iterator iterator13 = treeSet8.iterator();
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.Comparator comparator16 = treeSet15.comparator();
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet15);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Collections.fill((java2.util2.List)arrayList19, (java.lang.Object)0L);
    boolean b22 = treeSet8.addAll((java2.util2.Collection)arrayList19);
    boolean b23 = treeSet1.equals((java.lang.Object)treeSet8);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + false+ "'", obj5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + false+ "'", obj12.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test190"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b7 = treeSet4.equals((java.lang.Object)1L);
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet4);
    java2.util2.SortedSet sortedSet9 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet4);
    java.lang.Object[] obj_array10 = treeSet4.toArray();
    boolean b11 = treeSet1.contains((java.lang.Object)treeSet4);
    java2.util2.Set set12 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test191"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list9, 1);
    java2.util2.List list12 = java2.util2.Collections.unmodifiableList(list9);
    java2.util2.Comparator comparator13 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj14 = java2.util2.Collections.min((java2.util2.Collection)list9, comparator13);
    java.lang.Object obj15 = java2.util2.Collections.max((java2.util2.Collection)list6, comparator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 0.0f+ "'", obj14.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 0.0f+ "'", obj15.equals(0.0f));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test192"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i12 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList5, list11);
    java2.util2.Collections.reverse((java2.util2.List)arrayList5);
    java2.util2.Set set14 = java2.util2.Collections.singleton((java.lang.Object)arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test193"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b5 = treeSet1.equals((java.lang.Object)treeSet4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Map map9 = java2.util2.Collections.singletonMap((java.lang.Object)comparator6, (java.lang.Object)1L);
    java2.util2.Map map10 = java2.util2.Collections.synchronizedMap(map9);
    boolean b11 = treeSet1.contains((java.lang.Object)map10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    boolean b16 = treeSet14.contains((java.lang.Object)(-1.0f));
    boolean b18 = treeSet14.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator19 = null;
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet(comparator19);
    java2.util2.Comparator comparator21 = treeSet20.comparator();
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet20);
    java.lang.Object obj23 = null;
    java2.util2.Map map24 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet20, obj23);
    boolean b25 = treeSet14.contains((java.lang.Object)map24);
    java2.util2.Collection collection26 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    boolean b27 = treeSet1.containsAll((java2.util2.Collection)treeSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test194"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java.lang.String str8 = arrayList5.toString();
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.Comparator comparator11 = treeSet10.comparator();
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet10);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet10);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)arrayList14);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.SortedSet sortedSet18 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet17);
    java2.util2.Set set19 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet17);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Collection collection22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet21);
    boolean b23 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList5, (java.lang.Object)set19, (java.lang.Object)treeSet21);
    java.lang.Object[] obj_array24 = arrayList5.toArray();
    java2.util2.Comparator comparator25 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj26 = java2.util2.Collections.min((java2.util2.Collection)arrayList5, comparator25);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator25);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test195"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    treeSet1.clear();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet6);
    boolean b9 = treeSet6.equals((java.lang.Object)1L);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    boolean b11 = treeSet1.removeAll(collection10);
    java.lang.String str12 = treeSet1.toString();
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet((java2.util2.Collection)treeSet14);
    boolean b17 = treeSet1.containsAll((java2.util2.Collection)treeSet14);
    java2.util2.List list18 = java2.util2.Collections.singletonList((java.lang.Object)treeSet14);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj19 = java2.util2.Collections.min((java2.util2.Collection)list18);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test196"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    boolean b7 = treeSet1.remove((java.lang.Object)treeSet5);
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet1);
    int i9 = treeSet8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test197"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.List list6 = java2.util2.Collections.singletonList((java.lang.Object)collection5);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list9);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list9, random11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.SortedSet sortedSet18 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet17);
    boolean b19 = treeSet14.removeAll((java2.util2.Collection)sortedSet18);
    boolean b21 = java2.util2.Collections.replaceAll(list9, (java.lang.Object)treeSet14, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator22 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj23 = java2.util2.Collections.min((java2.util2.Collection)list9, comparator22);
    java.lang.Object obj24 = java2.util2.Collections.min((java2.util2.Collection)list6, comparator22);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    boolean b28 = treeSet26.contains((java.lang.Object)(-1.0f));
    boolean b30 = treeSet26.equals((java.lang.Object)100.0f);
    java2.util2.List list33 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list33, 1);
    java2.util2.List list38 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list38, 1);
    int i41 = java2.util2.Collections.lastIndexOfSubList(list33, list38);
    boolean b42 = treeSet26.retainAll((java2.util2.Collection)list33);
    java2.util2.Comparator comparator43 = null;
    java2.util2.TreeSet treeSet44 = new java2.util2.TreeSet(comparator43);
    java2.util2.Collection collection45 = null;
    boolean b46 = treeSet44.retainAll(collection45);
    java2.util2.SortedSet sortedSet47 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet44);
    java2.util2.Collection collection48 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet47);
    java2.util2.List list49 = java2.util2.Collections.singletonList((java.lang.Object)collection48);
    int i50 = java2.util2.Collections.indexOfSubList(list33, list49);
    java2.util2.List list51 = java2.util2.Collections.unmodifiableList(list33);
    java2.util2.Comparator comparator52 = null;
    java2.util2.TreeSet treeSet53 = new java2.util2.TreeSet(comparator52);
    java2.util2.Comparator comparator54 = treeSet53.comparator();
    java2.util2.Collection collection55 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet53);
    java2.util2.Enumeration enumeration56 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet53);
    java2.util2.ArrayList arrayList57 = java2.util2.Collections.list(enumeration56);
    java2.util2.Collections.fill((java2.util2.List)arrayList57, (java.lang.Object)0L);
    java2.util2.List list60 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList57);
    java2.util2.Comparator comparator61 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list60, comparator61);
    java2.util2.Collections.shuffle(list60);
    java2.util2.Comparator comparator64 = null;
    java2.util2.TreeSet treeSet65 = new java2.util2.TreeSet(comparator64);
    boolean b67 = treeSet65.contains((java.lang.Object)(-1.0f));
    boolean b69 = treeSet65.equals((java.lang.Object)100.0f);
    java2.util2.List list72 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list72, 1);
    java2.util2.List list77 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list77, 1);
    int i80 = java2.util2.Collections.lastIndexOfSubList(list72, list77);
    boolean b81 = treeSet65.retainAll((java2.util2.Collection)list72);
    int i82 = java2.util2.Collections.lastIndexOfSubList(list60, list72);
    int i83 = java2.util2.Collections.lastIndexOfSubList(list33, list72);
    int i84 = java2.util2.Collections.lastIndexOfSubList(list6, list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 0.0f+ "'", obj23.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet44.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet44.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet53.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet53.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet53.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet65.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet65.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet65.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == (-1));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test198"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.SortedSet sortedSet7 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet6);
    boolean b9 = treeSet6.add((java.lang.Object)false);
    java.lang.Object obj10 = treeSet6.first();
    java2.util2.Iterator iterator11 = treeSet6.iterator();
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet13);
    boolean b16 = treeSet13.add((java.lang.Object)false);
    java.lang.Object obj17 = treeSet13.first();
    java2.util2.Iterator iterator18 = treeSet13.iterator();
    java2.util2.Comparator comparator19 = null;
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet(comparator19);
    java2.util2.Comparator comparator21 = treeSet20.comparator();
    java2.util2.Collection collection22 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet20);
    java2.util2.Enumeration enumeration23 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet20);
    java2.util2.ArrayList arrayList24 = java2.util2.Collections.list(enumeration23);
    java2.util2.Collections.fill((java2.util2.List)arrayList24, (java.lang.Object)0L);
    boolean b27 = treeSet13.addAll((java2.util2.Collection)arrayList24);
    boolean b28 = treeSet6.equals((java.lang.Object)treeSet13);
    java2.util2.Comparator comparator29 = null;
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet(comparator29);
    java2.util2.SortedSet sortedSet31 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet30);
    java2.util2.Comparator comparator32 = null;
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet(comparator32);
    java2.util2.Comparator comparator34 = treeSet33.comparator();
    java2.util2.Collection collection35 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet33);
    java2.util2.Enumeration enumeration36 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet33);
    boolean b37 = treeSet30.retainAll((java2.util2.Collection)treeSet33);
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.Comparator comparator40 = treeSet39.comparator();
    java2.util2.Collection collection41 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet39);
    java2.util2.Enumeration enumeration42 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet39);
    java.lang.Object[] obj_array43 = new java.lang.Object[] { treeSet39 };
    java.lang.Object[] obj_array44 = treeSet33.toArray(obj_array43);
    java2.util2.List list45 = java2.util2.Collections.singletonList((java.lang.Object)obj_array44);
    java.lang.Object[] obj_array46 = treeSet6.toArray(obj_array44);
    // The following exception was thrown during execution in test generation
    try {
      int i47 = java2.util2.Collections.binarySearch(list2, (java.lang.Object)obj_array46);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + false+ "'", obj10.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + false+ "'", obj17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array46);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test199"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.Iterator iterator6 = treeSet3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test200"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet4);
    java2.util2.Set set6 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)sortedSet4);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)set6);
    java2.util2.Collections.reverse(list7);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.Comparator comparator11 = treeSet10.comparator();
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet10);
    java2.util2.Enumeration enumeration13 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet10);
    java2.util2.ArrayList arrayList14 = java2.util2.Collections.list(enumeration13);
    java2.util2.Random random15 = null;
    java2.util2.Collections.shuffle((java2.util2.List)arrayList14, random15);
    int i17 = java2.util2.Collections.lastIndexOfSubList(list7, (java2.util2.List)arrayList14);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list7, 1, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test201"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list4 = java2.util2.Collections.synchronizedList(list2);
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Comparator comparator7 = treeSet6.comparator();
    java2.util2.Collection collection8 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet6);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet6);
    java2.util2.ArrayList arrayList10 = java2.util2.Collections.list(enumeration9);
    java2.util2.Collections.fill((java2.util2.List)arrayList10, (java.lang.Object)0L);
    java.lang.String str13 = arrayList10.toString();
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.Comparator comparator16 = treeSet15.comparator();
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet15);
    java2.util2.Enumeration enumeration18 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet15);
    java2.util2.ArrayList arrayList19 = java2.util2.Collections.list(enumeration18);
    java2.util2.Collections.fill((java2.util2.List)arrayList10, (java.lang.Object)arrayList19);
    java2.util2.Comparator comparator21 = null;
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet(comparator21);
    java2.util2.SortedSet sortedSet23 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet22);
    java2.util2.Set set24 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet22);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    java2.util2.Collection collection27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet26);
    boolean b28 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList10, (java.lang.Object)set24, (java.lang.Object)treeSet26);
    java2.util2.Comparator comparator29 = null;
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet(comparator29);
    java2.util2.Comparator comparator31 = treeSet30.comparator();
    java2.util2.Comparator comparator32 = null;
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet(comparator32);
    java2.util2.Collection collection34 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet33);
    boolean b35 = treeSet30.removeAll((java2.util2.Collection)treeSet33);
    java2.util2.Comparator comparator36 = null;
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet(comparator36);
    java2.util2.SortedSet sortedSet38 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet37);
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet((java2.util2.Collection)treeSet37);
    treeSet37.clear();
    java2.util2.Comparator comparator41 = null;
    java2.util2.TreeSet treeSet42 = new java2.util2.TreeSet(comparator41);
    java2.util2.Collection collection43 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet42);
    boolean b45 = treeSet42.equals((java.lang.Object)1L);
    java2.util2.Collection collection46 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet42);
    boolean b47 = treeSet37.removeAll(collection46);
    java2.util2.Comparator comparator48 = null;
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet(comparator48);
    java2.util2.Collection collection50 = null;
    boolean b51 = treeSet49.retainAll(collection50);
    java2.util2.SortedSet sortedSet52 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet49);
    java2.util2.Collection collection53 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet52);
    boolean b54 = treeSet37.remove((java.lang.Object)sortedSet52);
    java2.util2.Map map55 = java2.util2.Collections.singletonMap((java.lang.Object)b35, (java.lang.Object)sortedSet52);
    java2.util2.List list58 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list58, 1);
    java2.util2.List list61 = java2.util2.Collections.unmodifiableList(list58);
    java2.util2.Comparator comparator62 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj63 = java2.util2.Collections.min((java2.util2.Collection)list58, comparator62);
    int i64 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList10, (java.lang.Object)b35, comparator62);
    java.lang.Object obj65 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet42.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet42.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj63 + "' != '" + 0.0f+ "'", obj63.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 0.0f+ "'", obj65.equals(0.0f));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test202"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet10);
    boolean b12 = treeSet7.removeAll((java2.util2.Collection)sortedSet11);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)treeSet7, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj16 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator15);
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.Comparator comparator19 = treeSet18.comparator();
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    java2.util2.Enumeration enumeration21 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet18);
    java2.util2.ArrayList arrayList22 = java2.util2.Collections.list(enumeration21);
    java2.util2.Collections.fill((java2.util2.List)arrayList22, (java.lang.Object)0L);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList22);
    java2.util2.Random random26 = null;
    java2.util2.Collections.shuffle((java2.util2.List)arrayList22, random26);
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet((java2.util2.Collection)arrayList22);
    java2.util2.Map map29 = java2.util2.Collections.singletonMap((java.lang.Object)comparator15, (java.lang.Object)arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0.0f+ "'", obj16.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map29);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test203"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test204"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = treeSet1.comparator();
    java2.util2.Comparator comparator5 = null;
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet(comparator5);
    java2.util2.Collection collection7 = null;
    boolean b8 = treeSet6.retainAll(collection7);
    java2.util2.SortedSet sortedSet9 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet6);
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.unmodifiableSortedSet(sortedSet9);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.Collection)sortedSet11);
    boolean b13 = treeSet1.add((java.lang.Object)treeSet12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test205"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java.lang.Object[] obj_array7 = treeSet1.toArray();
    java2.util2.Comparator comparator8 = null;
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet(comparator8);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.Collection collection12 = null;
    boolean b13 = treeSet11.retainAll(collection12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet11);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)collection15);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection(collection15);
    boolean b18 = treeSet9.equals((java.lang.Object)collection15);
    boolean b19 = treeSet1.addAll(collection15);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    boolean b23 = treeSet21.contains((java.lang.Object)(-1.0f));
    boolean b25 = treeSet21.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator26 = null;
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet(comparator26);
    java2.util2.Comparator comparator28 = treeSet27.comparator();
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet27);
    java.lang.Object obj30 = null;
    java2.util2.Map map31 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet27, obj30);
    boolean b32 = treeSet21.contains((java.lang.Object)map31);
    treeSet21.clear();
    boolean b34 = treeSet1.retainAll((java2.util2.Collection)treeSet21);
    java2.util2.Comparator comparator35 = null;
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet(comparator35);
    java2.util2.Collection collection37 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet36);
    boolean b39 = treeSet36.equals((java.lang.Object)1L);
    treeSet36.clear();
    boolean b41 = treeSet1.remove((java.lang.Object)treeSet36);
    java2.util2.Collection collection42 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection42);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test206"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list5 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.List list6 = java2.util2.Collections.synchronizedList(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test207"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java.lang.Object[] obj_array7 = treeSet1.toArray();
    java2.util2.Enumeration enumeration8 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList9 = java2.util2.Collections.list(enumeration8);
    java2.util2.List list10 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList9);
    java2.util2.Collections.rotate(list10, (-1));
    java2.util2.Comparator comparator13 = java2.util2.Collections.reverseOrder();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj14 = java2.util2.Collections.min((java2.util2.Collection)list10, comparator13);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator13);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test208"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    boolean b21 = treeSet19.contains((java.lang.Object)(-1.0f));
    boolean b23 = treeSet19.equals((java.lang.Object)100.0f);
    java2.util2.Collection collection24 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet19);
    java2.util2.Comparator comparator25 = null;
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet(comparator25);
    java2.util2.Collection collection27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet26);
    boolean b29 = treeSet26.equals((java.lang.Object)1L);
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet26);
    java2.util2.SortedSet sortedSet31 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet26);
    java.lang.Object[] obj_array32 = treeSet26.toArray();
    java2.util2.Enumeration enumeration33 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet26);
    boolean b34 = treeSet19.contains((java.lang.Object)treeSet26);
    boolean b35 = treeSet1.removeAll((java2.util2.Collection)treeSet26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test209"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list9 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.Random random10 = null;
    java2.util2.Collections.shuffle(list8, random10);
    java2.util2.Comparator comparator12 = null;
    java2.util2.TreeSet treeSet13 = new java2.util2.TreeSet(comparator12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet13);
    java2.util2.Comparator comparator15 = null;
    java2.util2.TreeSet treeSet16 = new java2.util2.TreeSet(comparator15);
    java2.util2.SortedSet sortedSet17 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet16);
    boolean b18 = treeSet13.removeAll((java2.util2.Collection)sortedSet17);
    boolean b20 = java2.util2.Collections.replaceAll(list8, (java.lang.Object)treeSet13, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator21 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj22 = java2.util2.Collections.min((java2.util2.Collection)list8, comparator21);
    java2.util2.Collections.sort((java2.util2.List)arrayList5, comparator21);
    java2.util2.Comparator comparator24 = null;
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet(comparator24);
    java2.util2.Comparator comparator26 = treeSet25.comparator();
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet25);
    java2.util2.Enumeration enumeration28 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet25);
    java2.util2.ArrayList arrayList29 = java2.util2.Collections.list(enumeration28);
    java2.util2.Collections.fill((java2.util2.List)arrayList29, (java.lang.Object)0L);
    java.lang.String str32 = arrayList29.toString();
    java2.util2.Comparator comparator33 = null;
    java2.util2.TreeSet treeSet34 = new java2.util2.TreeSet(comparator33);
    java2.util2.Comparator comparator35 = treeSet34.comparator();
    java2.util2.Collection collection36 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet34);
    java2.util2.Enumeration enumeration37 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet34);
    java2.util2.ArrayList arrayList38 = java2.util2.Collections.list(enumeration37);
    java2.util2.Collections.fill((java2.util2.List)arrayList29, (java.lang.Object)arrayList38);
    java2.util2.Comparator comparator40 = null;
    java2.util2.TreeSet treeSet41 = new java2.util2.TreeSet(comparator40);
    java2.util2.SortedSet sortedSet42 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet41);
    java2.util2.Set set43 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet41);
    java2.util2.Comparator comparator44 = null;
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet(comparator44);
    java2.util2.Collection collection46 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet45);
    boolean b47 = java2.util2.Collections.replaceAll((java2.util2.List)arrayList29, (java.lang.Object)set43, (java.lang.Object)treeSet45);
    java2.util2.Comparator comparator48 = null;
    java2.util2.TreeSet treeSet49 = new java2.util2.TreeSet(comparator48);
    java2.util2.Comparator comparator50 = treeSet49.comparator();
    java2.util2.Comparator comparator51 = null;
    java2.util2.TreeSet treeSet52 = new java2.util2.TreeSet(comparator51);
    java2.util2.Collection collection53 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet52);
    boolean b54 = treeSet49.removeAll((java2.util2.Collection)treeSet52);
    java2.util2.Comparator comparator55 = null;
    java2.util2.TreeSet treeSet56 = new java2.util2.TreeSet(comparator55);
    java2.util2.SortedSet sortedSet57 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet56);
    java2.util2.TreeSet treeSet58 = new java2.util2.TreeSet((java2.util2.Collection)treeSet56);
    treeSet56.clear();
    java2.util2.Comparator comparator60 = null;
    java2.util2.TreeSet treeSet61 = new java2.util2.TreeSet(comparator60);
    java2.util2.Collection collection62 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet61);
    boolean b64 = treeSet61.equals((java.lang.Object)1L);
    java2.util2.Collection collection65 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet61);
    boolean b66 = treeSet56.removeAll(collection65);
    java2.util2.Comparator comparator67 = null;
    java2.util2.TreeSet treeSet68 = new java2.util2.TreeSet(comparator67);
    java2.util2.Collection collection69 = null;
    boolean b70 = treeSet68.retainAll(collection69);
    java2.util2.SortedSet sortedSet71 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet68);
    java2.util2.Collection collection72 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet71);
    boolean b73 = treeSet56.remove((java.lang.Object)sortedSet71);
    java2.util2.Map map74 = java2.util2.Collections.singletonMap((java.lang.Object)b54, (java.lang.Object)sortedSet71);
    java2.util2.List list77 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list77, 1);
    java2.util2.List list80 = java2.util2.Collections.unmodifiableList(list77);
    java2.util2.Comparator comparator81 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj82 = java2.util2.Collections.min((java2.util2.Collection)list77, comparator81);
    int i83 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList29, (java.lang.Object)b54, comparator81);
    java2.util2.Collections.sort((java2.util2.List)arrayList5, comparator81);
    java2.util2.TreeSet treeSet85 = new java2.util2.TreeSet(comparator81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet13.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet13.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet16.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet16.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 0.0f+ "'", obj22.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[]"+ "'", str32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet34.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet34.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet41.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet41.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet49.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet49.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet52.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet52.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet56.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet56.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet56.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet58.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet58.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet58.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet61.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet61.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet68.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet68.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj82 + "' != '" + 0.0f+ "'", obj82.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet85.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet85.toString(), "[]");

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test210"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list6, 1);
    java2.util2.List list11 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list11, 1);
    int i14 = java2.util2.Collections.lastIndexOfSubList(list6, list11);
    boolean b15 = treeSet1.addAll((java2.util2.Collection)list6);
    java2.util2.Set set16 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    java.lang.Object obj17 = java2.util2.Collections.max((java2.util2.Collection)treeSet1);
    java.lang.Object obj18 = java2.util2.Collections.min((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration19 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[0.0]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 0.0f+ "'", obj17.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 0.0f+ "'", obj18.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration19);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test211"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)treeSet3);
    boolean b6 = treeSet1.retainAll((java2.util2.Collection)treeSet5);
    java2.util2.Iterator iterator7 = treeSet1.iterator();
    boolean b9 = treeSet1.equals((java.lang.Object)"[[[]]]");
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.SortedSet sortedSet12 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Map map16 = java2.util2.Collections.singletonMap((java.lang.Object)comparator13, (java.lang.Object)1L);
    java2.util2.Map map17 = java2.util2.Collections.synchronizedMap(map16);
    java2.util2.Map map18 = java2.util2.Collections.synchronizedMap(map16);
    boolean b19 = treeSet11.remove((java.lang.Object)map16);
    boolean b20 = treeSet1.remove((java.lang.Object)treeSet11);
    boolean b21 = treeSet1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test212"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java.lang.Object obj5 = treeSet1.first();
    java2.util2.Iterator iterator6 = treeSet1.iterator();
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Comparator comparator9 = treeSet8.comparator();
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Collections.fill((java2.util2.List)arrayList12, (java.lang.Object)0L);
    boolean b15 = treeSet1.addAll((java2.util2.Collection)arrayList12);
    treeSet1.clear();
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.SortedSet sortedSet19 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet18);
    java2.util2.TreeSet treeSet20 = new java2.util2.TreeSet((java2.util2.Collection)treeSet18);
    treeSet18.clear();
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    boolean b25 = treeSet23.contains((java.lang.Object)(-1.0f));
    boolean b27 = treeSet23.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator28 = null;
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet(comparator28);
    java2.util2.Comparator comparator30 = treeSet29.comparator();
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet29);
    java.lang.Object obj32 = null;
    java2.util2.Map map33 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet29, obj32);
    boolean b34 = treeSet23.contains((java.lang.Object)map33);
    java2.util2.Map map35 = java2.util2.Collections.synchronizedMap(map33);
    boolean b36 = treeSet18.remove((java.lang.Object)map33);
    java2.util2.Map map37 = java2.util2.Collections.synchronizedMap(map33);
    boolean b38 = treeSet1.contains((java.lang.Object)map33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + false+ "'", obj5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet20.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet20.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test213"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    boolean b19 = treeSet1.remove((java.lang.Object)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test214"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.Comparator comparator1 = null;
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet(comparator1);
    java2.util2.Collection collection3 = null;
    boolean b4 = treeSet2.retainAll(collection3);
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet2);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet5);
    java2.util2.List list7 = java2.util2.Collections.singletonList((java.lang.Object)collection6);
    boolean b8 = treeSet0.add((java.lang.Object)list7);
    java.lang.String str9 = treeSet0.toString();
    java.lang.Object obj10 = treeSet0.last();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[[[]]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[[[]]]"+ "'", str9.equals("[[[]]]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj10);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test215"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = treeSet1.first();
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test216"); }


    java2.util2.TreeSet treeSet0 = new java2.util2.TreeSet();
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet((java2.util2.Collection)treeSet0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet0.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet0.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test217"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    java2.util2.Collection collection6 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet5);
    boolean b7 = treeSet1.remove((java.lang.Object)treeSet5);
    treeSet5.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test218"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test219"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)collection23);
    int i25 = java2.util2.Collections.indexOfSubList(list8, list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.Collection collection27 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test220"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java.lang.Object[] obj_array7 = treeSet1.toArray();
    java2.util2.Comparator comparator8 = null;
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet(comparator8);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.Collection collection12 = null;
    boolean b13 = treeSet11.retainAll(collection12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet11);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)collection15);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection(collection15);
    boolean b18 = treeSet9.equals((java.lang.Object)collection15);
    boolean b19 = treeSet1.addAll(collection15);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    boolean b23 = treeSet21.contains((java.lang.Object)(-1.0f));
    boolean b25 = treeSet21.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator26 = null;
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet(comparator26);
    java2.util2.Comparator comparator28 = treeSet27.comparator();
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet27);
    java.lang.Object obj30 = null;
    java2.util2.Map map31 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet27, obj30);
    boolean b32 = treeSet21.contains((java.lang.Object)map31);
    treeSet21.clear();
    boolean b34 = treeSet1.retainAll((java2.util2.Collection)treeSet21);
    java.lang.Object obj35 = treeSet21.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test221"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList5);
    java2.util2.Enumeration enumeration9 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration9);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test222"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet3);
    treeSet3.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test223"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Collection collection6 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Collection collection9 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet8);
    boolean b11 = treeSet8.equals((java.lang.Object)1L);
    java2.util2.Collection collection12 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.SortedSet sortedSet13 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet8);
    java.lang.Object[] obj_array14 = treeSet8.toArray();
    java2.util2.Enumeration enumeration15 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    boolean b16 = treeSet1.contains((java.lang.Object)treeSet8);
    java2.util2.Comparator comparator17 = null;
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet(comparator17);
    java2.util2.Comparator comparator19 = treeSet18.comparator();
    java2.util2.Collection collection20 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet18);
    java2.util2.Comparator comparator21 = treeSet18.comparator();
    boolean b22 = treeSet8.containsAll((java2.util2.Collection)treeSet18);
    java2.util2.Comparator comparator23 = null;
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(comparator23);
    java2.util2.Comparator comparator25 = treeSet24.comparator();
    java2.util2.Comparator comparator26 = null;
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet(comparator26);
    java2.util2.Collection collection28 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet27);
    boolean b29 = treeSet24.removeAll((java2.util2.Collection)treeSet27);
    boolean b30 = treeSet18.contains((java.lang.Object)treeSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test224"); }


    java.lang.Object obj0 = null;
    java2.util2.Set set1 = java2.util2.Collections.singleton(obj0);
    java2.util2.Collection collection2 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test225"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i12 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList5, list11);
    java2.util2.Collections.reverse((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator14 = null;
    java2.util2.TreeSet treeSet15 = new java2.util2.TreeSet(comparator14);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet15);
    boolean b18 = treeSet15.add((java.lang.Object)false);
    java.lang.Object obj19 = treeSet15.first();
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Collection collection22 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet21);
    boolean b24 = treeSet21.equals((java.lang.Object)1L);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet21);
    java2.util2.SortedSet sortedSet26 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet21);
    java.lang.Object[] obj_array27 = treeSet21.toArray();
    java.lang.Object[] obj_array28 = treeSet15.toArray(obj_array27);
    java.lang.Object[] obj_array29 = arrayList5.toArray(obj_array27);
    java2.util2.Comparator comparator31 = null;
    java2.util2.TreeSet treeSet32 = new java2.util2.TreeSet(comparator31);
    java2.util2.Comparator comparator33 = treeSet32.comparator();
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet32);
    java2.util2.Enumeration enumeration35 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet32);
    java2.util2.ArrayList arrayList36 = java2.util2.Collections.list(enumeration35);
    java2.util2.List list37 = java2.util2.Collections.nCopies(100, (java.lang.Object)arrayList36);
    java2.util2.Collections.copy((java2.util2.List)arrayList5, (java2.util2.List)arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet15.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet15.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet15.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + false+ "'", obj19.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet32.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet32.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test226"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.SortedSet sortedSet19 = treeSet1.headSet((java.lang.Object)(short)1);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Map map23 = java2.util2.Collections.singletonMap((java.lang.Object)comparator20, (java.lang.Object)1L);
    boolean b24 = treeSet1.remove((java.lang.Object)1L);
    java2.util2.SortedSet sortedSet25 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet26 = new java2.util2.TreeSet((java2.util2.Collection)sortedSet25);
    java2.util2.List list27 = java2.util2.Collections.singletonList((java.lang.Object)treeSet26);
    java2.util2.Comparator comparator28 = null;
    java2.util2.TreeSet treeSet29 = new java2.util2.TreeSet(comparator28);
    java2.util2.Comparator comparator30 = treeSet29.comparator();
    java2.util2.Collection collection31 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet29);
    java2.util2.Enumeration enumeration32 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet29);
    java2.util2.ArrayList arrayList33 = java2.util2.Collections.list(enumeration32);
    java2.util2.Collections.fill((java2.util2.List)arrayList33, (java.lang.Object)0L);
    java2.util2.List list36 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList33);
    java2.util2.List list39 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i40 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList33, list39);
    java2.util2.Collections.reverse((java2.util2.List)arrayList33);
    int i42 = java2.util2.Collections.indexOfSubList(list27, (java2.util2.List)arrayList33);
    java2.util2.Collections.shuffle(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet26.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet26.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet29.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet29.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test227"); }


    java2.util2.Comparator comparator1 = null;
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet(comparator1);
    java2.util2.Comparator comparator3 = treeSet2.comparator();
    java2.util2.Collection collection4 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet2);
    java2.util2.Enumeration enumeration5 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet2);
    java2.util2.ArrayList arrayList6 = java2.util2.Collections.list(enumeration5);
    java2.util2.List list7 = java2.util2.Collections.nCopies(100, (java.lang.Object)arrayList6);
    java2.util2.Comparator comparator8 = null;
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet(comparator8);
    java2.util2.Comparator comparator10 = treeSet9.comparator();
    java2.util2.Collection collection11 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet9);
    java2.util2.Comparator comparator12 = treeSet9.comparator();
    java2.util2.SortedSet sortedSet13 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet9);
    java2.util2.List list16 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list17 = java2.util2.Collections.unmodifiableList(list16);
    java2.util2.Random random18 = null;
    java2.util2.Collections.shuffle(list16, random18);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet21);
    java2.util2.Comparator comparator23 = null;
    java2.util2.TreeSet treeSet24 = new java2.util2.TreeSet(comparator23);
    java2.util2.SortedSet sortedSet25 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet24);
    boolean b26 = treeSet21.removeAll((java2.util2.Collection)sortedSet25);
    boolean b28 = java2.util2.Collections.replaceAll(list16, (java.lang.Object)treeSet21, (java.lang.Object)100.0d);
    boolean b29 = treeSet9.removeAll((java2.util2.Collection)list16);
    int i30 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList6, list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet24.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet24.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-1));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test228"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.List list11 = java2.util2.Collections.nCopies(10, (java.lang.Object)(-1));
    int i12 = java2.util2.Collections.indexOfSubList((java2.util2.List)arrayList5, list11);
    java.lang.Object[] obj_array13 = arrayList5.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array13);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test229"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.List list6 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list7 = java2.util2.Collections.unmodifiableList(list6);
    java2.util2.List list8 = java2.util2.Collections.synchronizedList(list6);
    java2.util2.List list9 = java2.util2.Collections.singletonList((java.lang.Object)list8);
    boolean b10 = treeSet3.containsAll((java2.util2.Collection)list8);
    java2.util2.List list12 = java2.util2.Collections.singletonList((java.lang.Object)"[]");
    int i13 = java2.util2.Collections.lastIndexOfSubList(list8, list12);
    java2.util2.Collection collection14 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection14);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test230"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java.lang.String str6 = treeSet1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]"+ "'", str6.equals("[]"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test231"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator3 = java2.util2.Collections.reverseOrder();
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    boolean b5 = treeSet1.equals((java.lang.Object)treeSet4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Map map9 = java2.util2.Collections.singletonMap((java.lang.Object)comparator6, (java.lang.Object)1L);
    java2.util2.Map map10 = java2.util2.Collections.synchronizedMap(map9);
    boolean b11 = treeSet1.contains((java.lang.Object)map10);
    java2.util2.TreeSet treeSet12 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet1);
    java.lang.String str13 = treeSet1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet12.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet12.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test232"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet1);
    boolean b4 = treeSet1.equals((java.lang.Object)1L);
    java2.util2.Collection collection5 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet6 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet1);
    java.lang.Object[] obj_array7 = treeSet1.toArray();
    java2.util2.Comparator comparator8 = null;
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet(comparator8);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.Collection collection12 = null;
    boolean b13 = treeSet11.retainAll(collection12);
    java2.util2.SortedSet sortedSet14 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet11);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet14);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)collection15);
    java2.util2.Collection collection17 = java2.util2.Collections.synchronizedCollection(collection15);
    boolean b18 = treeSet9.equals((java.lang.Object)collection15);
    boolean b19 = treeSet1.addAll(collection15);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.TreeSet treeSet22 = new java2.util2.TreeSet((java2.util2.Collection)treeSet21);
    java2.util2.Set set23 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet22);
    java2.util2.Comparator comparator24 = null;
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet(comparator24);
    boolean b27 = treeSet25.contains((java.lang.Object)(-1.0f));
    boolean b29 = treeSet25.equals((java.lang.Object)100.0f);
    java2.util2.List list32 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list32, 1);
    java2.util2.List list37 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list37, 1);
    int i40 = java2.util2.Collections.lastIndexOfSubList(list32, list37);
    boolean b41 = treeSet25.retainAll((java2.util2.Collection)list32);
    java2.util2.Comparator comparator42 = null;
    java2.util2.TreeSet treeSet43 = new java2.util2.TreeSet(comparator42);
    java2.util2.SortedSet sortedSet44 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet43);
    boolean b46 = treeSet43.add((java.lang.Object)false);
    boolean b47 = treeSet25.retainAll((java2.util2.Collection)treeSet43);
    boolean b48 = treeSet22.retainAll((java2.util2.Collection)treeSet43);
    boolean b49 = treeSet1.removeAll((java2.util2.Collection)treeSet43);
    java2.util2.Set set50 = java2.util2.Collections.unmodifiableSet((java2.util2.Set)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet22.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet22.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet43.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet43.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet43.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test233"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list3 = java2.util2.Collections.unmodifiableList(list2);
    java2.util2.Random random4 = null;
    java2.util2.Collections.shuffle(list2, random4);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    java2.util2.SortedSet sortedSet11 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet10);
    boolean b12 = treeSet7.removeAll((java2.util2.Collection)sortedSet11);
    boolean b14 = java2.util2.Collections.replaceAll(list2, (java.lang.Object)treeSet7, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator15 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj16 = java2.util2.Collections.min((java2.util2.Collection)list2, comparator15);
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 0.0f+ "'", obj16.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test234"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    int i10 = java2.util2.Collections.binarySearch((java2.util2.List)arrayList5, (java.lang.Object)(short)(-1));
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    java2.util2.List list18 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list18, 1);
    int i21 = java2.util2.Collections.lastIndexOfSubList(list13, list18);
    java2.util2.Random random22 = null;
    java2.util2.Collections.shuffle(list13, random22);
    java2.util2.List list26 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list26, 1);
    java2.util2.List list29 = java2.util2.Collections.unmodifiableList(list26);
    java2.util2.Collections.shuffle(list29);
    int i31 = java2.util2.Collections.indexOfSubList(list13, list29);
    int i32 = java2.util2.Collections.lastIndexOfSubList((java2.util2.List)arrayList5, list29);
    java2.util2.List list35 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list35, 1);
    java2.util2.List list40 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list40, 1);
    int i43 = java2.util2.Collections.lastIndexOfSubList(list35, list40);
    java2.util2.Comparator comparator44 = null;
    java2.util2.TreeSet treeSet45 = new java2.util2.TreeSet(comparator44);
    java2.util2.Comparator comparator46 = treeSet45.comparator();
    java2.util2.Collection collection47 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet45);
    java2.util2.Enumeration enumeration48 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet45);
    java2.util2.ArrayList arrayList49 = java2.util2.Collections.list(enumeration48);
    java2.util2.Collections.fill((java2.util2.List)arrayList49, (java.lang.Object)0L);
    java2.util2.List list52 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList49);
    java2.util2.Comparator comparator53 = null;
    java2.util2.TreeSet treeSet54 = new java2.util2.TreeSet(comparator53);
    boolean b56 = treeSet54.contains((java.lang.Object)(-1.0f));
    boolean b58 = treeSet54.equals((java.lang.Object)100.0f);
    java2.util2.List list61 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list61, 1);
    java2.util2.List list66 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list66, 1);
    int i69 = java2.util2.Collections.lastIndexOfSubList(list61, list66);
    boolean b70 = treeSet54.retainAll((java2.util2.Collection)list61);
    java2.util2.Comparator comparator71 = null;
    java2.util2.TreeSet treeSet72 = new java2.util2.TreeSet(comparator71);
    java2.util2.Collection collection73 = null;
    boolean b74 = treeSet72.retainAll(collection73);
    java2.util2.SortedSet sortedSet75 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet72);
    java2.util2.Collection collection76 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet75);
    java2.util2.List list77 = java2.util2.Collections.singletonList((java.lang.Object)collection76);
    int i78 = java2.util2.Collections.indexOfSubList(list61, list77);
    int i79 = java2.util2.Collections.lastIndexOfSubList(list52, list61);
    int i80 = java2.util2.Collections.indexOfSubList(list35, list52);
    java2.util2.List list81 = java2.util2.Collections.unmodifiableList(list35);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.copy(list29, list81);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet45.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet45.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet54.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet54.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet72.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet72.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet72.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list81);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test235"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.List list9 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list10 = java2.util2.Collections.unmodifiableList(list9);
    java2.util2.Random random11 = null;
    java2.util2.Collections.shuffle(list9, random11);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.SortedSet sortedSet15 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet14);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.SortedSet sortedSet18 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet17);
    boolean b19 = treeSet14.removeAll((java2.util2.Collection)sortedSet18);
    boolean b21 = java2.util2.Collections.replaceAll(list9, (java.lang.Object)treeSet14, (java.lang.Object)100.0d);
    java.lang.Object obj22 = treeSet14.clone();
    boolean b23 = treeSet4.add(obj22);
    java2.util2.Comparator comparator24 = null;
    java2.util2.TreeSet treeSet25 = new java2.util2.TreeSet(comparator24);
    java2.util2.SortedSet sortedSet26 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet25);
    boolean b28 = treeSet25.add((java.lang.Object)false);
    java2.util2.Comparator comparator29 = null;
    java2.util2.TreeSet treeSet30 = new java2.util2.TreeSet(comparator29);
    java2.util2.Collection collection31 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet30);
    boolean b33 = treeSet30.equals((java.lang.Object)1L);
    java2.util2.Collection collection34 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet30);
    java2.util2.SortedSet sortedSet35 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet30);
    java.lang.Object[] obj_array36 = treeSet30.toArray();
    java.lang.Object[] obj_array37 = treeSet25.toArray(obj_array36);
    java2.util2.Map map38 = java2.util2.Collections.singletonMap(obj22, (java.lang.Object)treeSet25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[[]]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet25.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet25.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet25.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet30.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet30.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map38);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test236"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Map map3 = java2.util2.Collections.singletonMap((java.lang.Object)comparator0, (java.lang.Object)1L);
    java2.util2.Map map4 = java2.util2.Collections.synchronizedMap(map3);
    java2.util2.Map map5 = java2.util2.Collections.synchronizedMap(map3);
    java2.util2.Map map6 = java2.util2.Collections.synchronizedMap(map3);
    java2.util2.Map map7 = java2.util2.Collections.unmodifiableMap(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map7);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test237"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Comparator comparator4 = treeSet1.comparator();
    java2.util2.SortedSet sortedSet5 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    int i6 = treeSet1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test238"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collections.shuffle(list8);
    java2.util2.Collections.reverse(list8);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Comparator comparator15 = treeSet14.comparator();
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)0L);
    java.lang.String str21 = arrayList18.toString();
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.Comparator comparator24 = treeSet23.comparator();
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet23);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet23);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)arrayList27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Random random33 = null;
    java2.util2.Collections.shuffle(list31, random33);
    java2.util2.Comparator comparator35 = null;
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet(comparator35);
    java2.util2.SortedSet sortedSet37 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet36);
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.SortedSet sortedSet40 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet39);
    boolean b41 = treeSet36.removeAll((java2.util2.Collection)sortedSet40);
    boolean b43 = java2.util2.Collections.replaceAll(list31, (java.lang.Object)treeSet36, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator44 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj45 = java2.util2.Collections.min((java2.util2.Collection)list31, comparator44);
    int i46 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)arrayList27, comparator44);
    java2.util2.Enumeration enumeration47 = java2.util2.Collections.enumeration((java2.util2.Collection)arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 0.0f+ "'", obj45.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration47);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test239"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.Collection)list8);
    // The following exception was thrown during execution in test generation
    try {
      boolean b20 = treeSet18.add((java.lang.Object)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[0.0]");

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test240"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Collection collection2 = null;
    boolean b3 = treeSet1.retainAll(collection2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.Comparator comparator8 = treeSet7.comparator();
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)treeSet7);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet11);
    boolean b13 = treeSet7.remove((java.lang.Object)treeSet11);
    java.lang.Object obj14 = treeSet11.clone();
    java2.util2.Set set15 = java2.util2.Collections.singleton((java.lang.Object)treeSet11);
    java2.util2.List list16 = java2.util2.Collections.nCopies(1, (java.lang.Object)treeSet11);
    boolean b17 = treeSet1.removeAll((java2.util2.Collection)treeSet11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test241"); }


    java2.util2.List list2 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list2, 1);
    java2.util2.List list7 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list7, 1);
    int i10 = java2.util2.Collections.lastIndexOfSubList(list2, list7);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test242"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)collection23);
    int i25 = java2.util2.Collections.indexOfSubList(list8, list24);
    java2.util2.List list26 = java2.util2.Collections.unmodifiableList(list8);
    java2.util2.Comparator comparator27 = null;
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet(comparator27);
    java2.util2.Comparator comparator29 = treeSet28.comparator();
    java2.util2.Collection collection30 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet28);
    java2.util2.Enumeration enumeration31 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet28);
    java2.util2.ArrayList arrayList32 = java2.util2.Collections.list(enumeration31);
    java2.util2.Collections.fill((java2.util2.List)arrayList32, (java.lang.Object)0L);
    java2.util2.List list35 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList32);
    java2.util2.Comparator comparator36 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list35, comparator36);
    java2.util2.Collections.shuffle(list35);
    java2.util2.Comparator comparator39 = null;
    java2.util2.TreeSet treeSet40 = new java2.util2.TreeSet(comparator39);
    boolean b42 = treeSet40.contains((java.lang.Object)(-1.0f));
    boolean b44 = treeSet40.equals((java.lang.Object)100.0f);
    java2.util2.List list47 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list47, 1);
    java2.util2.List list52 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list52, 1);
    int i55 = java2.util2.Collections.lastIndexOfSubList(list47, list52);
    boolean b56 = treeSet40.retainAll((java2.util2.Collection)list47);
    int i57 = java2.util2.Collections.lastIndexOfSubList(list35, list47);
    int i58 = java2.util2.Collections.lastIndexOfSubList(list8, list47);
    java2.util2.List list61 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list61, 1);
    java2.util2.List list66 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list66, 1);
    int i69 = java2.util2.Collections.lastIndexOfSubList(list61, list66);
    int i70 = java2.util2.Collections.indexOfSubList(list47, list66);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.sort(list47);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.UnsupportedOperationException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet40.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet40.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test243"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Collections.reverse((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator10 = null;
    java2.util2.TreeSet treeSet11 = new java2.util2.TreeSet(comparator10);
    java2.util2.Collection collection12 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet11);
    boolean b14 = treeSet11.equals((java.lang.Object)1L);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet11);
    java2.util2.SortedSet sortedSet16 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet11);
    java.lang.Object[] obj_array17 = treeSet11.toArray();
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Comparator comparator20 = null;
    java2.util2.TreeSet treeSet21 = new java2.util2.TreeSet(comparator20);
    java2.util2.Collection collection22 = null;
    boolean b23 = treeSet21.retainAll(collection22);
    java2.util2.SortedSet sortedSet24 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet21);
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet24);
    java2.util2.List list26 = java2.util2.Collections.singletonList((java.lang.Object)collection25);
    java2.util2.Collection collection27 = java2.util2.Collections.synchronizedCollection(collection25);
    boolean b28 = treeSet19.equals((java.lang.Object)collection25);
    boolean b29 = treeSet11.addAll(collection25);
    java2.util2.Comparator comparator30 = null;
    java2.util2.TreeSet treeSet31 = new java2.util2.TreeSet(comparator30);
    boolean b33 = treeSet31.contains((java.lang.Object)(-1.0f));
    boolean b35 = treeSet31.equals((java.lang.Object)100.0f);
    java2.util2.Comparator comparator36 = null;
    java2.util2.TreeSet treeSet37 = new java2.util2.TreeSet(comparator36);
    java2.util2.Comparator comparator38 = treeSet37.comparator();
    java2.util2.Collection collection39 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet37);
    java.lang.Object obj40 = null;
    java2.util2.Map map41 = java2.util2.Collections.singletonMap((java.lang.Object)treeSet37, obj40);
    boolean b42 = treeSet31.contains((java.lang.Object)map41);
    treeSet31.clear();
    boolean b44 = treeSet11.retainAll((java2.util2.Collection)treeSet31);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)b44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet11.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet11.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet21.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet21.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet31.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet31.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet37.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet37.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test244"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Comparator comparator3 = null;
    java2.util2.TreeSet treeSet4 = new java2.util2.TreeSet(comparator3);
    java2.util2.Collection collection5 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet4);
    boolean b6 = treeSet1.removeAll((java2.util2.Collection)treeSet4);
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    boolean b10 = treeSet8.contains((java.lang.Object)(-1.0f));
    boolean b12 = treeSet8.equals((java.lang.Object)100.0f);
    java2.util2.List list15 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list15, 1);
    java2.util2.List list20 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list20, 1);
    int i23 = java2.util2.Collections.lastIndexOfSubList(list15, list20);
    boolean b24 = treeSet8.retainAll((java2.util2.Collection)list15);
    java2.util2.SortedSet sortedSet26 = treeSet8.headSet((java.lang.Object)(short)1);
    java2.util2.Comparator comparator27 = null;
    java2.util2.TreeSet treeSet28 = new java2.util2.TreeSet(comparator27);
    java2.util2.Map map30 = java2.util2.Collections.singletonMap((java.lang.Object)comparator27, (java.lang.Object)1L);
    boolean b31 = treeSet8.remove((java.lang.Object)1L);
    java2.util2.SortedSet sortedSet32 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet8);
    java2.util2.TreeSet treeSet33 = new java2.util2.TreeSet((java2.util2.Collection)sortedSet32);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.SortedSet sortedSet34 = treeSet4.headSet((java.lang.Object)treeSet33);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet4.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet4.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet28.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet28.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(map30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet33.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet33.toString(), "[]");

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test245"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java.lang.Object obj4 = treeSet3.clone();
    java2.util2.Iterator iterator5 = treeSet3.iterator();
    java2.util2.Comparator comparator6 = null;
    java2.util2.TreeSet treeSet7 = new java2.util2.TreeSet(comparator6);
    java2.util2.SortedSet sortedSet8 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet7);
    java2.util2.TreeSet treeSet9 = new java2.util2.TreeSet((java2.util2.Collection)treeSet7);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.SortedSet sortedSet13 = treeSet7.headSet((java.lang.Object)1);
    java.lang.Object[] obj_array14 = treeSet7.toArray();
    boolean b15 = treeSet3.equals((java.lang.Object)obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet7.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet7.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet9.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet9.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test246"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.Set set6 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet1);
    java2.util2.SortedSet sortedSet8 = treeSet1.tailSet((java.lang.Object)"hi!");
    java2.util2.Comparator comparator9 = null;
    java2.util2.TreeSet treeSet10 = new java2.util2.TreeSet(comparator9);
    boolean b12 = treeSet10.contains((java.lang.Object)(-1.0f));
    boolean b14 = treeSet10.equals((java.lang.Object)100.0f);
    java2.util2.Collection collection15 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet10);
    java2.util2.Comparator comparator16 = null;
    java2.util2.TreeSet treeSet17 = new java2.util2.TreeSet(comparator16);
    java2.util2.Collection collection18 = java2.util2.Collections.unmodifiableCollection((java2.util2.Collection)treeSet17);
    boolean b20 = treeSet17.equals((java.lang.Object)1L);
    java2.util2.Collection collection21 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet17);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.unmodifiableSortedSet((java2.util2.SortedSet)treeSet17);
    java.lang.Object[] obj_array23 = treeSet17.toArray();
    java2.util2.Enumeration enumeration24 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet17);
    boolean b25 = treeSet10.contains((java.lang.Object)treeSet17);
    java2.util2.Comparator comparator26 = null;
    java2.util2.TreeSet treeSet27 = new java2.util2.TreeSet(comparator26);
    java2.util2.Comparator comparator28 = treeSet27.comparator();
    java2.util2.Collection collection29 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet27);
    java2.util2.Comparator comparator30 = treeSet27.comparator();
    boolean b31 = treeSet17.containsAll((java2.util2.Collection)treeSet27);
    boolean b32 = treeSet1.equals((java.lang.Object)treeSet27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet10.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet10.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet17.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet17.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet27.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet27.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test247"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.SortedSet sortedSet2 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet1);
    boolean b4 = treeSet1.add((java.lang.Object)false);
    java.lang.Object obj5 = treeSet1.first();
    java2.util2.Iterator iterator6 = treeSet1.iterator();
    java2.util2.Comparator comparator7 = null;
    java2.util2.TreeSet treeSet8 = new java2.util2.TreeSet(comparator7);
    java2.util2.Comparator comparator9 = treeSet8.comparator();
    java2.util2.Collection collection10 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet8);
    java2.util2.Enumeration enumeration11 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet8);
    java2.util2.ArrayList arrayList12 = java2.util2.Collections.list(enumeration11);
    java2.util2.Collections.fill((java2.util2.List)arrayList12, (java.lang.Object)0L);
    boolean b15 = treeSet1.addAll((java2.util2.Collection)arrayList12);
    java2.util2.List list16 = java2.util2.Collections.singletonList((java.lang.Object)b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + false+ "'", obj5.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet8.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet8.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list16);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test248"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collections.rotate(list8, 1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj13 = java2.util2.Collections.max((java2.util2.Collection)list8);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test249"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.Set set3 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet2);
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    boolean b7 = treeSet5.contains((java.lang.Object)(-1.0f));
    boolean b9 = treeSet5.equals((java.lang.Object)100.0f);
    java2.util2.List list12 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list12, 1);
    java2.util2.List list17 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list17, 1);
    int i20 = java2.util2.Collections.lastIndexOfSubList(list12, list17);
    boolean b21 = treeSet5.retainAll((java2.util2.Collection)list12);
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.SortedSet sortedSet24 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet23);
    boolean b26 = treeSet23.add((java.lang.Object)false);
    boolean b27 = treeSet5.retainAll((java2.util2.Collection)treeSet23);
    boolean b28 = treeSet2.retainAll((java2.util2.Collection)treeSet23);
    java2.util2.Set set29 = java2.util2.Collections.synchronizedSet((java2.util2.Set)treeSet23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertFalse(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[false]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test250"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.TreeSet treeSet18 = new java2.util2.TreeSet((java2.util2.SortedSet)treeSet1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet18.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet18.toString(), "[]");

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test251"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = treeSet1.comparator();
    java2.util2.Collection collection3 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet1);
    java2.util2.Enumeration enumeration4 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet1);
    java2.util2.ArrayList arrayList5 = java2.util2.Collections.list(enumeration4);
    java2.util2.Collections.fill((java2.util2.List)arrayList5, (java.lang.Object)0L);
    java2.util2.List list8 = java2.util2.Collections.unmodifiableList((java2.util2.List)arrayList5);
    java2.util2.Comparator comparator9 = java2.util2.Collections.reverseOrder();
    java2.util2.Collections.sort(list8, comparator9);
    java2.util2.Collections.shuffle(list8);
    java2.util2.Collections.reverse(list8);
    java2.util2.Comparator comparator13 = null;
    java2.util2.TreeSet treeSet14 = new java2.util2.TreeSet(comparator13);
    java2.util2.Comparator comparator15 = treeSet14.comparator();
    java2.util2.Collection collection16 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet14);
    java2.util2.Enumeration enumeration17 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet14);
    java2.util2.ArrayList arrayList18 = java2.util2.Collections.list(enumeration17);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)0L);
    java.lang.String str21 = arrayList18.toString();
    java2.util2.Comparator comparator22 = null;
    java2.util2.TreeSet treeSet23 = new java2.util2.TreeSet(comparator22);
    java2.util2.Comparator comparator24 = treeSet23.comparator();
    java2.util2.Collection collection25 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)treeSet23);
    java2.util2.Enumeration enumeration26 = java2.util2.Collections.enumeration((java2.util2.Collection)treeSet23);
    java2.util2.ArrayList arrayList27 = java2.util2.Collections.list(enumeration26);
    java2.util2.Collections.fill((java2.util2.List)arrayList18, (java.lang.Object)arrayList27);
    java2.util2.List list31 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list32 = java2.util2.Collections.unmodifiableList(list31);
    java2.util2.Random random33 = null;
    java2.util2.Collections.shuffle(list31, random33);
    java2.util2.Comparator comparator35 = null;
    java2.util2.TreeSet treeSet36 = new java2.util2.TreeSet(comparator35);
    java2.util2.SortedSet sortedSet37 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet36);
    java2.util2.Comparator comparator38 = null;
    java2.util2.TreeSet treeSet39 = new java2.util2.TreeSet(comparator38);
    java2.util2.SortedSet sortedSet40 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet39);
    boolean b41 = treeSet36.removeAll((java2.util2.Collection)sortedSet40);
    boolean b43 = java2.util2.Collections.replaceAll(list31, (java.lang.Object)treeSet36, (java.lang.Object)100.0d);
    java2.util2.Comparator comparator44 = java2.util2.Collections.reverseOrder();
    java.lang.Object obj45 = java2.util2.Collections.min((java2.util2.Collection)list31, comparator44);
    int i46 = java2.util2.Collections.binarySearch(list8, (java.lang.Object)arrayList27, comparator44);
    java2.util2.Collections.shuffle((java2.util2.List)arrayList27);
    java2.util2.List list48 = java2.util2.Collections.synchronizedList((java2.util2.List)arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet14.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet14.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[]"+ "'", str21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet23.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet23.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(comparator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(enumeration26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arrayList27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet36.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet36.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet39.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet39.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 0.0f+ "'", obj45.equals(0.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list48);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test252"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.Comparator comparator2 = null;
    java2.util2.TreeSet treeSet3 = new java2.util2.TreeSet(comparator2);
    java2.util2.SortedSet sortedSet4 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet3);
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet((java2.util2.Collection)treeSet3);
    boolean b6 = treeSet1.retainAll((java2.util2.Collection)treeSet5);
    java2.util2.Iterator iterator7 = treeSet1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj8 = java2.util2.Collections.min((java2.util2.Collection)treeSet1);
      org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException");
    } catch (java2.util2.NoSuchElementException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java2.util2.NoSuchElementException")) {
        org.junit.Assert.fail("Expected exception of type java2.util2.NoSuchElementException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet3.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet3.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test253"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    java2.util2.TreeSet treeSet2 = new java2.util2.TreeSet((java2.util2.Collection)treeSet1);
    java2.util2.SortedSet sortedSet3 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet2);
    java2.util2.Comparator comparator4 = null;
    java2.util2.TreeSet treeSet5 = new java2.util2.TreeSet(comparator4);
    java2.util2.TreeSet treeSet6 = new java2.util2.TreeSet((java2.util2.Collection)treeSet5);
    boolean b7 = treeSet2.equals((java.lang.Object)treeSet5);
    java2.util2.List list10 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.List list11 = java2.util2.Collections.unmodifiableList(list10);
    java2.util2.List list12 = java2.util2.Collections.synchronizedList(list10);
    java2.util2.List list13 = java2.util2.Collections.singletonList((java.lang.Object)list12);
    boolean b14 = treeSet5.contains((java.lang.Object)list12);
    // The following exception was thrown during execution in test generation
    try {
      java2.util2.Collections.swap(list12, 10, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet2.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet2.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet5.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet5.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet6.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet6.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","TestClass0.test254"); }


    java2.util2.Comparator comparator0 = null;
    java2.util2.TreeSet treeSet1 = new java2.util2.TreeSet(comparator0);
    boolean b3 = treeSet1.contains((java.lang.Object)(-1.0f));
    boolean b5 = treeSet1.equals((java.lang.Object)100.0f);
    java2.util2.List list8 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list8, 1);
    java2.util2.List list13 = java2.util2.Collections.nCopies(1, (java.lang.Object)0.0f);
    java2.util2.Collections.rotate(list13, 1);
    int i16 = java2.util2.Collections.lastIndexOfSubList(list8, list13);
    boolean b17 = treeSet1.retainAll((java2.util2.Collection)list8);
    java2.util2.Comparator comparator18 = null;
    java2.util2.TreeSet treeSet19 = new java2.util2.TreeSet(comparator18);
    java2.util2.Collection collection20 = null;
    boolean b21 = treeSet19.retainAll(collection20);
    java2.util2.SortedSet sortedSet22 = java2.util2.Collections.synchronizedSortedSet((java2.util2.SortedSet)treeSet19);
    java2.util2.Collection collection23 = java2.util2.Collections.synchronizedCollection((java2.util2.Collection)sortedSet22);
    java2.util2.List list24 = java2.util2.Collections.singletonList((java.lang.Object)collection23);
    int i25 = java2.util2.Collections.indexOfSubList(list8, list24);
    java2.util2.Collections.reverse(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet1.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet1.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.isEmpty());
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(treeSet19.size() == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertEquals(treeSet19.toString(), "[]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sortedSet22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-1));

  }

}
