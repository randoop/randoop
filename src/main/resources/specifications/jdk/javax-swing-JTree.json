[
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getDefaultTreeModel",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the default TreeModel"
        },
        "description": "return the default TreeModel",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getShowsRootHandles",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the showsRootHandles property"
        },
        "description": "return the value of the showsRootHandles property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getScrollsOnExpand",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the scrollsOnExpand property"
        },
        "description": "return the value of the scrollsOnExpand property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "setDragEnabled",
      "parameterTypes": [
        "boolean"
      ]
    },
    "identifiers": {
      "parameters": [
        "b"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.awt.HeadlessException",
        "description": "throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true",
        "guard": {
          "condition": "b==true && b==true",
          "description": "if b is true and GraphicsEnvironment.isHeadless() returns true"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getDragEnabled",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the dragEnabled property"
        },
        "description": "return the value of the dragEnabled property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getDropMode",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the drop mode for this component"
        },
        "description": "return the drop mode for this component",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "dropLocationForPoint",
      "parameterTypes": [
        "java.awt.Point"
      ]
    },
    "identifiers": {
      "parameters": [
        "p"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(p)",
          "description": "the drop location, or null"
        },
        "description": "return the drop location, or null",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getDropLocation",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the drop location"
        },
        "description": "return the drop location",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "convertValueToText",
      "parameterTypes": [
        "java.lang.Object",
        "boolean",
        "boolean",
        "boolean",
        "int",
        "boolean"
      ]
    },
    "identifiers": {
      "parameters": [
        "value",
        "selected",
        "expanded",
        "leaf",
        "row",
        "hasFocus"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the String representation of the node's value"
        },
        "description": "return the String representation of the node's value",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getPathBounds",
      "parameterTypes": [
        "javax.swing.tree.TreePath"
      ]
    },
    "identifiers": {
      "parameters": [
        "path"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result==null",
          "description": "the Rectangle the node is drawn in, or null"
        },
        "description": "return the Rectangle the node is drawn in, or null",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getPathForLocation",
      "parameterTypes": [
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "x",
        "y"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(x)",
          "description": "the TreePath for the node at that location"
        },
        "description": "return the TreePath for the node at that location",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "getNextMatch",
      "parameterTypes": [
        "java.lang.String",
        "int",
        "javax.swing.text.Position$Bias"
      ]
    },
    "identifiers": {
      "parameters": [
        "prefix",
        "startingRow",
        "bias"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if prefix is null or startingRow is out of bounds",
        "guard": {
          "condition": "prefix==null",
          "description": "if prefix is null or startingRow is out of bounds"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTree",
      "name": "paramString",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "a string representation of this JTree."
        },
        "description": "return a string representation of this JTree.",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  }
]