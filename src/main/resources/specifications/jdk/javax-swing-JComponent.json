[
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "isRequestFocusEnabled",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result==true",
          "description": "true if this component should get focus, otherwise returns false"
        },
        "description": "return true if this component should get focus, otherwise returns false",
        "guard": {
          "condition": "target.gotFocus(java.awt.Event,java.lang.Object)",
          "description": ""
        }
      },
      {
        "property": {
          "condition": "result==false",
          "description": "true if this component should get focus, otherwise returns false"
        },
        "description": "return true if this component should get focus, otherwise returns false",
        "guard": {
          "condition": "target.gotFocus(java.awt.Event,java.lang.Object)",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getVerifyInputWhenFocusTarget",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "value of the verifyInputWhenFocusTarget property"
        },
        "description": "return value of the verifyInputWhenFocusTarget property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getFontMetrics",
      "parameterTypes": [
        "java.awt.Font"
      ]
    },
    "identifiers": {
      "parameters": [
        "font"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "throws NullPointerException if font is null",
        "guard": {
          "condition": "font==null",
          "description": "if font is null"
        }
      }
    ],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the font metrics for font"
        },
        "description": "return the font metrics for font",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getPreferredSize",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the preferredSize property"
        },
        "description": "return the value of the preferredSize property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getMaximumSize",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the maximumSize property"
        },
        "description": "return the value of the maximumSize property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getMinimumSize",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the minimumSize property"
        },
        "description": "return the value of the minimumSize property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "contains",
      "parameterTypes": [
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "x",
        "y"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result==true",
          "description": "true if this component logically contains x,y"
        },
        "description": "return true if this component logically contains x,y",
        "guard": {
          "condition": "target.contains(java.awt.Point)",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getInsets",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the insets property"
        },
        "description": "return the value of the insets property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getAlignmentY",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the alignmentY property"
        },
        "description": "return the value of the alignmentY property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getAlignmentX",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the alignmentX property"
        },
        "description": "return the value of the alignmentX property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getInputVerifier",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the inputVerifier property"
        },
        "description": "return the inputVerifier property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getRegisteredKeyStrokes",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "an array of KeyStroke objects"
        },
        "description": "return an array of KeyStroke objects",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getConditionForKeyStroke",
      "parameterTypes": [
        "javax.swing.KeyStroke"
      ]
    },
    "identifiers": {
      "parameters": [
        "aKeyStroke"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(aKeyStroke)",
          "description": "the action-keystroke condition"
        },
        "description": "return the action-keystroke condition",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "setInputMap",
      "parameterTypes": [
        "int",
        "javax.swing.InputMap"
      ]
    },
    "identifiers": {
      "parameters": [
        "condition",
        "map"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if condition is WHEN_IN_FOCUSED_WINDOW and map is not an instance of ComponentInputMap; or if condition is not one of the legal values specified above",
        "guard": {
          "condition": "(target.WHEN_IN_FOCUSED_WINDOW instanceof ComponentInputMap;) == false && (map instanceof ComponentInputMap;) == false || (condition==1) == false",
          "description": "if condition is WHEN_IN_FOCUSED_WINDOW and map is not an instance of ComponentInputMap; or if condition is not one of the legal values specified above"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getInputMap",
      "parameterTypes": [
        "int",
        "boolean"
      ]
    },
    "identifiers": {
      "parameters": [
        "condition",
        "create"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if condition is not one of the legal values listed above",
        "guard": {
          "condition": "(condition==1) == false",
          "description": "if condition is not one of the legal values listed above"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getActionMap",
      "parameterTypes": [
        "boolean"
      ]
    },
    "identifiers": {
      "parameters": [
        "create"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the ActionMap for this component; if the create flag is false and there is no current ActionMap, returns null"
        },
        "description": "return the ActionMap for this component; if the create flag is false and there is no current ActionMap, returns null",
        "guard": {
          "condition": "create==false",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getBaseline",
      "parameterTypes": [
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "width",
        "height"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if width or height is < 0",
        "guard": {
          "condition": "width<0 || height<0",
          "description": "if width or height is < 0"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "setEnabled",
      "parameterTypes": [
        "boolean"
      ]
    },
    "identifiers": {
      "parameters": [
        "enabled"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "true if this component should be enabled, false otherwise",
        "guard": {
          "condition": "enabled==false",
          "description": "true if this component should be enabled, false otherwise"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "setToolTipText",
      "parameterTypes": [
        "java.lang.String"
      ]
    },
    "identifiers": {
      "parameters": [
        "text"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the string to display; if the text is null, the tool tip is turned off for this component",
        "guard": {
          "condition": "text==null",
          "description": "the string to display; if the text is null, the tool tip is turned off for this component"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getToolTipText",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the text of the tool tip"
        },
        "description": "return the text of the tool tip",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getAutoscrolls",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the autoscrolls property"
        },
        "description": "return the value of the autoscrolls property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getTransferHandler",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the transferHandler property"
        },
        "description": "return the value of the transferHandler property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "dropLocationForPoint",
      "parameterTypes": [
        "java.awt.Point"
      ]
    },
    "identifiers": {
      "parameters": [
        "p"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(p)",
          "description": "the drop location, or null"
        },
        "description": "return the drop location, or null",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getClientProperty",
      "parameterTypes": [
        "java.lang.Object"
      ]
    },
    "identifiers": {
      "parameters": [
        "key"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of this property or null"
        },
        "description": "return the value of this property or null",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "setFocusTraversalKeys",
      "parameterTypes": [
        "int",
        "java.util.Set"
      ]
    },
    "identifiers": {
      "parameters": [
        "id",
        "keystrokes"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if id is not one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or if keystrokes contains null, or if any keystroke represents a KEY_TYPED event, or if any keystroke already maps to another focus traversal operation for this Component",
        "guard": {
          "condition": "(id==1) == false || keystrokes.contains(null)",
          "description": "if id is not one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or if keystrokes contains null, or if any keystroke represents a KEY_TYPED event, or if any keystroke already maps to another focus traversal operation for this Component"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "isLightweightComponent",
      "parameterTypes": [
        "java.awt.Component"
      ]
    },
    "identifiers": {
      "parameters": [
        "c"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result==true",
          "description": "true if this component is lightweight"
        },
        "description": "return true if this component is lightweight",
        "guard": {
          "condition": "c.isLightweight()",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getBounds",
      "parameterTypes": [
        "java.awt.Rectangle"
      ]
    },
    "identifiers": {
      "parameters": [
        "rv"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(rv)",
          "description": "rv; if rv is null return a newly created Rectangle with this component's bounds"
        },
        "description": "return rv; if rv is null return a newly created Rectangle with this component's bounds",
        "guard": {
          "condition": "rv==null",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getSize",
      "parameterTypes": [
        "java.awt.Dimension"
      ]
    },
    "identifiers": {
      "parameters": [
        "rv"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(rv)",
          "description": "rv"
        },
        "description": "return rv",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getLocation",
      "parameterTypes": [
        "java.awt.Point"
      ]
    },
    "identifiers": {
      "parameters": [
        "rv"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(rv)",
          "description": "rv"
        },
        "description": "return rv",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getWidth",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the current width of this component"
        },
        "description": "return the current width of this component",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getHeight",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the current height of this component"
        },
        "description": "return the current height of this component",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "getVisibleRect",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the visible rectangle"
        },
        "description": "return the visible rectangle",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JComponent",
      "name": "paramString",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "a string representation of this JComponent"
        },
        "description": "return a string representation of this JComponent",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  }
]