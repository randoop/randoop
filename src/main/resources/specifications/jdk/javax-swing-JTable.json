[
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "setRowHeight",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "rowHeight"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if rowHeight is less than 1",
        "guard": {
          "condition": "rowHeight<1",
          "description": "if rowHeight is less than 1"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getRowHeight",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the height in pixels of a table row"
        },
        "description": "return the height in pixels of a table row",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "setRowHeight",
      "parameterTypes": [
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "row",
        "rowHeight"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if rowHeight is less than 1",
        "guard": {
          "condition": "rowHeight<1",
          "description": "if rowHeight is less than 1"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getRowHeight",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "row"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the height, in pixels, of the cells in the row"
        },
        "description": "return the height, in pixels, of the cells in the row",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getRowMargin",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the number of pixels between cells in a row"
        },
        "description": "return the number of pixels between cells in a row",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getIntercellSpacing",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the horizontal and vertical spacing between cells"
        },
        "description": "return the horizontal and vertical spacing between cells",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "setGridColor",
      "parameterTypes": [
        "java.awt.Color"
      ]
    },
    "identifiers": {
      "parameters": [
        "gridColor"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if gridColor is null",
        "guard": {
          "condition": "gridColor==null",
          "description": "if gridColor is null"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getAutoResizeMode",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the autoResizeMode of the table"
        },
        "description": "return the autoResizeMode of the table",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getAutoCreateColumnsFromModel",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the autoCreateColumnsFromModel of the table"
        },
        "description": "return the autoCreateColumnsFromModel of the table",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getDefaultRenderer",
      "parameterTypes": [
        "java.lang.Class"
      ]
    },
    "identifiers": {
      "parameters": [
        "columnClass"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the renderer for this columnClass"
        },
        "description": "return the renderer for this columnClass",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "setDragEnabled",
      "parameterTypes": [
        "boolean"
      ]
    },
    "identifiers": {
      "parameters": [
        "b"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.awt.HeadlessException",
        "description": "throws HeadlessException if b is true and GraphicsEnvironment.isHeadless() returns true",
        "guard": {
          "condition": "b==true && b==true",
          "description": "if b is true and GraphicsEnvironment.isHeadless() returns true"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getDragEnabled",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the dragEnabled property"
        },
        "description": "return the value of the dragEnabled property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getDropMode",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the drop mode for this component"
        },
        "description": "return the drop mode for this component",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "dropLocationForPoint",
      "parameterTypes": [
        "java.awt.Point"
      ]
    },
    "identifiers": {
      "parameters": [
        "p"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(p)",
          "description": "the drop location, or null"
        },
        "description": "return the drop location, or null",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getDropLocation",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the drop location"
        },
        "description": "return the drop location",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getColumn",
      "parameterTypes": [
        "java.lang.Object"
      ]
    },
    "identifiers": {
      "parameters": [
        "identifier"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if identifier is null or no TableColumn has this identifier",
        "guard": {
          "condition": "identifier==null",
          "description": "if identifier is null or no TableColumn has this identifier"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "convertColumnIndexToModel",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "viewColumnIndex"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the index of the corresponding column in the model"
        },
        "description": "return the index of the corresponding column in the model",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "convertColumnIndexToView",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "modelColumnIndex"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the index of the corresponding column in the view"
        },
        "description": "return the index of the corresponding column in the view",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "convertRowIndexToModel",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "viewRowIndex"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the index of the corresponding row in the model"
        },
        "description": "return the index of the corresponding row in the model",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getColumnCount",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the number of columns in the table"
        },
        "description": "return the number of columns in the table",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "setModel",
      "parameterTypes": [
        "javax.swing.table.TableModel"
      ]
    },
    "identifiers": {
      "parameters": [
        "dataModel"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if newModel is null",
        "guard": {
          "condition": "target.getX()==null",
          "description": "if newModel is null"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "setColumnModel",
      "parameterTypes": [
        "javax.swing.table.TableColumnModel"
      ]
    },
    "identifiers": {
      "parameters": [
        "columnModel"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if columnModel is null",
        "guard": {
          "condition": "columnModel==null",
          "description": "if columnModel is null"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "setSelectionModel",
      "parameterTypes": [
        "javax.swing.ListSelectionModel"
      ]
    },
    "identifiers": {
      "parameters": [
        "newModel"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if newModel is null",
        "guard": {
          "condition": "newModel==null",
          "description": "if newModel is null"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "sorterChanged",
      "parameterTypes": [
        "javax.swing.event.RowSorterEvent"
      ]
    },
    "identifiers": {
      "parameters": [
        "e"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.NullPointerException",
        "description": "throws NullPointerException if e is null",
        "guard": {
          "condition": "e==null",
          "description": "if e is null"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getScrollableBlockIncrement",
      "parameterTypes": [
        "java.awt.Rectangle",
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "visibleRect",
        "orientation",
        "direction"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "visibleRect.height or visibleRect.width per the orientation"
        },
        "description": "return visibleRect.height or visibleRect.width per the orientation",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "getScrollableTracksViewportHeight",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result==true",
          "description": "false unless getFillsViewportHeight is true and the table needs to be stretched to fill the viewport"
        },
        "description": "return false unless getFillsViewportHeight is true and the table needs to be stretched to fill the viewport",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "prepareRenderer",
      "parameterTypes": [
        "javax.swing.table.TableCellRenderer",
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "renderer",
        "row",
        "column"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the Component under the event location"
        },
        "description": "return the Component under the event location",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JTable",
      "name": "paramString",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "a string representation of this table"
        },
        "description": "return a string representation of this table",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  }
]