[
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "getView",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "n"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target)",
          "description": "the view"
        },
        "description": "return the view",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "insert",
      "parameterTypes": [
        "int",
        "javax.swing.text.View"
      ]
    },
    "identifiers": {
      "parameters": [
        "offs",
        "v"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the offset of the view to insert before >= 0",
        "guard": {
          "condition": "offs>=0",
          "description": "the offset of the view to insert before >= 0"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "getViewIndex",
      "parameterTypes": [
        "int",
        "javax.swing.text.Position$Bias"
      ]
    },
    "identifiers": {
      "parameters": [
        "pos",
        "b"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the position >= 0",
        "guard": {
          "condition": "pos>=0",
          "description": "the position >= 0"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "getChildAllocation",
      "parameterTypes": [
        "int",
        "java.awt.Shape"
      ]
    },
    "identifiers": {
      "parameters": [
        "index",
        "a"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(a)",
          "description": "the allocation to the child"
        },
        "description": "return the allocation to the child",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "getNextVisualPositionFrom",
      "parameterTypes": [
        "int",
        "javax.swing.text.Position$Bias",
        "java.awt.Shape",
        "int",
        "[Ljavax.swing.text.Position$Bias;"
      ]
    },
    "identifiers": {
      "parameters": [
        "pos",
        "b",
        "a",
        "direction",
        "biasRet"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This will be one of the following values: SwingConstants.WEST SwingConstants.EAST SwingConstants.NORTH SwingConstants.SOUTH",
        "guard": {
          "condition": "direction==1",
          "description": "the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This will be one of the following values: SwingConstants.WEST SwingConstants.EAST SwingConstants.NORTH SwingConstants.SOUTH"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "viewToModel",
      "parameterTypes": [
        "float",
        "float",
        "java.awt.Shape",
        "[Ljavax.swing.text.Position$Bias;"
      ]
    },
    "identifiers": {
      "parameters": [
        "x",
        "y",
        "a",
        "biasReturn"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the X coordinate >= 0",
        "guard": {
          "condition": "x>=0",
          "description": "the X coordinate >= 0"
        }
      },
      {
        "description": "the Y coordinate >= 0",
        "guard": {
          "condition": "y>=0",
          "description": "the Y coordinate >= 0"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "getStartOffset",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result>=0",
          "description": "the starting offset into the model >= 0"
        },
        "description": "return the starting offset into the model >= 0",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "getEndOffset",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result>=0",
          "description": "the ending offset into the model >= 0"
        },
        "description": "return the ending offset into the model >= 0",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "breakView",
      "parameterTypes": [
        "int",
        "int",
        "float",
        "float"
      ]
    },
    "identifiers": {
      "parameters": [
        "axis",
        "offset",
        "pos",
        "len"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the position along the axis that the broken view would occupy >= 0. This may be useful for things like tab calculations",
        "guard": {
          "condition": "offset>=0",
          "description": "the position along the axis that the broken view would occupy >= 0. This may be useful for things like tab calculations"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "createFragment",
      "parameterTypes": [
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "p0",
        "p1"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the ending offset > p0. This should be a value less than or equal to the elements end offset and greater than the elements starting offset.",
        "guard": {
          "condition": "target.LEADING>p0",
          "description": "the ending offset > p0. This should be a value less than or equal to the elements end offset and greater than the elements starting offset."
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "getResizeWeight",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "axis"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.RIGHT)",
          "description": "the weight"
        },
        "description": "return the weight",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "setSize",
      "parameterTypes": [
        "float",
        "float"
      ]
    },
    "identifiers": {
      "parameters": [
        "width",
        "height"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the width >= 0",
        "guard": {
          "condition": "width>=0",
          "description": "the width >= 0"
        }
      },
      {
        "description": "the height >= 0",
        "guard": {
          "condition": "height>=0",
          "description": "the height >= 0"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "updateChildren",
      "parameterTypes": [
        "javax.swing.event.DocumentEvent$ElementChange",
        "javax.swing.event.DocumentEvent",
        "javax.swing.text.ViewFactory"
      ]
    },
    "identifiers": {
      "parameters": [
        "ec",
        "e",
        "f"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the change information for the element this view is responsible for. This should not be null if this method gets called",
        "guard": {
          "condition": "(ec==null) == false",
          "description": "the change information for the element this view is responsible for. This should not be null if this method gets called"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "modelToView",
      "parameterTypes": [
        "int",
        "java.awt.Shape"
      ]
    },
    "identifiers": {
      "parameters": [
        "pos",
        "a"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the position to convert >= 0",
        "guard": {
          "condition": "pos>=0",
          "description": "the position to convert >= 0"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.text.View",
      "name": "viewToModel",
      "parameterTypes": [
        "float",
        "float",
        "java.awt.Shape"
      ]
    },
    "identifiers": {
      "parameters": [
        "x",
        "y",
        "a"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result>=0",
          "description": "the location within the model that best represents the given point in the view >= 0"
        },
        "description": "return the location within the model that best represents the given point in the view >= 0",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": [
      {
        "description": "the X coordinate >= 0",
        "guard": {
          "condition": "x>=0",
          "description": "the X coordinate >= 0"
        }
      },
      {
        "description": "the Y coordinate >= 0",
        "guard": {
          "condition": "y>=0",
          "description": "the Y coordinate >= 0"
        }
      }
    ]
  }
]