[
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getText",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the buttons text"
        },
        "description": "return the buttons text",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "setSelected",
      "parameterTypes": [
        "boolean"
      ]
    },
    "identifiers": {
      "parameters": [
        "b"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "true if the button is selected, otherwise false",
        "guard": {
          "condition": "target.isSelected()",
          "description": "true if the button is selected, otherwise false"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getIcon",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the default Icon"
        },
        "description": "return the default Icon",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getPressedIcon",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the pressedIcon property"
        },
        "description": "return the pressedIcon property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getSelectedIcon",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the selectedIcon property"
        },
        "description": "return the selectedIcon property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getRolloverIcon",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the rolloverIcon property"
        },
        "description": "return the rolloverIcon property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getRolloverSelectedIcon",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the rolloverSelectedIcon property"
        },
        "description": "return the rolloverSelectedIcon property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getDisabledIcon",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the disabledIcon property"
        },
        "description": "return the disabledIcon property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getDisabledSelectedIcon",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the disabledSelectedIcon property"
        },
        "description": "return the disabledSelectedIcon property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getVerticalAlignment",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the verticalAlignment property, one of the following values: SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM"
        },
        "description": "return the verticalAlignment property, one of the following values: SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "setVerticalAlignment",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "alignment"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if the alignment is not one of the legal values listed above",
        "guard": {
          "condition": "(alignment==1) == false",
          "description": "if the alignment is not one of the legal values listed above"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getHorizontalAlignment",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the horizontalAlignment property, one of the following values: SwingConstants.RIGHT SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING"
        },
        "description": "return the horizontalAlignment property, one of the following values: SwingConstants.RIGHT SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "setHorizontalAlignment",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "alignment"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if the alignment is not one of the valid values",
        "guard": {
          "condition": "(alignment==1) == false",
          "description": "if the alignment is not one of the valid values"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getVerticalTextPosition",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the verticalTextPosition property, one of the following values: SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM"
        },
        "description": "return the verticalTextPosition property, one of the following values: SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getHorizontalTextPosition",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the horizontalTextPosition property, one of the following values: SwingConstants.RIGHT SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING (the default)"
        },
        "description": "return the horizontalTextPosition property, one of the following values: SwingConstants.RIGHT SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING (the default)",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "setHorizontalTextPosition",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "textPosition"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if textPosition is not one of the legal values listed above",
        "guard": {
          "condition": "(textPosition==1) == false",
          "description": "if textPosition is not one of the legal values listed above"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "checkHorizontalKey",
      "parameterTypes": [
        "int",
        "java.lang.String"
      ]
    },
    "identifiers": {
      "parameters": [
        "key",
        "exception"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if key is not one of the legal values listed above",
        "guard": {
          "condition": "(key==1) == false",
          "description": "if key is not one of the legal values listed above"
        }
      }
    ],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the key argument"
        },
        "description": "return the key argument",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "checkVerticalKey",
      "parameterTypes": [
        "int",
        "java.lang.String"
      ]
    },
    "identifiers": {
      "parameters": [
        "key",
        "exception"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if key is not one of the legal values listed above",
        "guard": {
          "condition": "(key==1) == false",
          "description": "if key is not one of the legal values listed above"
        }
      }
    ],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the key argument"
        },
        "description": "return the key argument",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getActionCommand",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the action command for this button"
        },
        "description": "return the action command for this button",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getAction",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the Action for this ActionEvent source, or null"
        },
        "description": "return the Action for this ActionEvent source, or null",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "createActionPropertyChangeListener",
      "parameterTypes": [
        "javax.swing.Action"
      ]
    },
    "identifiers": {
      "parameters": [
        "a"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [],
    "pre": [
      {
        "description": "the button's action",
        "guard": {
          "condition": "target.action(java.awt.Event, java.lang.Object)",
          "description": "the button's action"
        }
      }
    ]
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "isBorderPainted",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the borderPainted property"
        },
        "description": "return the value of the borderPainted property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "isFocusPainted",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the paintFocus property"
        },
        "description": "return the paintFocus property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "isContentAreaFilled",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the contentAreaFilled property"
        },
        "description": "return the contentAreaFilled property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "isRolloverEnabled",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the rolloverEnabled property"
        },
        "description": "return the value of the rolloverEnabled property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getMnemonic",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the keyboard mnemonic from the model"
        },
        "description": "return the keyboard mnemonic from the model",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "setDisplayedMnemonicIndex",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "index"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException will be thrown if index is >= length of the text, or < -1",
        "guard": {
          "condition": "index>=target.getX() || index<-1",
          "description": "will be thrown if index is >= length of the text, or < -1"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "setMultiClickThreshhold",
      "parameterTypes": [
        "long"
      ]
    },
    "identifiers": {
      "parameters": [
        "threshhold"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if threshhold < 0",
        "guard": {
          "condition": "threshhold<0",
          "description": "if threshhold < 0"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "getModel",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the model property"
        },
        "description": "return the model property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "createChangeListener",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the new ChangeListener"
        },
        "description": "return the new ChangeListener",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.AbstractButton",
      "name": "paramString",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "a string representation of this AbstractButton"
        },
        "description": "return a string representation of this AbstractButton",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  }
]