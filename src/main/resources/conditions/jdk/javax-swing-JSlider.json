[
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "javax.swing.JSlider",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "orientation"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL",
        "guard": {
          "condition": "(orientation==1) == false",
          "description": "if orientation is not one of VERTICAL, HORIZONTAL"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "javax.swing.JSlider",
      "parameterTypes": [
        "int",
        "int",
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "orientation",
        "min",
        "max",
        "value"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL",
        "guard": {
          "condition": "(orientation==1) == false",
          "description": "if orientation is not one of VERTICAL, HORIZONTAL"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getUIClassID",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target)",
          "description": "\"SliderUI\""
        },
        "description": "return \"SliderUI\"",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getModel",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the data model for this component"
        },
        "description": "return the data model for this component",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getValue",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the current value of the slider"
        },
        "description": "return the current value of the slider",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getMinimum",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the model's minimum property"
        },
        "description": "return the value of the model's minimum property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getMaximum",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the value of the model's maximum property"
        },
        "description": "return the value of the model's maximum property",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getOrientation",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "SwingConstants.VERTICAL or SwingConstants.HORIZONTAL"
        },
        "description": "return SwingConstants.VERTICAL or SwingConstants.HORIZONTAL",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "setOrientation",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "orientation"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL",
        "guard": {
          "condition": "(orientation==1) == false",
          "description": "if orientation is not one of VERTICAL, HORIZONTAL"
        }
      }
    ],
    "post": [],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "createStandardLabels",
      "parameterTypes": [
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "increment"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [
      {
        "exception": "java.lang.IllegalArgumentException",
        "description": "throws IllegalArgumentException if increment is less than or equal to zero",
        "guard": {
          "condition": "increment<=0",
          "description": "if increment is less than or equal to zero"
        }
      }
    ],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "a new Hashtable of labels"
        },
        "description": "return a new Hashtable of labels",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "createStandardLabels",
      "parameterTypes": [
        "int",
        "int"
      ]
    },
    "identifiers": {
      "parameters": [
        "increment",
        "start"
      ],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "a new Hashtable of labels"
        },
        "description": "return a new Hashtable of labels",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getMajorTickSpacing",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the number of values between major ticks"
        },
        "description": "return the number of values between major ticks",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "getMinorTickSpacing",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "the number of values between minor ticks"
        },
        "description": "return the number of values between minor ticks",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  },
  {
    "operation": {
      "classname": "javax.swing.JSlider",
      "name": "paramString",
      "parameterTypes": []
    },
    "identifiers": {
      "parameters": [],
      "receiverName": "target",
      "returnName": "result"
    },
    "throws": [],
    "post": [
      {
        "property": {
          "condition": "result.equals(target.getX())",
          "description": "a string representation of this JSlider."
        },
        "description": "return a string representation of this JSlider.",
        "guard": {
          "condition": "true",
          "description": ""
        }
      }
    ],
    "pre": []
  }
]