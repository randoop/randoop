package randoop.input.toradocu;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Objects;

import randoop.condition.Condition;

/**
 * Represents a Toradocu harvested condition.
 * Consists of the {@link Tag} object along with the {@code java.lang.reflect.Method} for the
 * condition method generated by Toradocu.
 */
public class ToradocuCondition implements Condition {

  private final Tag tag;
  private final Method conditionMethod;

  ToradocuCondition(Tag tag, Method conditionMethod) {
    this.tag = tag;
    this.conditionMethod = conditionMethod;
  }

  @Override
  public boolean equals(Object obj) {
    if (!(obj instanceof ToradocuCondition)) {
      return false;
    }
    ToradocuCondition other = (ToradocuCondition) obj;
    return this.tag.equals(other.tag) && this.conditionMethod.equals(other.conditionMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, conditionMethod);
  }

  @Override
  public String toString() {
    return tag.toString();
  }

  @Override
  public boolean check(Object[] values) {
    try {
      return (boolean) conditionMethod.invoke(null, values);
    } catch (IllegalAccessException e) {
      throw new Error("Failure executing Toradocu condition method: " + e);
    } catch (InvocationTargetException e) {
      throw new Error(
          "Failure executing Toradocu condition method: "
              + conditionMethod
              + "(invoke threw "
              + e.getCause()
              + ")");
    }
  }

  @Override
  public String getComment() {
    return tag.getComment();
  }
}
