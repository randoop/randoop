/* build file for replacecall agent */

plugins {
  id("java")
  id("jacoco")
}

description = "replacecall agent"
sourceSets {
  agentTest
}

configurations {
  implementation.extendsFrom(plumelib)
  agentTestImplementation.extendsFrom(testImplementation)
}
dependencies {
  testImplementation("junit:junit:4.+")
  testImplementation("org.hamcrest:hamcrest-all:1.3")
  agentTestImplementation(project(path: ":", configuration: "testInput"))
  agentTestImplementation(project(path: ":", configuration: "fatJar"))
}

javadoc {
  // Add -Werror once Javadoc warnings are resolved.
  options.addStringOption("Xdoclint:all", "-quiet")
}

/*
 * Jar needs to be executable as a javaagent.
 */
jar {
  manifest {
    attributes(
        "Premain-Class": "randoop.instrument.ReplaceCallAgent",
        "Can-Redefine-Classes": "true"
        )
  }
}

test {
  testLogging {
    events("started", "passed")
    showStandardStreams = true
    exceptionFormat = "full"
  }
}
compileAgentTestJava {
  dependsOn(":copyJars")
}
tasks.register("replacecallAgentTest", Test) {
  description = "Run replace-call tests"

  workingDir = sourceSets.agentTest.output.resourcesDir
  testClassesDirs = sourceSets.agentTest.output.classesDirs
  classpath = sourceSets.agentTest.runtimeClasspath +(files("${layout.buildDirectory.get()}/libs/replacecall-${version}.jar"))
  // use the replacecall agent using the exclusions file from agentTest/resources
  jvmArgs("-javaagent:${layout.buildDirectory.get()}/libs/replacecall-${version}.jar=--dont-transform=replacecall-exclusions.txt")
  jvmArgs("-Xbootclasspath/a:${layout.buildDirectory.get()}/libs/replacecall-${version}.jar")
  testLogging {
    showStandardStreams = true
    exceptionFormat = "full"
  }

  // Turn off HTML reports -- handled by testReport task.
  reports.html.required = false
}
jacocoTestReport.dependsOn(replacecallAgentTest)
check.dependsOn(replacecallAgentTest)

shadowJar {
  // We want the jar to be named replacecall-version.jar
  archiveClassifier = null

  relocate("com.google", "replacecall.com.google")
  relocate("com.jcraft.jsch", "replacecall.com.jcraft.jsch")
  relocate("com.sun.javadoc", "replacecall.com.sun.javadoc")
  relocate("com.sun.jna", "replacecall.com.sun.jna")
  relocate("com.trilead.ssh2", "replacecall.com.trilead.ssh2")
  relocate("de.regnis.q.sequence", "replacecall.de.regnis.q.sequence")
  relocate("net.fortuna.ical4j", "replacecall.net.fortuna.ical4j")
  relocate("nu.xom", "replacecall.nu.xom")
  relocate("org.antlr", "replacecall.org.antlr")
  relocate("org.apache", "replacecall.org.apache")
  relocate("org.ccil.cowan.tagsoup", "replacecall.org.ccil.cowan.tagsoup")
  relocate("org.checkerframework", "replacecall.org.checkerframework")
  relocate("org.ini4j", "replacecall.org.ini4j")
  relocate("org.junit", "replacecall.org.junit")
  relocate("org.slf4j", "replacecall.org.slf4j")
  relocate("org.tigris.subversion", "replacecall.org.tigris.subversion")
  relocate("org.tmatesoft", "replacecall.org.tmatesoft")
}

apply from: rootProject.file("gradle-mvn-push.gradle")

final replacecallPom(publication) {
  // Don't use publication.from(components.java) which would publish the skinny jar as randoop.jar.
  // Information that is in all pom files is configured in randoop/gradle-mvn-push.gradle.
  publication.pom {
    name = "Randoop's replacecall agent"
    description = "Replaces certain method calls by others at run time"
  }
}

publishing {
  publications {
    remote(MavenPublication) {
      replacecallPom(it)
      artifact(shadowJar)
      artifact(javadocJar)
      artifact(sourcesJar)
    }

    local(MavenPublication) {
      replacecallPom(it)
      artifact(shadowJar)
      artifact(javadocJar)
      artifact(sourcesJar)
    }
  }
}
