#!/usr/bin/env perl

=head1 NAME

prepare-coverage-data

=head1 SYNOPSIS

prepare-coverage-data [options] [optional coverage xml file]

 Options:
  -help        brief help message
  -man         full documentation

=head1 OPTIONS

=over 4

=item B<-help>

Print a brief help message and exit.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

This perl script is intended for use by Randoop developers to prepare the
Randoop code coverage results for inclusion into the master results CSV file.
By default, the script will read the file:

  build/reports/jacoco/test/jacocoTestReport.xml

This file is generated as part of the gradlew build task. You may generate it directly
with the gradlew jacocoTestReport task.

=cut

use strict;
use warnings;

use POSIX qw(strftime);
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);

my $help = 0;
my $details = 0;
my $man = 0;

# Parse options and print usage if there is a syntax error,
# or if usage was explicitly requested.
GetOptions('help|?' => \$help, man => \$man) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
# Check for too many filenames
pod2usage("$0: Too many files given.\n")  if (@ARGV > 1);

my $test_count = 0;
my $tot_line = 0;
my $tot_exec = 0;
my @xml_lines;
my @fields;
my $filename = 'build/reports/jacoco/test/jacocoTestReport.xml';

if (@ARGV == 1) {
    $filename = $ARGV[0];
}

open(my $fh, '<', $filename)
  or die "Could not open file '$filename'. $!.\n";

my $time_run = (stat($fh))[9];

while (<$fh>) {
    chomp;
    $tot_line++;
    @xml_lines = split /></;
}

if ($tot_line != 1) {
    die "Unrecognized format of file '$filename'";
}

if ($xml_lines[$#xml_lines] ne "/report>") {
    die "Unrecognized format of file '$filename'";
}

my $element;
my $name;
my @output;
my $index = 0;

for my $i (0 .. $#xml_lines) {
    $element = $xml_lines[$i];
    if (substr($element, 0, length("package")) eq "package") {
        @fields = split(/"/, $element);
        $name = $fields[1];
    } elsif (substr($element, 0, length("/package")) eq "/package") {
        @fields = split(/"/, $xml_lines[$i-4]);
        $tot_exec = $fields[5];
        $tot_line = $fields[3] + $tot_exec;
        # time run, suite name, test name, sub-test number, lines covered, total lines
        $output[$index++] = sprintf("%d, %s, %s, %d, %d, %d \n", $time_run, "randoop", $name, 1, $tot_exec, $tot_line);
    }
}

foreach (sort(@output)) {
    print $_
}

@fields = split(/"/, $xml_lines[$#xml_lines-4]);

if ($fields[0] ne "counter type=" || $fields[1] ne "LINE") {
    die "Unrecognized format of file '$filename'";
}

